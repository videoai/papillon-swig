//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PByteArray : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PByteArray(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PByteArray_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PByteArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PByteArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PByteArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PByteArray() : this(PapillonPINVOKE.new_PByteArray__SWIG_0(), true) {
  }

  public PByteArray(int capacity) : this(PapillonPINVOKE.new_PByteArray__SWIG_1(capacity), true) {
  }

  public PByteArray(global::System.IntPtr buffer, int numBytes) : this(PapillonPINVOKE.new_PByteArray__SWIG_2(buffer, numBytes), true) {
  }

  public PByteArray(VectorByte array) : this(PapillonPINVOKE.new_PByteArray__SWIG_3(VectorByte.getCPtr(array)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PByteArray(PByteArray other) : this(PapillonPINVOKE.new_PByteArray__SWIG_4(PByteArray.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PByteArray Clone() {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_Clone(swigCPtr), true);
    return ret;
  }

  public static PResult FromString(string s, PByteArray a) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_FromString(s, PByteArray.getCPtr(a)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsEmpty() {
    bool ret = PapillonPINVOKE.PByteArray_IsEmpty(swigCPtr);
    return ret;
  }

  public int Size() {
    int ret = PapillonPINVOKE.PByteArray_Size(swigCPtr);
    return ret;
  }

  public int Capacity() {
    int ret = PapillonPINVOKE.PByteArray_Capacity(swigCPtr);
    return ret;
  }

  public void Clear() {
    PapillonPINVOKE.PByteArray_Clear(swigCPtr);
  }

  public void Fill(byte value) {
    PapillonPINVOKE.PByteArray_Fill(swigCPtr, value);
  }

  public PResult Resize(int n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_Resize(swigCPtr, n), true);
    return ret;
  }

  public PResult Reserve(int n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_Reserve(swigCPtr, n), true);
    return ret;
  }

  public void Append(PByteArray other) {
    PapillonPINVOKE.PByteArray_Append(swigCPtr, PByteArray.getCPtr(other));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PushBack(byte value) {
    PapillonPINVOKE.PByteArray_PushBack(swigCPtr, value);
  }

  public byte PopBack() {
    byte ret = PapillonPINVOKE.PByteArray_PopBack(swigCPtr);
    return ret;
  }

  public int Get(int index) {
    int ret = PapillonPINVOKE.PByteArray_Get(swigCPtr, index);
    return ret;
  }

  public PResult Set(int index, int value) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_Set(swigCPtr, index, value), true);
    return ret;
  }

  public PByteArray Zip(int compressionLevel) {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_Zip__SWIG_0(swigCPtr, compressionLevel), true);
    return ret;
  }

  public PByteArray Zip() {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_Zip__SWIG_1(swigCPtr), true);
    return ret;
  }

  public PByteArray Unzip() {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_Unzip(swigCPtr), true);
    return ret;
  }

  public PByteArray EncodeToBase64() {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_EncodeToBase64(swigCPtr), true);
    return ret;
  }

  public string ToStringBase64() {
    string ret = PapillonPINVOKE.PByteArray_ToStringBase64(swigCPtr);
    return ret;
  }

  public static PByteArray DecodeFromBase64(PByteArray base64) {
    PByteArray ret = new PByteArray(PapillonPINVOKE.PByteArray_DecodeFromBase64(PByteArray.getCPtr(base64)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CRC16() {
    ushort ret = PapillonPINVOKE.PByteArray_CRC16(swigCPtr);
    return ret;
  }

  public string MD5() {
    string ret = PapillonPINVOKE.PByteArray_MD5(swigCPtr);
    return ret;
  }

  public string SHA256() {
    string ret = PapillonPINVOKE.PByteArray_SHA256(swigCPtr);
    return ret;
  }

  public PResult ToFile(string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_ToFile(swigCPtr, filename), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult FromFile(string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_FromFile(swigCPtr, filename), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string c_str() {
    string ret = PapillonPINVOKE.PByteArray_c_str(swigCPtr);
    return ret;
  }

  public PResult CopyToRawBuffer(global::System.IntPtr destinationBuffer, int sourceOffset, int numBytes) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_CopyToRawBuffer(swigCPtr, destinationBuffer, sourceOffset, numBytes), true);
    return ret;
  }

  public PResult CopyFromRawBuffer(global::System.IntPtr sourceBuffer, int destinationOffset, int numBytes) {
    PResult ret = new PResult(PapillonPINVOKE.PByteArray_CopyFromRawBuffer(swigCPtr, sourceBuffer, destinationOffset, numBytes), true);
    return ret;
  }

  public SWIGTYPE_p_double AsPtrDouble(int offsetInBytes) {
    global::System.IntPtr cPtr = PapillonPINVOKE.PByteArray_AsPtrDouble__SWIG_0(swigCPtr, offsetInBytes);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_double AsPtrDouble() {
    global::System.IntPtr cPtr = PapillonPINVOKE.PByteArray_AsPtrDouble__SWIG_1(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

}
