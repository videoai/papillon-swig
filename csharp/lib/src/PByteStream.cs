//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PByteStream : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PByteStream(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PByteStream_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PByteStream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PByteStream() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PByteStream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PByteStream() : this(PapillonPINVOKE.new_PByteStream__SWIG_0(), true) {
  }

  public PByteStream(PByteStream other) : this(PapillonPINVOKE.new_PByteStream__SWIG_1(PByteStream.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PResult IsOpened() {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_IsOpened(swigCPtr), true);
    return ret;
  }

  public PResult Flush() {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_Flush(swigCPtr), true);
    return ret;
  }

  public PResult Close() {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_Close(swigCPtr), true);
    return ret;
  }

  public bool CanSeek() {
    bool ret = PapillonPINVOKE.PByteStream_CanSeek(swigCPtr);
    return ret;
  }

  public long GetPosition() {
    long ret = PapillonPINVOKE.PByteStream_GetPosition(swigCPtr);
    return ret;
  }

  public PResult Seek(long n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_Seek(swigCPtr, n), true);
    return ret;
  }

  public PResult Rewind() {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_Rewind(swigCPtr), true);
    return ret;
  }

  public bool HasSize() {
    bool ret = PapillonPINVOKE.PByteStream_HasSize(swigCPtr);
    return ret;
  }

  public long Size() {
    long ret = PapillonPINVOKE.PByteStream_Size(swigCPtr);
    return ret;
  }

  public PResult Resize(long newSize) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_Resize(swigCPtr, newSize), true);
    return ret;
  }

  public bool CanRead() {
    bool ret = PapillonPINVOKE.PByteStream_CanRead(swigCPtr);
    return ret;
  }

  public PResult ReadByte(SWIGTYPE_p_signed_char value) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_ReadByte(swigCPtr, SWIGTYPE_p_signed_char.getCPtr(value)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult ReadBytes(global::System.IntPtr destinationBuffer, int n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_ReadBytes__SWIG_0(swigCPtr, destinationBuffer, n), true);
    return ret;
  }

  public PResult ReadBytes(PByteArray destinationArray, int position, int n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_ReadBytes__SWIG_1(swigCPtr, PByteArray.getCPtr(destinationArray), position, n), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CanWrite() {
    bool ret = PapillonPINVOKE.PByteStream_CanWrite(swigCPtr);
    return ret;
  }

  public PResult WriteByte(sbyte value) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_WriteByte(swigCPtr, value), true);
    return ret;
  }

  public PResult WriteBytes(global::System.IntPtr sourceBuffer, int n) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_WriteBytes__SWIG_0(swigCPtr, sourceBuffer, n), true);
    return ret;
  }

  public PResult WriteBytes(PByteArray sourceArray, int sourcePosition, int numBytes) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_WriteBytes__SWIG_1(swigCPtr, PByteArray.getCPtr(sourceArray), sourcePosition, numBytes), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult WriteBytes(PByteArray sourceArray, int sourcePosition) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_WriteBytes__SWIG_2(swigCPtr, PByteArray.getCPtr(sourceArray), sourcePosition), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ReadClassIdAndCheck(PByteStream arg0, ushort expectedClassId) {
    PResult ret = new PResult(PapillonPINVOKE.PByteStream_ReadClassIdAndCheck(PByteStream.getCPtr(arg0), expectedClassId), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
