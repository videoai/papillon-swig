//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDate : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PDate(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PDate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PDate() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PDate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PDate() : this(PapillonPINVOKE.new_PDate__SWIG_0(), true) {
  }

  public PDate(PDate other) : this(PapillonPINVOKE.new_PDate__SWIG_1(PDate.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDate(int y, int m, int d) : this(PapillonPINVOKE.new_PDate__SWIG_2(y, m, d), true) {
  }

  public PDate(string ISOdate) : this(PapillonPINVOKE.new_PDate__SWIG_3(ISOdate), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PDate Current() {
    PDate ret = new PDate(PapillonPINVOKE.PDate_Current(), true);
    return ret;
  }

  public int GetDay() {
    int ret = PapillonPINVOKE.PDate_GetDay(swigCPtr);
    return ret;
  }

  public int GetMonth() {
    int ret = PapillonPINVOKE.PDate_GetMonth(swigCPtr);
    return ret;
  }

  public int GetYear() {
    int ret = PapillonPINVOKE.PDate_GetYear(swigCPtr);
    return ret;
  }

  public void GetDate(ref int year, ref int month, ref int day) {
    PapillonPINVOKE.PDate_GetDate(swigCPtr, ref year, ref month, ref day);
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PDate_IsValid(swigCPtr);
    return ret;
  }

  public PDate AddDays(int ndays) {
    PDate ret = new PDate(PapillonPINVOKE.PDate_AddDays(swigCPtr, ndays), true);
    return ret;
  }

  public PDate AddMonths(int nmonths) {
    PDate ret = new PDate(PapillonPINVOKE.PDate_AddMonths(swigCPtr, nmonths), true);
    return ret;
  }

  public PDate AddYears(int nyears) {
    PDate ret = new PDate(PapillonPINVOKE.PDate_AddYears(swigCPtr, nyears), true);
    return ret;
  }

  public int GetDaysTo(PDate d) {
    int ret = PapillonPINVOKE.PDate_GetDaysTo(swigCPtr, PDate.getCPtr(d));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Compare(PDate other) {
    int ret = PapillonPINVOKE.PDate_Compare(swigCPtr, PDate.getCPtr(other));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToString(string format) {
    string ret = PapillonPINVOKE.PDate_ToString__SWIG_0(swigCPtr, format);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new string ToString() {
    string ret = PapillonPINVOKE.PDate_ToString__SWIG_1(swigCPtr);
    return ret;
  }

  public string ToStringISO() {
    string ret = PapillonPINVOKE.PDate_ToStringISO(swigCPtr);
    return ret;
  }

}
