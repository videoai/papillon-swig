//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDateTime : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PDateTime(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PDateTime_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDateTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PDateTime() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PDateTime(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PDateTime Bad() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_Bad(), false);
    return ret;
  }

  public PDateTime() : this(PapillonPINVOKE.new_PDateTime__SWIG_0(), true) {
  }

  public PDateTime(PDate date, PTime time, PDateTime.EDateTimeZone timeZone) : this(PapillonPINVOKE.new_PDateTime__SWIG_1(PDate.getCPtr(date), PTime.getCPtr(time), (int)timeZone), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime(PDate date, PTime time) : this(PapillonPINVOKE.new_PDateTime__SWIG_2(PDate.getCPtr(date), PTime.getCPtr(time)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime(PDateTime other) : this(PapillonPINVOKE.new_PDateTime__SWIG_3(PDateTime.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime(string ISOdateTime) : this(PapillonPINVOKE.new_PDateTime__SWIG_4(ISOdateTime), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime ToLocalTime() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_ToLocalTime(swigCPtr), true);
    return ret;
  }

  public PDateTime ToUTC() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_ToUTC(swigCPtr), true);
    return ret;
  }

  public static PDateTime Current() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_Current(), true);
    return ret;
  }

  public static PDateTime CurrentUTC() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_CurrentUTC(), true);
    return ret;
  }

  public PDate GetDate() {
    PDate ret = new PDate(PapillonPINVOKE.PDateTime_GetDate(swigCPtr), true);
    return ret;
  }

  public PTime GetTime() {
    PTime ret = new PTime(PapillonPINVOKE.PDateTime_GetTime(swigCPtr), true);
    return ret;
  }

  public int GetOffsetFromUTCInSeconds() {
    int ret = PapillonPINVOKE.PDateTime_GetOffsetFromUTCInSeconds(swigCPtr);
    return ret;
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PDateTime_IsValid(swigCPtr);
    return ret;
  }

  public PDateTime AddMillisecond(long n) {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_AddMillisecond(swigCPtr, n), true);
    return ret;
  }

  public long GetMillisecondsTo(PDateTime d) {
    long ret = PapillonPINVOKE.PDateTime_GetMillisecondsTo(swigCPtr, PDateTime.getCPtr(d));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PDateTime FromMillisecondsSinceEpoch(long n) {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PDateTime_FromMillisecondsSinceEpoch(n), true);
    return ret;
  }

  public long ToMillisecondsSinceEpoch() {
    long ret = PapillonPINVOKE.PDateTime_ToMillisecondsSinceEpoch(swigCPtr);
    return ret;
  }

  public int Compare(PDateTime other) {
    int ret = PapillonPINVOKE.PDateTime_Compare(swigCPtr, PDateTime.getCPtr(other));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToString(string format) {
    string ret = PapillonPINVOKE.PDateTime_ToString__SWIG_0(swigCPtr, format);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new string ToString() {
    string ret = PapillonPINVOKE.PDateTime_ToString__SWIG_1(swigCPtr);
    return ret;
  }

  public string ToStringISO() {
    string ret = PapillonPINVOKE.PDateTime_ToStringISO(swigCPtr);
    return ret;
  }

  public string ToStringISOWithMs() {
    string ret = PapillonPINVOKE.PDateTime_ToStringISOWithMs(swigCPtr);
    return ret;
  }

  public enum EDateTimeZone {
    E_LOCALTIME,
    E_UTC
  }

}
