//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDetection : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PDetection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PDetection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDetection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PDetection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PDetection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PDetection Bad() {
    PDetection ret = new PDetection(PapillonPINVOKE.PDetection_Bad(), false);
    return ret;
  }

  public PDetection() : this(PapillonPINVOKE.new_PDetection__SWIG_0(), true) {
  }

  public PDetection(PObjectType objectType, PGuid detectorId, PFrame frame, PFeatureMap featureMap, float reliability) : this(PapillonPINVOKE.new_PDetection__SWIG_1(PObjectType.getCPtr(objectType), PGuid.getCPtr(detectorId), PFrame.getCPtr(frame), PFeatureMap.getCPtr(featureMap), reliability), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDetection(PGuid objectId, PGuid detectorId, PFrame frame, PObjectType objectType, PTrack track, PFeatureMap featureMap, float confidence) : this(PapillonPINVOKE.new_PDetection__SWIG_2(PGuid.getCPtr(objectId), PGuid.getCPtr(detectorId), PFrame.getCPtr(frame), PObjectType.getCPtr(objectType), PTrack.getCPtr(track), PFeatureMap.getCPtr(featureMap), confidence), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDetection(PDetection other) : this(PapillonPINVOKE.new_PDetection__SWIG_3(PDetection.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PDetection_IsValid(swigCPtr);
    return ret;
  }

  public PObjectType GetObjectType() {
    PObjectType ret = new PObjectType(PapillonPINVOKE.PDetection_GetObjectType(swigCPtr), true);
    return ret;
  }

  public PGuid GetObjectId() {
    PGuid ret = new PGuid(PapillonPINVOKE.PDetection_GetObjectId(swigCPtr), true);
    return ret;
  }

  public PGuid GetDetectorId() {
    PGuid ret = new PGuid(PapillonPINVOKE.PDetection_GetDetectorId(swigCPtr), true);
    return ret;
  }

  public PTrack GetTrack() {
    PTrack ret = new PTrack(PapillonPINVOKE.PDetection_GetTrack(swigCPtr), false);
    return ret;
  }

  public PTrack GetTrackShared() {
    PTrack ret = new PTrack(PapillonPINVOKE.PDetection_GetTrackShared(swigCPtr), true);
    return ret;
  }

  public PFrame GetFrame() {
    PFrame ret = new PFrame(PapillonPINVOKE.PDetection_GetFrame(swigCPtr), false);
    return ret;
  }

  public PFeatureMap GetFeatureMap() {
    PFeatureMap ret = new PFeatureMap(PapillonPINVOKE.PDetection_GetFeatureMap(swigCPtr), false);
    return ret;
  }

  public PFeatureMap GetFeatureMapShared() {
    PFeatureMap ret = new PFeatureMap(PapillonPINVOKE.PDetection_GetFeatureMapShared(swigCPtr), true);
    return ret;
  }

  public PList GetFeaturePoints() {
    PList ret = new PList(PapillonPINVOKE.PDetection_GetFeaturePoints(swigCPtr), true);
    return ret;
  }

  public PList GetFeatureRectangles() {
    PList ret = new PList(PapillonPINVOKE.PDetection_GetFeatureRectangles(swigCPtr), true);
    return ret;
  }

  public PFeatureRectangle GetFaceRectangle() {
    PFeatureRectangle ret = new PFeatureRectangle(PapillonPINVOKE.PDetection_GetFaceRectangle(swigCPtr), true);
    return ret;
  }

  public float GetInterocularDistance() {
    float ret = PapillonPINVOKE.PDetection_GetInterocularDistance(swigCPtr);
    return ret;
  }

  public float GetConfidence() {
    float ret = PapillonPINVOKE.PDetection_GetConfidence(swigCPtr);
    return ret;
  }

  public PPoint2Df GetOrigin() {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PDetection_GetOrigin(swigCPtr), false);
    return ret;
  }

  public PProperties GetPropertiesShared() {
    PProperties ret = new PProperties(PapillonPINVOKE.PDetection_GetPropertiesShared(swigCPtr), true);
    return ret;
  }

  public PProperties GetProperties() {
    PProperties ret = new PProperties(PapillonPINVOKE.PDetection_GetProperties(swigCPtr), false);
    return ret;
  }

  public void SetInvalid() {
    PapillonPINVOKE.PDetection_SetInvalid(swigCPtr);
  }

  public void SetObjectType(PObjectType objectType) {
    PapillonPINVOKE.PDetection_SetObjectType(swigCPtr, PObjectType.getCPtr(objectType));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDetectorId(PGuid detectorId) {
    PapillonPINVOKE.PDetection_SetDetectorId(swigCPtr, PGuid.getCPtr(detectorId));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFrame(PFrame frame) {
    PapillonPINVOKE.PDetection_SetFrame(swigCPtr, PFrame.getCPtr(frame));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFeatureMap(PFeatureMap featureMap) {
    PapillonPINVOKE.PDetection_SetFeatureMap(swigCPtr, PFeatureMap.getCPtr(featureMap));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetConfidence(float reliability) {
    PapillonPINVOKE.PDetection_SetConfidence(swigCPtr, reliability);
  }

  public void SetOrigin(PPoint2Df origin) {
    PapillonPINVOKE.PDetection_SetOrigin(swigCPtr, PPoint2Df.getCPtr(origin));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrack(PTrack track) {
    PapillonPINVOKE.PDetection_SetTrack(swigCPtr, PTrack.getCPtr(track));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Translate(float x, float y) {
    PapillonPINVOKE.PDetection_Translate(swigCPtr, x, y);
  }

}
