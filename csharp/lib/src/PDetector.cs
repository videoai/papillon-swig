//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDetector : PPluginInstance {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PDetector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PDetector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDetector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PDetector() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PDetector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PString C_PARAM_FLOAT_THRESHOLD {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_FLOAT_THRESHOLD_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PARAM_RECTI_REGION_OF_INTEREST {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_RECTI_REGION_OF_INTEREST_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PARAM_SIZEI_MIN_DETECTION_SIZE {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_SIZEI_MIN_DETECTION_SIZE_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PARAM_SIZEI_MAX_DETECTION_SIZE {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_SIZEI_MAX_DETECTION_SIZE_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PARAM_INT32_MAX_DETECTIONS {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_INT32_MAX_DETECTIONS_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PARAM_BOOL_LOCALISER {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PDetector_C_PARAM_BOOL_LOCALISER_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PResult Create(string productName, PProperties parameters, PDetector detector) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_Create__SWIG_0(productName, PProperties.getCPtr(parameters), PDetector.getCPtr(detector)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult Create(SWIGTYPE_p_papillon__PPlugin plugin, PProperties parameters, PDetector detector) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_Create__SWIG_1(SWIGTYPE_p_papillon__PPlugin.getCPtr(plugin), PProperties.getCPtr(parameters), PDetector.getCPtr(detector)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PDetector() : this(PapillonPINVOKE.new_PDetector__SWIG_0(), true) {
  }

  public PDetector(PDetector other) : this(PapillonPINVOKE.new_PDetector__SWIG_1(PDetector.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PResult Detect(PFrame frame, PDetectionList detectionList) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_Detect(swigCPtr, PFrame.getCPtr(frame), PDetectionList.getCPtr(detectionList)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult SetThreshold(float threshold) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetThreshold(swigCPtr, threshold), true);
    return ret;
  }

  public float GetThreshold() {
    float ret = PapillonPINVOKE.PDetector_GetThreshold(swigCPtr);
    return ret;
  }

  public PResult SetRegionOfInterest(PRectanglei roi) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetRegionOfInterest(swigCPtr, PRectanglei.getCPtr(roi)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PRectanglei GetRegionOfInterest() {
    PRectanglei ret = new PRectanglei(PapillonPINVOKE.PDetector_GetRegionOfInterest(swigCPtr), true);
    return ret;
  }

  public PResult SetMinDetectionSize(int minDetectionSize) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetMinDetectionSize__SWIG_0(swigCPtr, minDetectionSize), true);
    return ret;
  }

  public PResult SetMinDetectionSize(PSizei minDetectionSize) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetMinDetectionSize__SWIG_1(swigCPtr, PSizei.getCPtr(minDetectionSize)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PSizei GetMinDetectionSize() {
    PSizei ret = new PSizei(PapillonPINVOKE.PDetector_GetMinDetectionSize(swigCPtr), true);
    return ret;
  }

  public PResult SetMaxDetectionSize(int maxDetectionSize) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetMaxDetectionSize__SWIG_0(swigCPtr, maxDetectionSize), true);
    return ret;
  }

  public PResult SetMaxDetectionSize(PSizei maxDetectionSize) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetMaxDetectionSize__SWIG_1(swigCPtr, PSizei.getCPtr(maxDetectionSize)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PSizei GetMaxDetectionSize() {
    PSizei ret = new PSizei(PapillonPINVOKE.PDetector_GetMaxDetectionSize(swigCPtr), true);
    return ret;
  }

  public PResult SetMaxDetections(int maxDetections) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_SetMaxDetections(swigCPtr, maxDetections), true);
    return ret;
  }

  public int GetMaxDetections() {
    int ret = PapillonPINVOKE.PDetector_GetMaxDetections(swigCPtr);
    return ret;
  }

  public PResult EnableLocaliser(bool enabled) {
    PResult ret = new PResult(PapillonPINVOKE.PDetector_EnableLocaliser(swigCPtr, enabled), true);
    return ret;
  }

  public bool IsLocaliserEnabled() {
    bool ret = PapillonPINVOKE.PDetector_IsLocaliserEnabled(swigCPtr);
    return ret;
  }

}
