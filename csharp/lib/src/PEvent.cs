//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PEvent : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PEvent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PEvent() : this(PapillonPINVOKE.new_PEvent__SWIG_0(), true) {
  }

  public static PEventBuilder Create(string type, string annotation, PGuid sourceId) {
    PEventBuilder ret = new PEventBuilder(PapillonPINVOKE.PEvent_Create__SWIG_0(type, annotation, PGuid.getCPtr(sourceId)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PEventBuilder Create(string type, string annotation) {
    PEventBuilder ret = new PEventBuilder(PapillonPINVOKE.PEvent_Create__SWIG_1(type, annotation), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PEventBuilder Create(string type) {
    PEventBuilder ret = new PEventBuilder(PapillonPINVOKE.PEvent_Create__SWIG_2(type), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PEvent(PEvent other) : this(PapillonPINVOKE.new_PEvent__SWIG_1(PEvent.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetType(string eventType) {
    PapillonPINVOKE.PEvent_SetType(swigCPtr, eventType);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetType() {
    string ret = PapillonPINVOKE.PEvent_GetType(swigCPtr);
    return ret;
  }

  public void SetComposition(bool eventComposition) {
    PapillonPINVOKE.PEvent_SetComposition(swigCPtr, eventComposition);
  }

  public bool GetComposition() {
    bool ret = PapillonPINVOKE.PEvent_GetComposition(swigCPtr);
    return ret;
  }

  public void SetTimeGranularity(PEvent.EEventTimeGranularity eventGranularity) {
    PapillonPINVOKE.PEvent_SetTimeGranularity(swigCPtr, (int)eventGranularity);
  }

  public PEvent.EEventTimeGranularity GetTimeGranularity() {
    PEvent.EEventTimeGranularity ret = (PEvent.EEventTimeGranularity)PapillonPINVOKE.PEvent_GetTimeGranularity(swigCPtr);
    return ret;
  }

  public void SetOccurrenceTime(PDateTime occurrenceTime) {
    PapillonPINVOKE.PEvent_SetOccurrenceTime(swigCPtr, PDateTime.getCPtr(occurrenceTime));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime GetOccurrenceTime() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PEvent_GetOccurrenceTime(swigCPtr), false);
    return ret;
  }

  public void SetCertainty(double eventCertainty) {
    PapillonPINVOKE.PEvent_SetCertainty(swigCPtr, eventCertainty);
  }

  public double GetCertainty() {
    double ret = PapillonPINVOKE.PEvent_GetCertainty(swigCPtr);
    return ret;
  }

  public void SetAnnotation(string eventAnnotation) {
    PapillonPINVOKE.PEvent_SetAnnotation(swigCPtr, eventAnnotation);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetAnnotation() {
    string ret = PapillonPINVOKE.PEvent_GetAnnotation(swigCPtr);
    return ret;
  }

  public void SetEventId(PGuid eventId) {
    PapillonPINVOKE.PEvent_SetEventId(swigCPtr, PGuid.getCPtr(eventId));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PGuid GetEventId() {
    PGuid ret = new PGuid(PapillonPINVOKE.PEvent_GetEventId(swigCPtr), false);
    return ret;
  }

  public void SetDetectionTime(PDateTime detectionTime) {
    PapillonPINVOKE.PEvent_SetDetectionTime(swigCPtr, PDateTime.getCPtr(detectionTime));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDateTime GetDetectionTime() {
    PDateTime ret = new PDateTime(PapillonPINVOKE.PEvent_GetDetectionTime(swigCPtr), false);
    return ret;
  }

  public void SetSource(PGuid sourceId) {
    PapillonPINVOKE.PEvent_SetSource(swigCPtr, PGuid.getCPtr(sourceId));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PGuid GetSource() {
    PGuid ret = new PGuid(PapillonPINVOKE.PEvent_GetSource(swigCPtr), false);
    return ret;
  }

  public PProperties SetPayload() {
    PProperties ret = new PProperties(PapillonPINVOKE.PEvent_SetPayload(swigCPtr), false);
    return ret;
  }

  public PProperties GetPayload() {
    PProperties ret = new PProperties(PapillonPINVOKE.PEvent_GetPayload(swigCPtr), false);
    return ret;
  }

  public enum EEventTimeGranularity {
    E_MILLISECONDS,
    E_SECONDS,
    E_MINUTES,
    E_HOURS,
    E_DAYS,
    E_UNDEFINED
  }

}
