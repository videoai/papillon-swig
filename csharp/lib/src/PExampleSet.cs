//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PExampleSet : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PExampleSet(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PExampleSet_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PExampleSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PExampleSet() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PExampleSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PExampleSet() : this(PapillonPINVOKE.new_PExampleSet__SWIG_0(), true) {
  }

  public PExampleSet(string name, PObjectType objectType, PGuid identityId) : this(PapillonPINVOKE.new_PExampleSet__SWIG_1(name, PObjectType.getCPtr(objectType), PGuid.getCPtr(identityId)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PExampleSet(PExampleSet other) : this(PapillonPINVOKE.new_PExampleSet__SWIG_2(PExampleSet.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    PapillonPINVOKE.PExampleSet_Clear(swigCPtr);
  }

  public bool IsEmpty() {
    bool ret = PapillonPINVOKE.PExampleSet_IsEmpty(swigCPtr);
    return ret;
  }

  public void SetMaxSize(int maxSize) {
    PapillonPINVOKE.PExampleSet_SetMaxSize(swigCPtr, maxSize);
  }

  public int Size() {
    int ret = PapillonPINVOKE.PExampleSet_Size(swigCPtr);
    return ret;
  }

  public void Add(PDetection d) {
    PapillonPINVOKE.PExampleSet_Add__SWIG_0(swigCPtr, PDetection.getCPtr(d));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(PDetectionList d) {
    PapillonPINVOKE.PExampleSet_Add__SWIG_1(swigCPtr, PDetectionList.getCPtr(d));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PDetection Get(int n) {
    PDetection ret = new PDetection(PapillonPINVOKE.PExampleSet_Get(swigCPtr, n), false);
    return ret;
  }

  public void SetName(string name) {
    PapillonPINVOKE.PExampleSet_SetName(swigCPtr, name);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetName() {
    string ret = PapillonPINVOKE.PExampleSet_GetName(swigCPtr);
    return ret;
  }

  public void SetIdentityId(PGuid objectId) {
    PapillonPINVOKE.PExampleSet_SetIdentityId(swigCPtr, PGuid.getCPtr(objectId));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PGuid GetIdentityId() {
    PGuid ret = new PGuid(PapillonPINVOKE.PExampleSet_GetIdentityId(swigCPtr), false);
    return ret;
  }

  public PObjectType GetObjectType() {
    PObjectType ret = new PObjectType(PapillonPINVOKE.PExampleSet_GetObjectType(swigCPtr), false);
    return ret;
  }

  public void SetObjectType(PObjectType objectType) {
    PapillonPINVOKE.PExampleSet_SetObjectType(swigCPtr, PObjectType.getCPtr(objectType));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

}
