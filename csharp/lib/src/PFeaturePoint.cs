//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PFeaturePoint : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PFeaturePoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PFeaturePoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PFeaturePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PFeaturePoint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PFeaturePoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PFeaturePoint Bad() {
    PFeaturePoint ret = new PFeaturePoint(PapillonPINVOKE.PFeaturePoint_Bad(), false);
    return ret;
  }

  public PFeaturePoint() : this(PapillonPINVOKE.new_PFeaturePoint__SWIG_0(), true) {
  }

  public PFeaturePoint(PFeaturePoint other) : this(PapillonPINVOKE.new_PFeaturePoint__SWIG_1(PFeaturePoint.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PFeaturePoint(PPoint2Df location, string description, float confidence) : this(PapillonPINVOKE.new_PFeaturePoint__SWIG_2(PPoint2Df.getCPtr(location), description, confidence), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PFeaturePoint_IsValid(swigCPtr);
    return ret;
  }

  public PPoint2Df GetLocation() {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PFeaturePoint_GetLocation(swigCPtr), false);
    return ret;
  }

  public float GetColumn() {
    float ret = PapillonPINVOKE.PFeaturePoint_GetColumn(swigCPtr);
    return ret;
  }

  public float GetX() {
    float ret = PapillonPINVOKE.PFeaturePoint_GetX(swigCPtr);
    return ret;
  }

  public float GetRow() {
    float ret = PapillonPINVOKE.PFeaturePoint_GetRow(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = PapillonPINVOKE.PFeaturePoint_GetY(swigCPtr);
    return ret;
  }

  public string GetDescription() {
    string ret = PapillonPINVOKE.PFeaturePoint_GetDescription(swigCPtr);
    return ret;
  }

  public float GetConfidence() {
    float ret = PapillonPINVOKE.PFeaturePoint_GetConfidence(swigCPtr);
    return ret;
  }

  public static PStringList FeaturePoints() {
    PStringList ret = new PStringList(PapillonPINVOKE.PFeaturePoint_FeaturePoints(), false);
    return ret;
  }

  public static void Initialise() {
    PapillonPINVOKE.PFeaturePoint_Initialise();
  }

  public static void Finalise() {
    PapillonPINVOKE.PFeaturePoint_Finalise();
  }

}
