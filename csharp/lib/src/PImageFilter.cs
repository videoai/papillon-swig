//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PImageFilter : PPluginInstance {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PImageFilter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PImageFilter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PImageFilter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PImageFilter() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PImageFilter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PResult Create(string productName, PProperties parameters, PImageFilter imageFilter) {
    PResult ret = new PResult(PapillonPINVOKE.PImageFilter_Create__SWIG_0(productName, PProperties.getCPtr(parameters), PImageFilter.getCPtr(imageFilter)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult Create(SWIGTYPE_p_papillon__PPlugin plugin, PProperties parameters, PImageFilter imageFilter) {
    PResult ret = new PResult(PapillonPINVOKE.PImageFilter_Create__SWIG_1(SWIGTYPE_p_papillon__PPlugin.getCPtr(plugin), PProperties.getCPtr(parameters), PImageFilter.getCPtr(imageFilter)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PImageFilter() : this(PapillonPINVOKE.new_PImageFilter__SWIG_0(), true) {
  }

  public PImageFilter(PImageFilter other) : this(PapillonPINVOKE.new_PImageFilter__SWIG_1(PImageFilter.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PResult Apply(PImage source, PImage destination) {
    PResult ret = new PResult(PapillonPINVOKE.PImageFilter_Apply__SWIG_0(swigCPtr, PImage.getCPtr(source), PImage.getCPtr(destination)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Apply(PFrame frame) {
    PResult ret = new PResult(PapillonPINVOKE.PImageFilter_Apply__SWIG_1(swigCPtr, PFrame.getCPtr(frame)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
