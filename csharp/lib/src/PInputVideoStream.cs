//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PInputVideoStream : PPluginInstance {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PInputVideoStream(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PInputVideoStream_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PInputVideoStream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PInputVideoStream() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PInputVideoStream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PString C_PROPERTY_INT32_STREAM_WIDTH {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_INT32_STREAM_WIDTH_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PROPERTY_INT32_STREAM_HEIGHT {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_INT32_STREAM_HEIGHT_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PROPERTY_DOUBLE_STREAM_FPS {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_DOUBLE_STREAM_FPS_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PROPERTY_INT32_GO_TO_FRAME {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_INT32_GO_TO_FRAME_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PROPERTY_INT32_FRAME_COUNT {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_INT32_FRAME_COUNT_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PString C_PROPERTY_INT32_FRAME_NUMBER {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PInputVideoStream_C_PROPERTY_INT32_FRAME_NUMBER_get();
      PString ret = (cPtr == global::System.IntPtr.Zero) ? null : new PString(cPtr, false);
      return ret;
    } 
  }

  public static PResult Open(string uri, PInputVideoStream inputVideoStream) {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_Open__SWIG_0(uri, PInputVideoStream.getCPtr(inputVideoStream)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult Open(SWIGTYPE_p_papillon__PPlugin plugin, PUri uri, PInputVideoStream inputVideoStream) {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_Open__SWIG_1(SWIGTYPE_p_papillon__PPlugin.getCPtr(plugin), PUri.getCPtr(uri), PInputVideoStream.getCPtr(inputVideoStream)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PInputVideoStream() : this(PapillonPINVOKE.new_PInputVideoStream__SWIG_0(), true) {
  }

  public PInputVideoStream(PInputVideoStream other) : this(PapillonPINVOKE.new_PInputVideoStream__SWIG_1(PInputVideoStream.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEmpty() {
    bool ret = PapillonPINVOKE.PInputVideoStream_IsEmpty(swigCPtr);
    return ret;
  }

  public bool IsOpened() {
    bool ret = PapillonPINVOKE.PInputVideoStream_IsOpened(swigCPtr);
    return ret;
  }

  public PUri GetUri() {
    PUri ret = new PUri(PapillonPINVOKE.PInputVideoStream_GetUri(swigCPtr), true);
    return ret;
  }

  public PResult OpenVideoStream() {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_OpenVideoStream(swigCPtr), true);
    return ret;
  }

  public PResult Close() {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_Close(swigCPtr), true);
    return ret;
  }

  public PResult GetFrame(PFrame frame, int timeOutMs) {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_GetFrame__SWIG_0(swigCPtr, PFrame.getCPtr(frame), timeOutMs), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult GetFrame(PFrame frame) {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_GetFrame__SWIG_1(swigCPtr, PFrame.getCPtr(frame)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCheckPeriod(int timeMs) {
    PapillonPINVOKE.PInputVideoStream_SetCheckPeriod(swigCPtr, timeMs);
  }

  public bool IsFrozen() {
    bool ret = PapillonPINVOKE.PInputVideoStream_IsFrozen(swigCPtr);
    return ret;
  }

  public bool CanSeek() {
    bool ret = PapillonPINVOKE.PInputVideoStream_CanSeek(swigCPtr);
    return ret;
  }

  public PResult GoToFrame(int frameNumber) {
    PResult ret = new PResult(PapillonPINVOKE.PInputVideoStream_GoToFrame(swigCPtr, frameNumber), true);
    return ret;
  }

  public PSizei GetResolution() {
    PSizei ret = new PSizei(PapillonPINVOKE.PInputVideoStream_GetResolution(swigCPtr), true);
    return ret;
  }

  public double GetFrameratePerSecond() {
    double ret = PapillonPINVOKE.PInputVideoStream_GetFrameratePerSecond(swigCPtr);
    return ret;
  }

  public int GetCurrentFrameNumber() {
    int ret = PapillonPINVOKE.PInputVideoStream_GetCurrentFrameNumber(swigCPtr);
    return ret;
  }

  public int GetNumberOfFrames() {
    int ret = PapillonPINVOKE.PInputVideoStream_GetNumberOfFrames(swigCPtr);
    return ret;
  }

}
