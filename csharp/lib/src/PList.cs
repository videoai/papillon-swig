//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PList : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PList(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PList_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PList() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PList() : this(PapillonPINVOKE.new_PList__SWIG_0(), true) {
  }

  public PList(PList other) : this(PapillonPINVOKE.new_PList__SWIG_1(PList.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PList Clone() {
    PList ret = new PList(PapillonPINVOKE.PList_Clone(swigCPtr), true);
    return ret;
  }

  public void Clear() {
    PapillonPINVOKE.PList_Clear(swigCPtr);
  }

  public bool IsEmpty() {
    bool ret = PapillonPINVOKE.PList_IsEmpty(swigCPtr);
    return ret;
  }

  public int Size() {
    int ret = PapillonPINVOKE.PList_Size(swigCPtr);
    return ret;
  }

  public PResult Get(int index, PObject element) {
    PResult ret = new PResult(PapillonPINVOKE.PList_Get(swigCPtr, index, PObject.getCPtr(element)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Set(int index, PObject element) {
    PResult ret = new PResult(PapillonPINVOKE.PList_Set(swigCPtr, index, PObject.getCPtr(element)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PList Add(PObject element) {
    PList ret = new PList(PapillonPINVOKE.PList_Add(swigCPtr, PObject.getCPtr(element)), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PList AddFirst(PObject element) {
    PList ret = new PList(PapillonPINVOKE.PList_AddFirst(swigCPtr, PObject.getCPtr(element)), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PList Append(PList list) {
    PList ret = new PList(PapillonPINVOKE.PList_Append(swigCPtr, PList.getCPtr(list)), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Remove(int index) {
    PResult ret = new PResult(PapillonPINVOKE.PList_Remove(swigCPtr, index), true);
    return ret;
  }

  public PResult RemoveLast() {
    PResult ret = new PResult(PapillonPINVOKE.PList_RemoveLast(swigCPtr), true);
    return ret;
  }

  public PResult RemoveFirst() {
    PResult ret = new PResult(PapillonPINVOKE.PList_RemoveFirst(swigCPtr), true);
    return ret;
  }

}
