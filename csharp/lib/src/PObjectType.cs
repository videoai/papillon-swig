//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PObjectType : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PObjectType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PObjectType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PObjectType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PObjectType() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PObjectType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PObjectType() : this(PapillonPINVOKE.new_PObjectType__SWIG_0(), true) {
  }

  public static PObjectType FromString(string objectType) {
    PObjectType ret = new PObjectType(PapillonPINVOKE.PObjectType_FromString(objectType), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PObjectType(PObjectType other) : this(PapillonPINVOKE.new_PObjectType__SWIG_1(PObjectType.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PObjectType.EObjectType GetType() {
    PObjectType.EObjectType ret = (PObjectType.EObjectType)PapillonPINVOKE.PObjectType_GetType(swigCPtr);
    return ret;
  }

  public bool IsUnknown() {
    bool ret = PapillonPINVOKE.PObjectType_IsUnknown(swigCPtr);
    return ret;
  }

  public bool IsFace() {
    bool ret = PapillonPINVOKE.PObjectType_IsFace(swigCPtr);
    return ret;
  }

  public bool IsPerson() {
    bool ret = PapillonPINVOKE.PObjectType_IsPerson(swigCPtr);
    return ret;
  }

  public bool IsMotion() {
    bool ret = PapillonPINVOKE.PObjectType_IsMotion(swigCPtr);
    return ret;
  }

  public bool IsFaceMetaData() {
    bool ret = PapillonPINVOKE.PObjectType_IsFaceMetaData(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = PapillonPINVOKE.PObjectType_GetName(swigCPtr);
    return ret;
  }

  public static PObjectType C_UNKNOWN {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_UNKNOWN_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public static PObjectType C_FACE {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_FACE_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public static PObjectType C_FACE_META_DATA {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_FACE_META_DATA_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public static PObjectType C_PERSON {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_PERSON_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public static PObjectType C_MOTION {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_MOTION_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public static PObjectType C_OTHER {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PObjectType_C_OTHER_get();
      PObjectType ret = (cPtr == global::System.IntPtr.Zero) ? null : new PObjectType(cPtr, false);
      return ret;
    } 
  }

  public enum EObjectType {
    E_UNKNOWN,
    E_FACE,
    E_PERSON,
    E_MOTION,
    E_OTHER,
    E_FACE_META_DATA
  }

}
