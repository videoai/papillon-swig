//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PPath : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PPath(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PPath obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PPath() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PPath(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static string Separator() {
    string ret = PapillonPINVOKE.PPath_Separator();
    return ret;
  }

  public static string TempPath() {
    string ret = PapillonPINVOKE.PPath_TempPath();
    return ret;
  }

  public static string CurrentPath() {
    string ret = PapillonPINVOKE.PPath_CurrentPath();
    return ret;
  }

  public static bool SetCurrentWorkingDirectory(string path) {
    bool ret = PapillonPINVOKE.PPath_SetCurrentWorkingDirectory(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAbsolutePath(string path) {
    string ret = PapillonPINVOKE.PPath_GetAbsolutePath(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetDirectory(string path) {
    string ret = PapillonPINVOKE.PPath_GetDirectory(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBaseName(string path) {
    string ret = PapillonPINVOKE.PPath_GetBaseName(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBaseNameWithoutEndDigits(string path) {
    string ret = PapillonPINVOKE.PPath_GetBaseNameWithoutEndDigits(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetExtension(string path) {
    string ret = PapillonPINVOKE.PPath_GetExtension(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Clean(string dirPath, bool forceWinToLinux) {
    string ret = PapillonPINVOKE.PPath_Clean__SWIG_0(dirPath, forceWinToLinux);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Clean(string dirPath) {
    string ret = PapillonPINVOKE.PPath_Clean__SWIG_1(dirPath);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ChangeRootDir(PString path, string oldRoot, string newRoot, bool forceWinToLinux) {
    PResult ret = new PResult(PapillonPINVOKE.PPath_ChangeRootDir__SWIG_0(PString.getCPtr(path), oldRoot, newRoot, forceWinToLinux), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ChangeRootDir(PString path, string oldRoot, string newRoot) {
    PResult ret = new PResult(PapillonPINVOKE.PPath_ChangeRootDir__SWIG_1(PString.getCPtr(path), oldRoot, newRoot), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MakePath(string dirPath) {
    bool ret = PapillonPINVOKE.PPath_MakePath(dirPath);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RemoveNonEmptyDirectory(string dirPath) {
    bool ret = PapillonPINVOKE.PPath_RemoveNonEmptyDirectory(dirPath);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsPathExist(string path) {
    bool ret = PapillonPINVOKE.PPath_IsPathExist(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsDirectory(string path) {
    bool ret = PapillonPINVOKE.PPath_IsDirectory(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsFile(string path) {
    bool ret = PapillonPINVOKE.PPath_IsFile(path);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PStringList ListEntries(string path, bool widthAbsolutePath, bool filesOnly) {
    PStringList ret = new PStringList(PapillonPINVOKE.PPath_ListEntries(path, widthAbsolutePath, filesOnly), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetApplicationName() {
    string ret = PapillonPINVOKE.PPath_GetApplicationName();
    return ret;
  }

  public static string GetApplicationDirectory() {
    string ret = PapillonPINVOKE.PPath_GetApplicationDirectory();
    return ret;
  }

  public static string Join(string path1, string path2) {
    string ret = PapillonPINVOKE.PPath_Join__SWIG_0(path1, path2);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Join(string path1, string path2, string path3) {
    string ret = PapillonPINVOKE.PPath_Join__SWIG_1(path1, path2, path3);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Join(string path1, string path2, string path3, string path4) {
    string ret = PapillonPINVOKE.PPath_Join__SWIG_2(path1, path2, path3, path4);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Join(string path1, string path2, string path3, string path4, string path5) {
    string ret = PapillonPINVOKE.PPath_Join__SWIG_3(path1, path2, path3, path4, path5);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Join(string path1, string path2, string path3, string path4, string path5, string path6) {
    string ret = PapillonPINVOKE.PPath_Join__SWIG_4(path1, path2, path3, path4, path5, path6);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string AddPathSeparatorIfMissing(string s) {
    string ret = PapillonPINVOKE.PPath_AddPathSeparatorIfMissing(s);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
