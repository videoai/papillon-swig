//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PPoint2Df : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PPoint2Df(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PPoint2Df_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PPoint2Df obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PPoint2Df() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PPoint2Df(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PPoint2Df Bad() {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Bad(), false);
    return ret;
  }

  public static PPoint2Df Zero() {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Zero(), false);
    return ret;
  }

  public PPoint2Df(float xx, float yy) : this(PapillonPINVOKE.new_PPoint2Df__SWIG_0(xx, yy), true) {
  }

  public PPoint2Df(float xx) : this(PapillonPINVOKE.new_PPoint2Df__SWIG_1(xx), true) {
  }

  public PPoint2Df() : this(PapillonPINVOKE.new_PPoint2Df__SWIG_2(), true) {
  }

  public PPoint2Df(double xx, double yy) : this(PapillonPINVOKE.new_PPoint2Df__SWIG_3(xx, yy), true) {
  }

  public PPoint2Df(int xx, int yy) : this(PapillonPINVOKE.new_PPoint2Df__SWIG_4(xx, yy), true) {
  }

  public PPoint2Df(PPoint2Df other) : this(PapillonPINVOKE.new_PPoint2Df__SWIG_5(PPoint2Df.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetX() {
    float ret = PapillonPINVOKE.PPoint2Df_GetX(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = PapillonPINVOKE.PPoint2Df_GetY(swigCPtr);
    return ret;
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PPoint2Df_IsValid(swigCPtr);
    return ret;
  }

  public bool IsBad() {
    bool ret = PapillonPINVOKE.PPoint2Df_IsBad(swigCPtr);
    return ret;
  }

  public PPoint2Df Translated(float vx, float vy) {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Translated__SWIG_0(swigCPtr, vx, vy), true);
    return ret;
  }

  public PPoint2Df Translated(PPoint2Df v) {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Translated__SWIG_1(swigCPtr, PPoint2Df.getCPtr(v)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PPoint2Df Scaled(float scaleBy) {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Scaled(swigCPtr, scaleBy), true);
    return ret;
  }

  public PPoint2Di ToPPoint2Di() {
    PPoint2Di ret = new PPoint2Di(PapillonPINVOKE.PPoint2Df_ToPPoint2Di(swigCPtr), true);
    return ret;
  }

  public float EuclideanDistance(PPoint2Df other) {
    float ret = PapillonPINVOKE.PPoint2Df_EuclideanDistance(swigCPtr, PPoint2Df.getCPtr(other));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PPoint2Df Middle(PPoint2Df A, PPoint2Df B) {
    PPoint2Df ret = new PPoint2Df(PapillonPINVOKE.PPoint2Df_Middle(PPoint2Df.getCPtr(A), PPoint2Df.getCPtr(B)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
