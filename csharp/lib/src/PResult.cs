//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static PResult C_OK {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_OK_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_FALSE {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_FALSE_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_UNKNOWN {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_UNKNOWN_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_NULL_OBJECT {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_NULL_OBJECT_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_NOT_YET_IMPLEMENTED {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_NOT_YET_IMPLEMENTED_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_NOT_SUPPORTED {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_NOT_SUPPORTED_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_NO_PRIVATE_IMPLEMENTATION {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_NO_PRIVATE_IMPLEMENTATION_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public static PResult C_ERROR_SERIALISATION_NOT_SUPPORTED {
    get {
      global::System.IntPtr cPtr = PapillonPINVOKE.PResult_C_ERROR_SERIALISATION_NOT_SUPPORTED_get();
      PResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PResult(cPtr, false);
      return ret;
    } 
  }

  public PResult() : this(PapillonPINVOKE.new_PResult__SWIG_0(), true) {
  }

  public PResult(PResult.EReturnCode code) : this(PapillonPINVOKE.new_PResult__SWIG_1((int)code), true) {
  }

  public PResult(PResult.EReturnCode code, string message) : this(PapillonPINVOKE.new_PResult__SWIG_2((int)code, message), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PResult(PResult other) : this(PapillonPINVOKE.new_PResult__SWIG_3(PResult.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PResult Error(string errorMessage) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Error(errorMessage), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorBadCast(ushort fromClassId, ushort toClassId) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorBadCast(fromClassId, toClassId), true);
    return ret;
  }

  public static PResult ErrorNullPointer(string errorMessage) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorNullPointer(errorMessage), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorSerialisation() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorSerialisation(), true);
    return ret;
  }

  public static PResult ErrorSerialization() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorSerialization(), true);
    return ret;
  }

  public static PResult ErrorSerialisationUnsupportedFormat(ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorSerialisationUnsupportedFormat((int)format), true);
    return ret;
  }

  public static PResult ErrorSerializationUnsupportedFormat(ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorSerializationUnsupportedFormat((int)format), true);
    return ret;
  }

  public static PResult ErrorDeserialisationReadFailed() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserialisationReadFailed(), true);
    return ret;
  }

  public static PResult ErrorDeserializationReadFailed() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserializationReadFailed(), true);
    return ret;
  }

  public static PResult ErrorDeserialisationBadClassId() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserialisationBadClassId(), true);
    return ret;
  }

  public static PResult ErrorDeserializationBadClassId() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserializationBadClassId(), true);
    return ret;
  }

  public static PResult ErrorDeserialisationUnsupportedFormat(ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserialisationUnsupportedFormat((int)format), true);
    return ret;
  }

  public static PResult ErrorDeserializationUnsupportedFormat(ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorDeserializationUnsupportedFormat((int)format), true);
    return ret;
  }

  public static PResult ErrorBadArgument(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorBadArgument(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorInvalidState(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorInvalidState(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorUnhandledCase(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorUnhandledCase(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorFileNotFound(string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorFileNotFound(filename), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorEndOfFile(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorEndOfFile(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorOpenFileForWriting(string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorOpenFileForWriting(filename), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorOpenFileForReading(string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorOpenFileForReading(filename), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorBadPluginParameters(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorBadPluginParameters(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorFailedToCheckOutLicense(string productame, string productVersion, string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorFailedToCheckOutLicense(productame, productVersion, message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorBadURIFormat(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorBadURIFormat(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorEndOfStream(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorEndOfStream(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorStreamNotFound(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorStreamNotFound(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorServerDown(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorServerDown(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorStreamNotAvailable(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorStreamNotAvailable(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorStreamClosed(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorStreamClosed(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorStreamInvalidated(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorStreamInvalidated(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorStreamKicked(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorStreamKicked(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult ErrorTimeout(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_ErrorTimeout(message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult.EReturnCode GetCode() {
    PResult.EReturnCode ret = (PResult.EReturnCode)PapillonPINVOKE.PResult_GetCode(swigCPtr);
    return ret;
  }

  public string GetErrorMessage() {
    string ret = PapillonPINVOKE.PResult_GetErrorMessage(swigCPtr);
    return ret;
  }

  public PResult Push(PResult result) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Push(swigCPtr, PResult.getCPtr(result)), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Pop() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Pop(swigCPtr), false);
    return ret;
  }

  public PResult PrependErrorMessage(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_PrependErrorMessage(swigCPtr, message), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Ok() {
    bool ret = PapillonPINVOKE.PResult_Ok(swigCPtr);
    return ret;
  }

  public bool Failed() {
    bool ret = PapillonPINVOKE.PResult_Failed(swigCPtr);
    return ret;
  }

  public bool IsFalse() {
    bool ret = PapillonPINVOKE.PResult_IsFalse(swigCPtr);
    return ret;
  }

  public PResult LogErrorIfAny(string prefix, int lineNumber, string filename) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny__SWIG_0(swigCPtr, prefix, lineNumber, filename), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny(string prefix, int lineNumber) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny__SWIG_1(swigCPtr, prefix, lineNumber), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny(string prefix) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny__SWIG_2(swigCPtr, prefix), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny() {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny__SWIG_3(swigCPtr), false);
    return ret;
  }

  public PResult LogErrorIfAny2(int lineNumber1, string filename1, string prefix, int lineNumber2, string filename2) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny2__SWIG_0(swigCPtr, lineNumber1, filename1, prefix, lineNumber2, filename2), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny2(int lineNumber1, string filename1, string prefix, int lineNumber2) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny2__SWIG_1(swigCPtr, lineNumber1, filename1, prefix, lineNumber2), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny2(int lineNumber1, string filename1, string prefix) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny2__SWIG_2(swigCPtr, lineNumber1, filename1, prefix), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult LogErrorIfAny2(int lineNumber1, string filename1) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_LogErrorIfAny2__SWIG_3(swigCPtr, lineNumber1, filename1), false);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void OrDie(string prefix, int lineNumber, string filename) {
    PapillonPINVOKE.PResult_OrDie__SWIG_0(swigCPtr, prefix, lineNumber, filename);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OrDie(string prefix, int lineNumber) {
    PapillonPINVOKE.PResult_OrDie__SWIG_1(swigCPtr, prefix, lineNumber);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OrDie(string prefix) {
    PapillonPINVOKE.PResult_OrDie__SWIG_2(swigCPtr, prefix);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OrDie() {
    PapillonPINVOKE.PResult_OrDie__SWIG_3(swigCPtr);
  }

  public int Size() {
    int ret = PapillonPINVOKE.PResult_Size(swigCPtr);
    return ret;
  }

  public PResult Write(PByteStream os, ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Write__SWIG_0(swigCPtr, PByteStream.getCPtr(os), (int)format), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Write(PByteStream os) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Write__SWIG_1(swigCPtr, PByteStream.getCPtr(os)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Read(PByteStream arg0, ESerialisationFormat format) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Read__SWIG_0(swigCPtr, PByteStream.getCPtr(arg0), (int)format), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Read(PByteStream arg0) {
    PResult ret = new PResult(PapillonPINVOKE.PResult_Read__SWIG_1(swigCPtr, PByteStream.getCPtr(arg0)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToString() {
    string ret = PapillonPINVOKE.PResult_ToString(swigCPtr);
    return ret;
  }

  public enum EReturnCode {
    E_OK = 0,
    E_ERROR_BAD_MEMORY_ALLOCATION = 1,
    E_FALSE,
    E_ERROR,
    E_ERROR_UNKNOWN,
    E_ERROR_BAD_CAST,
    E_ERROR_NOT_YET_IMPLEMENTED,
    E_ERROR_NOT_SUPPORTED,
    E_ERROR_NO_PRIVATE_IMPLEMENTATION,
    E_ERROR_NULL_POINTER,
    E_ERROR_SERIALISATION,
    E_ERROR_SERIALISATION_NOT_SUPPORTED,
    E_ERROR_SERIALISATION_UNSUPPORTED_FORMAT,
    E_ERROR_DESERIALISATION_READ_FAILED,
    E_ERROR_DESERIALISATION_BAD_CLASS_ID,
    E_ERROR_DESERIALISATION_UNSUPPORTED_VERSION,
    E_ERROR_DESERIALISATION_UNSUPPORTED_FORMAT,
    E_ERROR_BAD_ARGUMENT,
    E_ERROR_INVALID_STATE,
    E_ERROR_UNHANDLED_CASE,
    E_ERROR_FILE_NOT_FOUND,
    E_ERROR_END_OF_FILE,
    E_ERROR_OPEN_FILE_FOR_WRITING,
    E_ERROR_OPEN_FILE_FOR_READING,
    E_ERROR_BAD_PLUGIN_PARAMETER,
    E_ERROR_FAILED_TO_CHECKOUT_LICENSE,
    E_ERROR_BAD_URI_FORMAT,
    E_ERROR_END_OF_STREAM,
    E_ERROR_STREAM_NOT_FOUND,
    E_ERROR_SERVER_DOWN,
    E_ERROR_STREAM_NOT_AVAILABLE,
    E_ERROR_STREAM_CLOSED,
    E_ERROR_STREAM_INVALIDATED,
    E_ERROR_STREAM_KICKED,
    E_ERROR_TIMEOUT,
    E_ERROR_FAILED_TO_CHECK_LICENSE,
    E_ERROR_INVALID_LICENSE,
    E_ERROR_LICENSE_EXPIRED,
    E_ERROR_UNDEFINED = 0xFFFF
  }

}
