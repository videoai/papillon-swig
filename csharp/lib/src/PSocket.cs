//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PSocket : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PSocket(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PSocket_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSocket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PSocket() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PSocket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PSocket() : this(PapillonPINVOKE.new_PSocket__SWIG_0(), true) {
  }

  public static PResult Open(PSocket socket, PSocket.ESocketType socketType, PSocket.ESocketBinding binding, string endPoint) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Open__SWIG_0(PSocket.getCPtr(socket), (int)socketType, (int)binding, endPoint), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult Open(PSocket socket, PSocket.ESocketType socketType, PSocket.ESocketBinding binding) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Open__SWIG_1(PSocket.getCPtr(socket), (int)socketType, (int)binding), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PResult Open(PSocket socket, PSocket.ESocketType socketType) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Open__SWIG_2(PSocket.getCPtr(socket), (int)socketType), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PSocket(PSocket other) : this(PapillonPINVOKE.new_PSocket__SWIG_1(PSocket.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsOpened() {
    bool ret = PapillonPINVOKE.PSocket_IsOpened(swigCPtr);
    return ret;
  }

  public PResult Bind(string endPoint) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Bind(swigCPtr, endPoint), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Connnect(string endPoint) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Connnect(swigCPtr, endPoint), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult SetLingerPeriod(int periodInMs) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_SetLingerPeriod(swigCPtr, periodInMs), true);
    return ret;
  }

  public PResult Subscribe(string filter) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Subscribe__SWIG_0(swigCPtr, filter), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Subscribe() {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Subscribe__SWIG_1(swigCPtr), true);
    return ret;
  }

  public PResult Unsubscribe(string filter) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Unsubscribe(swigCPtr, filter), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Close() {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Close(swigCPtr), true);
    return ret;
  }

  public PResult Send(string message, string filter) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_0(swigCPtr, message, filter), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Send(string message) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_1(swigCPtr, message), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Send(PByteArray message, string filter) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_2(swigCPtr, PByteArray.getCPtr(message), filter), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Send(PByteArray message) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_3(swigCPtr, PByteArray.getCPtr(message)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Send(global::System.IntPtr buffer, int lengthInBytes, string filter) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_4(swigCPtr, buffer, lengthInBytes, filter), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Send(global::System.IntPtr buffer, int lengthInBytes) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Send__SWIG_5(swigCPtr, buffer, lengthInBytes), true);
    return ret;
  }

  public PResult Receive(PString message) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Receive__SWIG_0(swigCPtr, PString.getCPtr(message)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Receive(PByteArray message) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Receive__SWIG_1(swigCPtr, PByteArray.getCPtr(message)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult Receive(global::System.IntPtr buffer, int sizeofBufferInBytes, ref int sizeOfMessageInBytes) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_Receive__SWIG_2(swigCPtr, buffer, sizeofBufferInBytes, ref sizeOfMessageInBytes), true);
    return ret;
  }

  public PResult IsPendingIncomingMessage(int timeOutMs) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_IsPendingIncomingMessage__SWIG_0(swigCPtr, timeOutMs), true);
    return ret;
  }

  public PResult IsPendingIncomingMessage() {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_IsPendingIncomingMessage__SWIG_1(swigCPtr), true);
    return ret;
  }

  public PResult IsPendingOutgoingMessage(int timeOutMs) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_IsPendingOutgoingMessage__SWIG_0(swigCPtr, timeOutMs), true);
    return ret;
  }

  public PResult IsPendingOutgoingMessage() {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_IsPendingOutgoingMessage__SWIG_1(swigCPtr), true);
    return ret;
  }

  public PResult GetBoundPoint(PString boundPoint) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_GetBoundPoint(swigCPtr, PString.getCPtr(boundPoint)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult GetBoundAddress(PString boundAddress) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_GetBoundAddress(swigCPtr, PString.getCPtr(boundAddress)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PResult GetBoundPort(SWIGTYPE_p_unsigned_int boundPort) {
    PResult ret = new PResult(PapillonPINVOKE.PSocket_GetBoundPort(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(boundPort)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ESocketType {
    E_NULL,
    E_REPLY,
    E_REQUEST,
    E_DEALER,
    E_ROUTER,
    E_PUBLISHER,
    E_SUBSCRIBER,
    E_PUSH,
    E_PULL,
    E_PAIR,
    E_STREAM
  }

  public enum ESocketBinding {
    E_UNSPECIFIED,
    E_BIND,
    E_CONNECT
  }

}
