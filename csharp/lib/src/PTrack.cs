//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PTrack : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PTrack(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PTrack_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PTrack obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PTrack() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PTrack(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PTrack() : this(PapillonPINVOKE.new_PTrack__SWIG_0(), true) {
  }

  public PTrack(PGuid id, float confidence) : this(PapillonPINVOKE.new_PTrack__SWIG_1(PGuid.getCPtr(id), confidence), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PTrack(PTrack other) : this(PapillonPINVOKE.new_PTrack__SWIG_2(PTrack.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public PTrack Clone() {
    PTrack ret = new PTrack(PapillonPINVOKE.PTrack_Clone(swigCPtr), true);
    return ret;
  }

  public PGuid GetTrackId() {
    PGuid ret = new PGuid(PapillonPINVOKE.PTrack_GetTrackId(swigCPtr), true);
    return ret;
  }

  public float GetConfidence() {
    float ret = PapillonPINVOKE.PTrack_GetConfidence(swigCPtr);
    return ret;
  }

  public void SetTrackId(PGuid val) {
    PapillonPINVOKE.PTrack_SetTrackId(swigCPtr, PGuid.getCPtr(val));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetConfidence(float val) {
    PapillonPINVOKE.PTrack_SetConfidence(swigCPtr, val);
  }

  public void Clear() {
    PapillonPINVOKE.PTrack_Clear(swigCPtr);
  }

}
