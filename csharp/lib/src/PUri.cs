//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PUri : PObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PUri(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PapillonPINVOKE.PUri_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PUri obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PUri() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PapillonPINVOKE.delete_PUri(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PUri(string uri) : this(PapillonPINVOKE.new_PUri__SWIG_0(uri), true) {
  }

  public PUri() : this(PapillonPINVOKE.new_PUri__SWIG_1(), true) {
  }

  public PUri(PUri other) : this(PapillonPINVOKE.new_PUri__SWIG_3(PUri.getCPtr(other)), true) {
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsFile() {
    bool ret = PapillonPINVOKE.PUri_IsFile(swigCPtr);
    return ret;
  }

  public bool IsNetwork() {
    bool ret = PapillonPINVOKE.PUri_IsNetwork(swigCPtr);
    return ret;
  }

  public PResult CheckScheme(PStringList validSchemeList) {
    PResult ret = new PResult(PapillonPINVOKE.PUri_CheckScheme(swigCPtr, PStringList.getCPtr(validSchemeList)), true);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetScheme() {
    string ret = PapillonPINVOKE.PUri_GetScheme(swigCPtr);
    return ret;
  }

  public string GetUsername() {
    string ret = PapillonPINVOKE.PUri_GetUsername(swigCPtr);
    return ret;
  }

  public string GetPassword() {
    string ret = PapillonPINVOKE.PUri_GetPassword(swigCPtr);
    return ret;
  }

  public string GetHost() {
    string ret = PapillonPINVOKE.PUri_GetHost(swigCPtr);
    return ret;
  }

  public int GetPort() {
    int ret = PapillonPINVOKE.PUri_GetPort(swigCPtr);
    return ret;
  }

  public string GetAuthority() {
    string ret = PapillonPINVOKE.PUri_GetAuthority(swigCPtr);
    return ret;
  }

  public string GetPath() {
    string ret = PapillonPINVOKE.PUri_GetPath(swigCPtr);
    return ret;
  }

  public bool HasQuery() {
    bool ret = PapillonPINVOKE.PUri_HasQuery(swigCPtr);
    return ret;
  }

  public bool HasQueryItem(string key) {
    bool ret = PapillonPINVOKE.PUri_HasQueryItem(swigCPtr, key);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetQueryString() {
    string ret = PapillonPINVOKE.PUri_GetQueryString(swigCPtr);
    return ret;
  }

  public bool GetQueryValue(string key, PString value) {
    bool ret = PapillonPINVOKE.PUri_GetQueryValue__SWIG_0(swigCPtr, key, PString.getCPtr(value));
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetQueryValue(string key, ref int value) {
    bool ret = PapillonPINVOKE.PUri_GetQueryValue__SWIG_1(swigCPtr, key, ref value);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetQueryValue(string key, ref double value) {
    bool ret = PapillonPINVOKE.PUri_GetQueryValue__SWIG_2(swigCPtr, key, ref value);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveQueryItem(string key) {
    bool ret = PapillonPINVOKE.PUri_RemoveQueryItem(swigCPtr, key);
    if (PapillonPINVOKE.SWIGPendingException.Pending) throw PapillonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetFragment() {
    string ret = PapillonPINVOKE.PUri_GetFragment(swigCPtr);
    return ret;
  }

  public PResult Encode() {
    PResult ret = new PResult(PapillonPINVOKE.PUri_Encode(swigCPtr), true);
    return ret;
  }

  public PResult Decode() {
    PResult ret = new PResult(PapillonPINVOKE.PUri_Decode(swigCPtr), true);
    return ret;
  }

  public bool IsEncoded() {
    bool ret = PapillonPINVOKE.PUri_IsEncoded(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = PapillonPINVOKE.PUri_IsEmpty(swigCPtr);
    return ret;
  }

  public bool IsValid() {
    bool ret = PapillonPINVOKE.PUri_IsValid(swigCPtr);
    return ret;
  }

  public string ToStringRemovedUserInfo() {
    string ret = PapillonPINVOKE.PUri_ToStringRemovedUserInfo(swigCPtr);
    return ret;
  }

}
