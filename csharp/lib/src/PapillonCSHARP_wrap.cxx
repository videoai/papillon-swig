/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Papillon(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Papillon(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Papillon(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_Papillon(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#define SWIG_FILE_WITH_INIT


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <PapillonCore.h>
//#include <PSUpervisor.h>

SWIGINTERN papillon::PResult papillon_PPluginInstance_SetBoolean(papillon::PPluginInstance *self,papillon::PString const &key,bool v){
    return self->Set(key, v);
  }
SWIGINTERN bool papillon_PPluginInstance_GetBoolean(papillon::PPluginInstance *self,papillon::PString const &key){
    bool v=false;
    self->Get(key, v);
    return v;
  }
SWIGINTERN papillon::PResult papillon_PPluginInstance_SetInt(papillon::PPluginInstance *self,papillon::PString const &key,papillon::int32 v){
    return self->Set(key, v);
  }
SWIGINTERN papillon::int32 papillon_PPluginInstance_GetInt(papillon::PPluginInstance *self,papillon::PString const &key){
    papillon::int32 v=-1;
    self->Get(key, v);
    return v;
  }
SWIGINTERN papillon::PResult papillon_PPluginInstance_SetString(papillon::PPluginInstance *self,papillon::PString const &key,papillon::PString const &value){
    return self->Set(key, value);
  }
SWIGINTERN papillon::PString papillon_PPluginInstance_GetString(papillon::PPluginInstance *self,papillon::PString const &key){
    papillon::PString v;
    self->Get(key, v);
    return v;
  }
SWIGINTERN papillon::PResult papillon_PPluginInstance_SetDouble(papillon::PPluginInstance *self,papillon::PString const &key,double value){
    return self->Set(key, value);
  }
SWIGINTERN double papillon_PPluginInstance_GetDouble(papillon::PPluginInstance *self,papillon::PString const &key){
    double v=-1.0;
    self->Get(key, v);
    return v;
  }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< papillon::PDescription > *new_std_vector_Sl_papillon_PDescription_Sg___SWIG_2(int capacity){
        std::vector< papillon::PDescription >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PDescription >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PDescription std_vector_Sl_papillon_PDescription_Sg__getitemcopy(std::vector< papillon::PDescription > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PDescription const &std_vector_Sl_papillon_PDescription_Sg__getitem(std::vector< papillon::PDescription > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__setitem(std::vector< papillon::PDescription > *self,int index,papillon::PDescription const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__AddRange(std::vector< papillon::PDescription > *self,std::vector< papillon::PDescription > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PDescription > *std_vector_Sl_papillon_PDescription_Sg__GetRange(std::vector< papillon::PDescription > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PDescription >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__Insert(std::vector< papillon::PDescription > *self,int index,papillon::PDescription const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__InsertRange(std::vector< papillon::PDescription > *self,int index,std::vector< papillon::PDescription > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__RemoveAt(std::vector< papillon::PDescription > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__RemoveRange(std::vector< papillon::PDescription > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PDescription > *std_vector_Sl_papillon_PDescription_Sg__Repeat(papillon::PDescription const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PDescription >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__Reverse__SWIG_0(std::vector< papillon::PDescription > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__Reverse__SWIG_1(std::vector< papillon::PDescription > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescription_Sg__SetRange(std::vector< papillon::PDescription > *self,int index,std::vector< papillon::PDescription > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PDescriptor > *new_std_vector_Sl_papillon_PDescriptor_Sg___SWIG_2(int capacity){
        std::vector< papillon::PDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PDescriptor std_vector_Sl_papillon_PDescriptor_Sg__getitemcopy(std::vector< papillon::PDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PDescriptor const &std_vector_Sl_papillon_PDescriptor_Sg__getitem(std::vector< papillon::PDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__setitem(std::vector< papillon::PDescriptor > *self,int index,papillon::PDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__AddRange(std::vector< papillon::PDescriptor > *self,std::vector< papillon::PDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PDescriptor > *std_vector_Sl_papillon_PDescriptor_Sg__GetRange(std::vector< papillon::PDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__Insert(std::vector< papillon::PDescriptor > *self,int index,papillon::PDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__InsertRange(std::vector< papillon::PDescriptor > *self,int index,std::vector< papillon::PDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__RemoveAt(std::vector< papillon::PDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__RemoveRange(std::vector< papillon::PDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PDescriptor > *std_vector_Sl_papillon_PDescriptor_Sg__Repeat(papillon::PDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__Reverse__SWIG_0(std::vector< papillon::PDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__Reverse__SWIG_1(std::vector< papillon::PDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PDescriptor_Sg__SetRange(std::vector< papillon::PDescriptor > *self,int index,std::vector< papillon::PDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PImage > *new_std_vector_Sl_papillon_PImage_Sg___SWIG_2(int capacity){
        std::vector< papillon::PImage >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PImage >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PImage std_vector_Sl_papillon_PImage_Sg__getitemcopy(std::vector< papillon::PImage > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PImage const &std_vector_Sl_papillon_PImage_Sg__getitem(std::vector< papillon::PImage > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__setitem(std::vector< papillon::PImage > *self,int index,papillon::PImage const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__AddRange(std::vector< papillon::PImage > *self,std::vector< papillon::PImage > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PImage > *std_vector_Sl_papillon_PImage_Sg__GetRange(std::vector< papillon::PImage > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PImage >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__Insert(std::vector< papillon::PImage > *self,int index,papillon::PImage const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__InsertRange(std::vector< papillon::PImage > *self,int index,std::vector< papillon::PImage > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__RemoveAt(std::vector< papillon::PImage > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__RemoveRange(std::vector< papillon::PImage > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PImage > *std_vector_Sl_papillon_PImage_Sg__Repeat(papillon::PImage const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PImage >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__Reverse__SWIG_0(std::vector< papillon::PImage > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__Reverse__SWIG_1(std::vector< papillon::PImage > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PImage_Sg__SetRange(std::vector< papillon::PImage > *self,int index,std::vector< papillon::PImage > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PPoint2Df > *new_std_vector_Sl_papillon_PPoint2Df_Sg___SWIG_2(int capacity){
        std::vector< papillon::PPoint2Df >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PPoint2Df >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PPoint2Df std_vector_Sl_papillon_PPoint2Df_Sg__getitemcopy(std::vector< papillon::PPoint2Df > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PPoint2Df const &std_vector_Sl_papillon_PPoint2Df_Sg__getitem(std::vector< papillon::PPoint2Df > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__setitem(std::vector< papillon::PPoint2Df > *self,int index,papillon::PPoint2Df const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__AddRange(std::vector< papillon::PPoint2Df > *self,std::vector< papillon::PPoint2Df > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PPoint2Df > *std_vector_Sl_papillon_PPoint2Df_Sg__GetRange(std::vector< papillon::PPoint2Df > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PPoint2Df >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__Insert(std::vector< papillon::PPoint2Df > *self,int index,papillon::PPoint2Df const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__InsertRange(std::vector< papillon::PPoint2Df > *self,int index,std::vector< papillon::PPoint2Df > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__RemoveAt(std::vector< papillon::PPoint2Df > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__RemoveRange(std::vector< papillon::PPoint2Df > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PPoint2Df > *std_vector_Sl_papillon_PPoint2Df_Sg__Repeat(papillon::PPoint2Df const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PPoint2Df >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__Reverse__SWIG_0(std::vector< papillon::PPoint2Df > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__Reverse__SWIG_1(std::vector< papillon::PPoint2Df > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Df_Sg__SetRange(std::vector< papillon::PPoint2Df > *self,int index,std::vector< papillon::PPoint2Df > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PPoint2Di > *new_std_vector_Sl_papillon_PPoint2Di_Sg___SWIG_2(int capacity){
        std::vector< papillon::PPoint2Di >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PPoint2Di >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PPoint2Di std_vector_Sl_papillon_PPoint2Di_Sg__getitemcopy(std::vector< papillon::PPoint2Di > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PPoint2Di const &std_vector_Sl_papillon_PPoint2Di_Sg__getitem(std::vector< papillon::PPoint2Di > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__setitem(std::vector< papillon::PPoint2Di > *self,int index,papillon::PPoint2Di const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__AddRange(std::vector< papillon::PPoint2Di > *self,std::vector< papillon::PPoint2Di > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PPoint2Di > *std_vector_Sl_papillon_PPoint2Di_Sg__GetRange(std::vector< papillon::PPoint2Di > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PPoint2Di >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__Insert(std::vector< papillon::PPoint2Di > *self,int index,papillon::PPoint2Di const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__InsertRange(std::vector< papillon::PPoint2Di > *self,int index,std::vector< papillon::PPoint2Di > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__RemoveAt(std::vector< papillon::PPoint2Di > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__RemoveRange(std::vector< papillon::PPoint2Di > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PPoint2Di > *std_vector_Sl_papillon_PPoint2Di_Sg__Repeat(papillon::PPoint2Di const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PPoint2Di >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__Reverse__SWIG_0(std::vector< papillon::PPoint2Di > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__Reverse__SWIG_1(std::vector< papillon::PPoint2Di > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PPoint2Di_Sg__SetRange(std::vector< papillon::PPoint2Di > *self,int index,std::vector< papillon::PPoint2Di > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PEvent > *new_std_vector_Sl_papillon_PEvent_Sg___SWIG_2(int capacity){
        std::vector< papillon::PEvent >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PEvent >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PEvent std_vector_Sl_papillon_PEvent_Sg__getitemcopy(std::vector< papillon::PEvent > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PEvent const &std_vector_Sl_papillon_PEvent_Sg__getitem(std::vector< papillon::PEvent > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__setitem(std::vector< papillon::PEvent > *self,int index,papillon::PEvent const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__AddRange(std::vector< papillon::PEvent > *self,std::vector< papillon::PEvent > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PEvent > *std_vector_Sl_papillon_PEvent_Sg__GetRange(std::vector< papillon::PEvent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PEvent >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__Insert(std::vector< papillon::PEvent > *self,int index,papillon::PEvent const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__InsertRange(std::vector< papillon::PEvent > *self,int index,std::vector< papillon::PEvent > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__RemoveAt(std::vector< papillon::PEvent > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__RemoveRange(std::vector< papillon::PEvent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PEvent > *std_vector_Sl_papillon_PEvent_Sg__Repeat(papillon::PEvent const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PEvent >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__Reverse__SWIG_0(std::vector< papillon::PEvent > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__Reverse__SWIG_1(std::vector< papillon::PEvent > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PEvent_Sg__SetRange(std::vector< papillon::PEvent > *self,int index,std::vector< papillon::PEvent > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< papillon::PGuid > *new_std_vector_Sl_papillon_PGuid_Sg___SWIG_2(int capacity){
        std::vector< papillon::PGuid >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PGuid >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PGuid std_vector_Sl_papillon_PGuid_Sg__getitemcopy(std::vector< papillon::PGuid > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PGuid const &std_vector_Sl_papillon_PGuid_Sg__getitem(std::vector< papillon::PGuid > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__setitem(std::vector< papillon::PGuid > *self,int index,papillon::PGuid const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__AddRange(std::vector< papillon::PGuid > *self,std::vector< papillon::PGuid > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PGuid > *std_vector_Sl_papillon_PGuid_Sg__GetRange(std::vector< papillon::PGuid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PGuid >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__Insert(std::vector< papillon::PGuid > *self,int index,papillon::PGuid const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__InsertRange(std::vector< papillon::PGuid > *self,int index,std::vector< papillon::PGuid > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__RemoveAt(std::vector< papillon::PGuid > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__RemoveRange(std::vector< papillon::PGuid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PGuid > *std_vector_Sl_papillon_PGuid_Sg__Repeat(papillon::PGuid const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PGuid >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__Reverse__SWIG_0(std::vector< papillon::PGuid > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__Reverse__SWIG_1(std::vector< papillon::PGuid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PGuid_Sg__SetRange(std::vector< papillon::PGuid > *self,int index,std::vector< papillon::PGuid > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< unsigned char > *new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned char const &std_vector_Sl_unsigned_SS_char_Sg__getitem(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__setitem(std::vector< unsigned char > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__AddRange(std::vector< unsigned char > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__GetRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Insert(std::vector< unsigned char > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__InsertRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(std::vector< unsigned char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__SetRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Contains(std::vector< unsigned char > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__IndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Remove(std::vector< unsigned char > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< papillon::PString > *new_std_vector_Sl_papillon_PString_Sg___SWIG_2(int capacity){
        std::vector< papillon::PString >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< papillon::PString >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN papillon::PString std_vector_Sl_papillon_PString_Sg__getitemcopy(std::vector< papillon::PString > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN papillon::PString const &std_vector_Sl_papillon_PString_Sg__getitem(std::vector< papillon::PString > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__setitem(std::vector< papillon::PString > *self,int index,papillon::PString const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__AddRange(std::vector< papillon::PString > *self,std::vector< papillon::PString > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< papillon::PString > *std_vector_Sl_papillon_PString_Sg__GetRange(std::vector< papillon::PString > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< papillon::PString >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__Insert(std::vector< papillon::PString > *self,int index,papillon::PString const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__InsertRange(std::vector< papillon::PString > *self,int index,std::vector< papillon::PString > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__RemoveAt(std::vector< papillon::PString > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__RemoveRange(std::vector< papillon::PString > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< papillon::PString > *std_vector_Sl_papillon_PString_Sg__Repeat(papillon::PString const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< papillon::PString >(count, value);
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__Reverse__SWIG_0(std::vector< papillon::PString > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__Reverse__SWIG_1(std::vector< papillon::PString > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_papillon_PString_Sg__SetRange(std::vector< papillon::PString > *self,int index,std::vector< papillon::PString > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_WITH_CORE_LICENSING_RLM_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PAPILLON_TIMEBOMB_LICENSING_EXPIRATION_DATE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("2018-06-30T23:59:59");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WITH_CORE_LICENSING_TIMEBOMB_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IS_PAPILLON_DEBUG_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PAPILLON_NEWLINE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("\n");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSerialisationException() {
  void * jresult ;
  PSerialisationException *result = 0 ;
  
  result = (PSerialisationException *)new PSerialisationException();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSerialisationException(void * jarg1) {
  PSerialisationException *arg1 = (PSerialisationException *) 0 ;
  
  arg1 = (PSerialisationException *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDeserialisationException() {
  void * jresult ;
  PDeserialisationException *result = 0 ;
  
  result = (PDeserialisationException *)new PDeserialisationException();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDeserialisationException(void * jarg1) {
  PDeserialisationException *arg1 = (PDeserialisationException *) 0 ;
  
  arg1 = (PDeserialisationException *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PapillonSDK_SetLicense(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PapillonSDK::SetLicense((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PapillonSDK_SetPluginsPath(char * jarg1) {
  papillon::PString *arg1 = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  papillon::PapillonSDK::SetPluginsPath((papillon::PString const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PapillonSDK_SetNumberOfThreads(int jarg1) {
  papillon::int32 arg1 ;
  
  arg1 = (papillon::int32)jarg1; 
  papillon::PapillonSDK::SetNumberOfThreads(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PapillonSDK_Initialise__SWIG_0(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::int32)jarg1; 
  result = papillon::PapillonSDK::Initialise(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PapillonSDK_Initialise__SWIG_1() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PapillonSDK::Initialise();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PapillonSDK_IsInitialised() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)papillon::PapillonSDK::IsInitialised();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PapillonSDK_Finalise() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PapillonSDK::Finalise();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PapillonSDK_GetVersion() {
  void * jresult ;
  papillon::PVersion result;
  
  result = papillon::PapillonSDK::GetVersion();
  jresult = new papillon::PVersion((const papillon::PVersion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PapillonSDK_ShowMonitoring__SWIG_0() {
  papillon::PapillonSDK::ShowMonitoring();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PapillonSDK_ShowMonitoring__SWIG_1(void * jarg1) {
  papillon::PProperties *arg1 = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return ;
  } 
  papillon::PapillonSDK::ShowMonitoring((papillon::PProperties const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PapillonSDK(void * jarg1) {
  papillon::PapillonSDK *arg1 = (papillon::PapillonSDK *) 0 ;
  
  arg1 = (papillon::PapillonSDK *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PObject__SWIG_0() {
  void * jresult ;
  papillon::PObject *result = 0 ;
  
  result = (papillon::PObject *)new papillon::PObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PObject__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PObject *arg1 = 0 ;
  papillon::PObject *result = 0 ;
  
  arg1 = (papillon::PObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PObject *)new papillon::PObject((papillon::PObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PObject(void * jarg1) {
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  
  arg1 = (papillon::PObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObject_IsNullReference(void * jarg1) {
  unsigned int jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  bool result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = (bool)((papillon::PObject const *)arg1)->IsNullReference();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PObject_GetClassId(void * jarg1) {
  unsigned short jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::classid result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = (papillon::classid)((papillon::PObject const *)arg1)->GetClassId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_CastTo__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = (arg1)->CastTo(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObject_GetHashCode(void * jarg1) {
  unsigned int jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = (papillon::uint32)((papillon::PObject const *)arg1)->GetHashCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObject_IsSerialisable(void * jarg1) {
  unsigned int jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  bool result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = (bool)((papillon::PObject const *)arg1)->IsSerialisable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_Write__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = ((papillon::PObject const *)arg1)->Write(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_Write__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  result = ((papillon::PObject const *)arg1)->Write(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_Read__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = (arg1)->Read(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_Read__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  result = (arg1)->Read(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_ReadObject(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::PResult *arg3 = 0 ;
  papillon::PObject result;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PResult & type is null", 0);
    return 0;
  } 
  result = ((papillon::PObject const *)arg1)->ReadObject(*arg2,*arg3);
  jresult = new papillon::PObject((const papillon::PObject &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PObject_ToString(void * jarg1) {
  char * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = ((papillon::PObject const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_ToByteArray(void * jarg1) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = ((papillon::PObject const *)arg1)->ToByteArray();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PObject_ToBase64(void * jarg1) {
  char * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = ((papillon::PObject const *)arg1)->ToBase64();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObject_FromBase64(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PObject *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->FromBase64((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PObject_DebugInternalPointer(void * jarg1) {
  char * jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = ((papillon::PObject const *)arg1)->DebugInternalPointer();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObject_DebugCounter(void * jarg1) {
  unsigned int jresult ;
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PObject *)jarg1; 
  result = (papillon::uint32)((papillon::PObject const *)arg1)->DebugCounter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PObject_Swap(void * jarg1, void * jarg2) {
  papillon::PObject *arg1 = (papillon::PObject *) 0 ;
  papillon::PObject *arg2 = 0 ;
  
  arg1 = (papillon::PObject *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return ;
  } 
  (arg1)->Swap(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSystemInfo_Log() {
  papillon::PSystemInfo::Log();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetOS() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetOS();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetArchitecture() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetArchitecture();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetCPU() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetCPU();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetCPUInstructionSets() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetCPUInstructionSets();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSystemInfo_GetPhysicallyInstalledRAMInMB() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)papillon::PSystemInfo::GetPhysicallyInstalledRAMInMB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSystemInfo_GetTotalRAM() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)papillon::PSystemInfo::GetTotalRAM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetGPU() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetGPU();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSystemInfo_GetMACAddress() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PSystemInfo::GetMACAddress();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSystemInfo_IsCudaCompatibleGPU(int jarg1, int jarg2) {
  unsigned int jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  bool result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (bool)papillon::PSystemInfo::IsCudaCompatibleGPU(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSystemInfo_GetMemoryStatistics(float * jarg1, float * jarg2, unsigned int * jarg3) {
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  papillon::uint32 *arg3 = 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (papillon::uint32 *)jarg3; 
  papillon::PSystemInfo::GetMemoryStatistics(*arg1,*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSystemInfo_GetPrimaryScreenResolution(void * jarg1, void * jarg2) {
  papillon::int32 *arg1 = 0 ;
  papillon::int32 *arg2 = 0 ;
  
  arg1 = (papillon::int32 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::int32 & type is null", 0);
    return ;
  } 
  arg2 = (papillon::int32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::int32 & type is null", 0);
    return ;
  } 
  papillon::PSystemInfo::GetPrimaryScreenResolution(*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSystemInfo(void * jarg1) {
  papillon::PSystemInfo *arg1 = (papillon::PSystemInfo *) 0 ;
  
  arg1 = (papillon::PSystemInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PBool__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  papillon::PBoxing< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< bool > *)new papillon::PBoxing< bool >((bool const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PBool__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< bool > *result = 0 ;
  
  result = (papillon::PBoxing< bool > *)new papillon::PBoxing< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PBool__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< bool > *arg1 = 0 ;
  papillon::PBoxing< bool > *result = 0 ;
  
  arg1 = (papillon::PBoxing< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< bool > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< bool > *)new papillon::PBoxing< bool >((papillon::PBoxing< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PBool_GetValue(void * jarg1) {
  unsigned int jresult ;
  papillon::PBoxing< bool > *arg1 = (papillon::PBoxing< bool > *) 0 ;
  bool result;
  
  arg1 = (papillon::PBoxing< bool > *)jarg1; 
  result = (bool)((papillon::PBoxing< bool > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PBool(void * jarg1) {
  papillon::PBoxing< bool > *arg1 = (papillon::PBoxing< bool > *) 0 ;
  
  arg1 = (papillon::PBoxing< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt8__SWIG_0(signed char jarg1) {
  void * jresult ;
  signed char *arg1 = 0 ;
  signed char temp1 ;
  papillon::PBoxing< papillon::int8 > *result = 0 ;
  
  temp1 = (signed char)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::int8 > *)new papillon::PBoxing< papillon::int8 >((signed char const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt8__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::int8 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::int8 > *)new papillon::PBoxing< papillon::int8 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt8__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< signed char > *arg1 = 0 ;
  papillon::PBoxing< papillon::int8 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< signed char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< signed char > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::int8 > *)new papillon::PBoxing< papillon::int8 >((papillon::PBoxing< signed char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_PInt8_GetValue(void * jarg1) {
  signed char jresult ;
  papillon::PBoxing< papillon::int8 > *arg1 = (papillon::PBoxing< papillon::int8 > *) 0 ;
  signed char result;
  
  arg1 = (papillon::PBoxing< papillon::int8 > *)jarg1; 
  result = (signed char)((papillon::PBoxing< papillon::int8 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PInt8(void * jarg1) {
  papillon::PBoxing< papillon::int8 > *arg1 = (papillon::PBoxing< papillon::int8 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::int8 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt16__SWIG_0(short jarg1) {
  void * jresult ;
  short *arg1 = 0 ;
  short temp1 ;
  papillon::PBoxing< papillon::int16 > *result = 0 ;
  
  temp1 = (short)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::int16 > *)new papillon::PBoxing< papillon::int16 >((short const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt16__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::int16 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::int16 > *)new papillon::PBoxing< papillon::int16 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt16__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< short > *arg1 = 0 ;
  papillon::PBoxing< papillon::int16 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< short > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< short > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::int16 > *)new papillon::PBoxing< papillon::int16 >((papillon::PBoxing< short > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_PInt16_GetValue(void * jarg1) {
  short jresult ;
  papillon::PBoxing< papillon::int16 > *arg1 = (papillon::PBoxing< papillon::int16 > *) 0 ;
  short result;
  
  arg1 = (papillon::PBoxing< papillon::int16 > *)jarg1; 
  result = (short)((papillon::PBoxing< papillon::int16 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PInt16(void * jarg1) {
  papillon::PBoxing< papillon::int16 > *arg1 = (papillon::PBoxing< papillon::int16 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::int16 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt32__SWIG_0(int jarg1) {
  void * jresult ;
  int *arg1 = 0 ;
  int temp1 ;
  papillon::PBoxing< papillon::int32 > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::int32 > *)new papillon::PBoxing< papillon::int32 >((int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt32__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::int32 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::int32 > *)new papillon::PBoxing< papillon::int32 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt32__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< int > *arg1 = 0 ;
  papillon::PBoxing< papillon::int32 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< int > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::int32 > *)new papillon::PBoxing< papillon::int32 >((papillon::PBoxing< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PInt32_GetValue(void * jarg1) {
  int jresult ;
  papillon::PBoxing< papillon::int32 > *arg1 = (papillon::PBoxing< papillon::int32 > *) 0 ;
  int result;
  
  arg1 = (papillon::PBoxing< papillon::int32 > *)jarg1; 
  result = (int)((papillon::PBoxing< papillon::int32 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PInt32(void * jarg1) {
  papillon::PBoxing< papillon::int32 > *arg1 = (papillon::PBoxing< papillon::int32 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::int32 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt64__SWIG_0(long long jarg1) {
  void * jresult ;
  long long *arg1 = 0 ;
  long long temp1 ;
  papillon::PBoxing< papillon::int64 > *result = 0 ;
  
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::int64 > *)new papillon::PBoxing< papillon::int64 >((long long const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt64__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::int64 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::int64 > *)new papillon::PBoxing< papillon::int64 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInt64__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< long long > *arg1 = 0 ;
  papillon::PBoxing< papillon::int64 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< long long > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::int64 > *)new papillon::PBoxing< papillon::int64 >((papillon::PBoxing< long long > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PInt64_GetValue(void * jarg1) {
  long long jresult ;
  papillon::PBoxing< papillon::int64 > *arg1 = (papillon::PBoxing< papillon::int64 > *) 0 ;
  long long result;
  
  arg1 = (papillon::PBoxing< papillon::int64 > *)jarg1; 
  result = (long long)((papillon::PBoxing< papillon::int64 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PInt64(void * jarg1) {
  papillon::PBoxing< papillon::int64 > *arg1 = (papillon::PBoxing< papillon::int64 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::int64 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt8__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  papillon::PBoxing< papillon::uint8 > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::uint8 > *)new papillon::PBoxing< papillon::uint8 >((unsigned char const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt8__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::uint8 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::uint8 > *)new papillon::PBoxing< papillon::uint8 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt8__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< unsigned char > *arg1 = 0 ;
  papillon::PBoxing< papillon::uint8 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::uint8 > *)new papillon::PBoxing< papillon::uint8 >((papillon::PBoxing< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PUInt8_GetValue(void * jarg1) {
  unsigned char jresult ;
  papillon::PBoxing< papillon::uint8 > *arg1 = (papillon::PBoxing< papillon::uint8 > *) 0 ;
  unsigned char result;
  
  arg1 = (papillon::PBoxing< papillon::uint8 > *)jarg1; 
  result = (unsigned char)((papillon::PBoxing< papillon::uint8 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUInt8(void * jarg1) {
  papillon::PBoxing< papillon::uint8 > *arg1 = (papillon::PBoxing< papillon::uint8 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::uint8 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt16__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  papillon::PBoxing< papillon::uint16 > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::uint16 > *)new papillon::PBoxing< papillon::uint16 >((unsigned short const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt16__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::uint16 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::uint16 > *)new papillon::PBoxing< papillon::uint16 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt16__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< unsigned short > *arg1 = 0 ;
  papillon::PBoxing< papillon::uint16 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< unsigned short > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< unsigned short > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::uint16 > *)new papillon::PBoxing< papillon::uint16 >((papillon::PBoxing< unsigned short > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PUInt16_GetValue(void * jarg1) {
  unsigned short jresult ;
  papillon::PBoxing< papillon::uint16 > *arg1 = (papillon::PBoxing< papillon::uint16 > *) 0 ;
  unsigned short result;
  
  arg1 = (papillon::PBoxing< papillon::uint16 > *)jarg1; 
  result = (unsigned short)((papillon::PBoxing< papillon::uint16 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUInt16(void * jarg1) {
  papillon::PBoxing< papillon::uint16 > *arg1 = (papillon::PBoxing< papillon::uint16 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::uint16 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt32__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  papillon::PBoxing< papillon::uint32 > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::uint32 > *)new papillon::PBoxing< papillon::uint32 >((unsigned int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt32__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::uint32 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::uint32 > *)new papillon::PBoxing< papillon::uint32 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt32__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< unsigned int > *arg1 = 0 ;
  papillon::PBoxing< papillon::uint32 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::uint32 > *)new papillon::PBoxing< papillon::uint32 >((papillon::PBoxing< unsigned int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUInt32_GetValue(void * jarg1) {
  unsigned int jresult ;
  papillon::PBoxing< papillon::uint32 > *arg1 = (papillon::PBoxing< papillon::uint32 > *) 0 ;
  unsigned int result;
  
  arg1 = (papillon::PBoxing< papillon::uint32 > *)jarg1; 
  result = (unsigned int)((papillon::PBoxing< papillon::uint32 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUInt32(void * jarg1) {
  papillon::PBoxing< papillon::uint32 > *arg1 = (papillon::PBoxing< papillon::uint32 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::uint32 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt64__SWIG_0(unsigned long long jarg1) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  papillon::PBoxing< papillon::uint64 > *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< papillon::uint64 > *)new papillon::PBoxing< papillon::uint64 >((unsigned long long const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt64__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< papillon::uint64 > *result = 0 ;
  
  result = (papillon::PBoxing< papillon::uint64 > *)new papillon::PBoxing< papillon::uint64 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUInt64__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< unsigned long long > *arg1 = 0 ;
  papillon::PBoxing< papillon::uint64 > *result = 0 ;
  
  arg1 = (papillon::PBoxing< unsigned long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< unsigned long long > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< papillon::uint64 > *)new papillon::PBoxing< papillon::uint64 >((papillon::PBoxing< unsigned long long > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PUInt64_GetValue(void * jarg1) {
  unsigned long long jresult ;
  papillon::PBoxing< papillon::uint64 > *arg1 = (papillon::PBoxing< papillon::uint64 > *) 0 ;
  unsigned long long result;
  
  arg1 = (papillon::PBoxing< papillon::uint64 > *)jarg1; 
  result = (unsigned long long)((papillon::PBoxing< papillon::uint64 > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUInt64(void * jarg1) {
  papillon::PBoxing< papillon::uint64 > *arg1 = (papillon::PBoxing< papillon::uint64 > *) 0 ;
  
  arg1 = (papillon::PBoxing< papillon::uint64 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFloat__SWIG_0(float jarg1) {
  void * jresult ;
  float *arg1 = 0 ;
  float temp1 ;
  papillon::PBoxing< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< float > *)new papillon::PBoxing< float >((float const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFloat__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< float > *result = 0 ;
  
  result = (papillon::PBoxing< float > *)new papillon::PBoxing< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFloat__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< float > *arg1 = 0 ;
  papillon::PBoxing< float > *result = 0 ;
  
  arg1 = (papillon::PBoxing< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< float > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< float > *)new papillon::PBoxing< float >((papillon::PBoxing< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFloat_GetValue(void * jarg1) {
  float jresult ;
  papillon::PBoxing< float > *arg1 = (papillon::PBoxing< float > *) 0 ;
  float result;
  
  arg1 = (papillon::PBoxing< float > *)jarg1; 
  result = (float)((papillon::PBoxing< float > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFloat(void * jarg1) {
  papillon::PBoxing< float > *arg1 = (papillon::PBoxing< float > *) 0 ;
  
  arg1 = (papillon::PBoxing< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDouble__SWIG_0(double jarg1) {
  void * jresult ;
  double *arg1 = 0 ;
  double temp1 ;
  papillon::PBoxing< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (papillon::PBoxing< double > *)new papillon::PBoxing< double >((double const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDouble__SWIG_1() {
  void * jresult ;
  papillon::PBoxing< double > *result = 0 ;
  
  result = (papillon::PBoxing< double > *)new papillon::PBoxing< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDouble__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PBoxing< double > *arg1 = 0 ;
  papillon::PBoxing< double > *result = 0 ;
  
  arg1 = (papillon::PBoxing< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PBoxing< double > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PBoxing< double > *)new papillon::PBoxing< double >((papillon::PBoxing< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PDouble_GetValue(void * jarg1) {
  double jresult ;
  papillon::PBoxing< double > *arg1 = (papillon::PBoxing< double > *) 0 ;
  double result;
  
  arg1 = (papillon::PBoxing< double > *)jarg1; 
  result = (double)((papillon::PBoxing< double > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDouble(void * jarg1) {
  papillon::PBoxing< double > *arg1 = (papillon::PBoxing< double > *) 0 ;
  
  arg1 = (papillon::PBoxing< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPluginInstance__SWIG_0() {
  void * jresult ;
  papillon::PPluginInstance *result = 0 ;
  
  result = (papillon::PPluginInstance *)new papillon::PPluginInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Create(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PPlugin *arg2 = 0 ;
  papillon::PProperties *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  arg2 = (papillon::PPlugin *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PProperties *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Create((papillon::PPlugin const &)*arg2,(papillon::PProperties const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPluginInstance__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = 0 ;
  papillon::PPluginInstance *result = 0 ;
  
  arg1 = (papillon::PPluginInstance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPluginInstance const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPluginInstance *)new papillon::PPluginInstance((papillon::PPluginInstance const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPluginInstance(void * jarg1) {
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_GetInstance(void * jarg1) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  void *result = 0 ;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = (void *)((papillon::PPluginInstance const *)arg1)->GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_GetPlugin(void * jarg1) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PPlugin result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = ((papillon::PPluginInstance const *)arg1)->GetPlugin();
  jresult = new papillon::PPlugin((const papillon::PPlugin &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_GetPluginId(void * jarg1) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = ((papillon::PPluginInstance const *)arg1)->GetPluginId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPluginInstance_GetPluginName(void * jarg1) {
  char * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = ((papillon::PPluginInstance const *)arg1)->GetPluginName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_GetInstanceId(void * jarg1) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = ((papillon::PPluginInstance const *)arg1)->GetInstanceId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPluginInstance_GetInstanceName(void * jarg1) {
  char * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  result = ((papillon::PPluginInstance const *)arg1)->GetInstanceName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_1(void * jarg1, char * jarg2, int * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32 *)jarg3; 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_2(void * jarg1, char * jarg2, long long * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int64 *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int64 *)jarg3; 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_3(void * jarg1, char * jarg2, float * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  float *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float *)jarg3; 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_4(void * jarg1, char * jarg2, double * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  double *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double *)jarg3; 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Get__SWIG_5(void * jarg1, char * jarg2, unsigned int * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = ((papillon::PPluginInstance const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Set((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_2(void * jarg1, char * jarg2, long long jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int64 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int64)jarg3; 
  result = (arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_3(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  result = (arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_4(void * jarg1, char * jarg2, double jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  double arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double)jarg3; 
  result = (arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_Set__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = jarg3 ? true : false; 
  result = (arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_SetBoolean(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = jarg3 ? true : false; 
  result = papillon_PPluginInstance_SetBoolean(arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPluginInstance_GetBoolean(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)papillon_PPluginInstance_GetBoolean(arg1,(papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_SetInt(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = papillon_PPluginInstance_SetInt(arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPluginInstance_GetInt(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)papillon_PPluginInstance_GetInt(arg1,(papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_SetString(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon_PPluginInstance_SetString(arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPluginInstance_GetString(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon_PPluginInstance_GetString(arg1,(papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPluginInstance_SetDouble(void * jarg1, char * jarg2, double jarg3) {
  void * jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  double arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double)jarg3; 
  result = papillon_PPluginInstance_SetDouble(arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PPluginInstance_GetDouble(void * jarg1, char * jarg2) {
  double jresult ;
  papillon::PPluginInstance *arg1 = (papillon::PPluginInstance *) 0 ;
  papillon::PString *arg2 = 0 ;
  double result;
  
  arg1 = (papillon::PPluginInstance *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (double)papillon_PPluginInstance_GetDouble(arg1,(papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PList__SWIG_0() {
  void * jresult ;
  papillon::PList *result = 0 ;
  
  result = (papillon::PList *)new papillon::PList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PList__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PList *arg1 = 0 ;
  papillon::PList *result = 0 ;
  
  arg1 = (papillon::PList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PList *)new papillon::PList((papillon::PList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PList(void * jarg1) {
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  
  arg1 = (papillon::PList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Clone(void * jarg1) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PList *)jarg1; 
  result = ((papillon::PList const *)arg1)->Clone();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PList_Clear(void * jarg1) {
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  
  arg1 = (papillon::PList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PList_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  bool result;
  
  arg1 = (papillon::PList *)jarg1; 
  result = (bool)((papillon::PList const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PList_Size(void * jarg1) {
  int jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PList *)jarg1; 
  result = (papillon::int32)((papillon::PList const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Get(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PList const *)arg1)->Get(arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Set(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PList const *)arg1)->Set(arg2,(papillon::PObject const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PList *result = 0 ;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PList *) &(arg1)->Add((papillon::PObject const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_AddFirst(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PList *result = 0 ;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PList *) &(arg1)->AddFirst((papillon::PObject const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Append(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PList *arg2 = 0 ;
  papillon::PList *result = 0 ;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::PList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PList *) &(arg1)->Append((papillon::PList const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_Remove(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->Remove(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_RemoveLast(void * jarg1) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PList *)jarg1; 
  result = (arg1)->RemoveLast();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PList_RemoveFirst(void * jarg1) {
  void * jresult ;
  papillon::PList *arg1 = (papillon::PList *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PList *)jarg1; 
  result = (arg1)->RemoveFirst();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringMap__SWIG_0() {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *result = 0 ;
  
  result = (papillon::PMap< papillon::PString,papillon::PObject > *)new papillon::PMap< papillon::PString,papillon::PObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringMap__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = 0 ;
  papillon::PMap< papillon::PString,papillon::PObject > *result = 0 ;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMap< papillon::PString,papillon::PObject > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PMap< papillon::PString,papillon::PObject > *)new papillon::PMap< papillon::PString,papillon::PObject >((papillon::PMap< papillon::PString,papillon::PObject > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Iterator(void * jarg1) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  SwigValueWrapper< papillon::PMapIterator< papillon::PString,papillon::PObject > > result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Iterator();
  jresult = new papillon::PMapIterator< papillon::PString,papillon::PObject >((const papillon::PMapIterator< papillon::PString,papillon::PObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PStringMap_Clear(void * jarg1) {
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStringMap_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  bool result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  result = (bool)((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PStringMap_Size(void * jarg1) {
  int jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  result = (papillon::int32)((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStringMap_Has(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Has((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_1(void * jarg1, char * jarg2, unsigned int * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_2(void * jarg1, char * jarg2, int * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32 *)jarg3; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_3(void * jarg1, char * jarg2, long long * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int64 *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int64 *)jarg3; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_4(void * jarg1, char * jarg2, float * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  float *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float *)jarg3; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Get__SWIG_5(void * jarg1, char * jarg2, double * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  double *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double *)jarg3; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Put(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PMap< papillon::PString,papillon::PObject > *result = 0 ;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PMap< papillon::PString,papillon::PObject > *) &(arg1)->Put((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_GetKeyList(void * jarg1) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->GetKeyList();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_GetValueList(void * jarg1) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  result = ((papillon::PMap< papillon::PString,papillon::PObject > const *)arg1)->GetValueList();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringMap_Remove(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Remove((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PStringMap(void * jarg1) {
  papillon::PMap< papillon::PString,papillon::PObject > *arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *) 0 ;
  
  arg1 = (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteStream__SWIG_0() {
  void * jresult ;
  papillon::PByteStream *result = 0 ;
  
  result = (papillon::PByteStream *)new papillon::PByteStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteStream__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PByteStream *arg1 = 0 ;
  papillon::PByteStream *result = 0 ;
  
  arg1 = (papillon::PByteStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream const & type is null", 0);
    return 0;
  } 
  result = (papillon::PByteStream *)new papillon::PByteStream((papillon::PByteStream const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PByteStream(void * jarg1) {
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_IsOpened(void * jarg1) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = ((papillon::PByteStream const *)arg1)->IsOpened();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_Flush(void * jarg1) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (arg1)->Flush();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_Close(void * jarg1) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (arg1)->Close();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PByteStream_CanSeek(void * jarg1) {
  unsigned int jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (bool)((papillon::PByteStream const *)arg1)->CanSeek();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PByteStream_GetPosition(void * jarg1) {
  long long jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (papillon::int64)((papillon::PByteStream const *)arg1)->GetPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_Seek(void * jarg1, long long jarg2) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int64 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  result = (arg1)->Seek(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_Rewind(void * jarg1) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (arg1)->Rewind();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PByteStream_HasSize(void * jarg1) {
  unsigned int jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (bool)((papillon::PByteStream const *)arg1)->HasSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PByteStream_Size(void * jarg1) {
  long long jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (papillon::int64)((papillon::PByteStream const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_Resize(void * jarg1, long long jarg2) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int64 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  result = (arg1)->Resize(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PByteStream_CanRead(void * jarg1) {
  unsigned int jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (bool)((papillon::PByteStream const *)arg1)->CanRead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_ReadByte(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int8 *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::int8 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::int8 & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadByte(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_ReadBytes__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->ReadBytes(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_ReadBytes__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->ReadBytes(*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PByteStream_CanWrite(void * jarg1) {
  unsigned int jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  result = (bool)((papillon::PByteStream const *)arg1)->CanWrite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_WriteByte(void * jarg1, signed char jarg2) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::int8 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::int8)jarg2; 
  result = (arg1)->WriteByte(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_WriteBytes__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->WriteBytes((void const *)arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_WriteBytes__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->WriteBytes((papillon::PByteArray const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_WriteBytes__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PByteStream *arg1 = (papillon::PByteStream *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->WriteBytes((papillon::PByteArray const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteStream_ReadClassIdAndCheck(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  papillon::PByteStream *arg1 = 0 ;
  papillon::classid arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::classid)jarg2; 
  result = papillon::PByteStream::ReadClassIdAndCheck(*arg1,arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteArray__SWIG_0() {
  void * jresult ;
  papillon::PByteArray *result = 0 ;
  
  result = (papillon::PByteArray *)new papillon::PByteArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteArray__SWIG_1(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PByteArray *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PByteArray *)new papillon::PByteArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteArray__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  papillon::int32 arg2 ;
  papillon::PByteArray *result = 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PByteArray *)new papillon::PByteArray((void const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteArray__SWIG_3(void * jarg1) {
  void * jresult ;
  std::vector< papillon::uint8 > *arg1 = 0 ;
  papillon::PByteArray *result = 0 ;
  
  arg1 = (std::vector< papillon::uint8 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::uint8 > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PByteArray *)new papillon::PByteArray((std::vector< papillon::uint8 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PByteArray__SWIG_4(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = 0 ;
  papillon::PByteArray *result = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  result = (papillon::PByteArray *)new papillon::PByteArray((papillon::PByteArray const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PByteArray(void * jarg1) {
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Clone(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = ((papillon::PByteArray const *)arg1)->Clone();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_FromString(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  result = papillon::PByteArray::FromString((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PByteArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  bool result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (bool)((papillon::PByteArray const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PByteArray_Size(void * jarg1) {
  int jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (papillon::int32)((papillon::PByteArray const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PByteArray_Capacity(void * jarg1) {
  int jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (papillon::int32)((papillon::PByteArray const *)arg1)->Capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PByteArray_Clear(void * jarg1) {
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PByteArray_Fill(void * jarg1, unsigned char jarg2) {
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::uint8 arg2 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::uint8)jarg2; 
  (arg1)->Fill(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Resize(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->Resize(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Reserve(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->Reserve(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PByteArray_Append(void * jarg1, void * jarg2) {
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return ;
  } 
  (arg1)->Append((papillon::PByteArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PByteArray_PushBack(void * jarg1, unsigned char jarg2) {
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::uint8 arg2 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::uint8)jarg2; 
  (arg1)->PushBack(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PByteArray_PopBack(void * jarg1) {
  unsigned char jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::uint8 result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (papillon::uint8)(arg1)->PopBack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PByteArray_Get(void * jarg1, int jarg2) {
  int jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::int32)((papillon::PByteArray const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Set(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Set(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Zip__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->Zip(arg2);
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Zip__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (arg1)->Zip();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_Unzip(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (arg1)->Unzip();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_EncodeToBase64(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = ((papillon::PByteArray const *)arg1)->EncodeToBase64();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PByteArray_ToStringBase64(void * jarg1) {
  char * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = ((papillon::PByteArray const *)arg1)->ToStringBase64();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_DecodeFromBase64(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PByteArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  result = papillon::PByteArray::DecodeFromBase64((papillon::PByteArray const &)*arg1);
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PByteArray_CRC16(void * jarg1) {
  unsigned short jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::uint16 result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (papillon::uint16)((papillon::PByteArray const *)arg1)->CRC16();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PByteArray_MD5(void * jarg1) {
  char * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = ((papillon::PByteArray const *)arg1)->MD5();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PByteArray_SHA256(void * jarg1) {
  char * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = ((papillon::PByteArray const *)arg1)->SHA256();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_ToFile(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PByteArray const *)arg1)->ToFile((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_FromFile(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->FromFile((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PByteArray_c_str(void * jarg1) {
  char * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  char *result = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (char *)((papillon::PByteArray const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_CopyToRawBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->CopyToRawBuffer(arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_CopyFromRawBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->CopyFromRawBuffer((void const *)arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_AsPtrDouble__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  papillon::int32 arg2 ;
  double *result = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (double *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR AsPtr< double >(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PByteArray_AsPtrDouble__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = (papillon::PByteArray *) 0 ;
  double *result = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1; 
  result = (double *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR AsPtr< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  papillon::uint32 arg1 ;
  papillon::PColour3i *result = 0 ;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (papillon::PColour3i *)new papillon::PColour3i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PColour3i *)new papillon::PColour3i(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PColour3i *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PColour3i *)new papillon::PColour3i(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_3(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PColour3i *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PColour3i *)new papillon::PColour3i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_4() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *)new papillon::PColour3i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_5(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  papillon::PColour3i *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (papillon::PColour3i *)new papillon::PColour3i(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PColour3i__SWIG_6(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PColour3i *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PColour3i *)new papillon::PColour3i((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PColour3i(void * jarg1) {
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PColour3i_GetR(void * jarg1) {
  int jresult ;
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  result = (papillon::int32)((papillon::PColour3i const *)arg1)->GetR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PColour3i_GetG(void * jarg1) {
  int jresult ;
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  result = (papillon::int32)((papillon::PColour3i const *)arg1)->GetG();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PColour3i_GetB(void * jarg1) {
  int jresult ;
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  result = (papillon::int32)((papillon::PColour3i const *)arg1)->GetB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PColour3i_Set(void * jarg1, int jarg2, int jarg3, int jarg4) {
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PColour3i_ToGrey(void * jarg1) {
  int jresult ;
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  result = (papillon::int32)((papillon::PColour3i const *)arg1)->ToGrey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PColour3i_SwapRGB(void * jarg1) {
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  (arg1)->SwapRGB();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PColour3i_Clamp(void * jarg1) {
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  (arg1)->Clamp();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PColour3i_ToStringHTML(void * jarg1) {
  char * jresult ;
  papillon::PColour3i *arg1 = (papillon::PColour3i *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PColour3i *)jarg1; 
  result = ((papillon::PColour3i const *)arg1)->ToStringHTML();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Aqua() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Aqua();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Black() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Black();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Blue() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Blue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Brown() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Brown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Coral() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Coral();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Darkgray() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Darkgray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Fuschia() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Fuschia();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Gray() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Gray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Green() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Green();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Lightgray() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Lightgray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Lime() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Lime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Maroon() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Maroon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Navy() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Navy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Olive() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Olive();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Orange() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Orange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Pink() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Pink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Purple() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Purple();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Red() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Red();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Silver() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Silver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Skyblue() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Skyblue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Tan() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Tan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Teal() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Teal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_White() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::White();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_Yellow() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *) &papillon::PColour3i::Yellow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PColour3i_C_COLOUR_TABLE_get() {
  void * jresult ;
  papillon::PColour3i *result = 0 ;
  
  result = (papillon::PColour3i *)(papillon::PColour3i *)papillon::PColour3i::C_COLOUR_TABLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PComparer__SWIG_0() {
  void * jresult ;
  papillon::PComparer *result = 0 ;
  
  result = (papillon::PComparer *)new papillon::PComparer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PComparer__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PComparer *arg1 = 0 ;
  papillon::PComparer *result = 0 ;
  
  arg1 = (papillon::PComparer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer const & type is null", 0);
    return 0;
  } 
  result = (papillon::PComparer *)new papillon::PComparer((papillon::PComparer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_Create__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  papillon::PComparer *arg1 = 0 ;
  double arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PComparer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = papillon::PComparer::Create(*arg1,arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_Create__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PComparer *arg1 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PComparer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer & type is null", 0);
    return 0;
  } 
  result = papillon::PComparer::Create(*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_Create__SWIG_2(int jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  papillon::PComparer::EComparerType arg1 ;
  papillon::PComparer *arg2 = 0 ;
  double arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PComparer::EComparerType)jarg1; 
  arg2 = (papillon::PComparer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = papillon::PComparer::Create(arg1,*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_Create__SWIG_3(int jarg1, void * jarg2) {
  void * jresult ;
  papillon::PComparer::EComparerType arg1 ;
  papillon::PComparer *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PComparer::EComparerType)jarg1; 
  arg2 = (papillon::PComparer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer & type is null", 0);
    return 0;
  } 
  result = papillon::PComparer::Create(arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PComparer(void * jarg1) {
  papillon::PComparer *arg1 = (papillon::PComparer *) 0 ;
  
  arg1 = (papillon::PComparer *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PComparer_GetName(void * jarg1) {
  char * jresult ;
  papillon::PComparer *arg1 = (papillon::PComparer *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PComparer *)jarg1; 
  result = ((papillon::PComparer const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_GetId(void * jarg1) {
  void * jresult ;
  papillon::PComparer *arg1 = (papillon::PComparer *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PComparer *)jarg1; 
  result = ((papillon::PComparer const *)arg1)->GetId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PComparer_Compare(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PComparer *arg1 = (papillon::PComparer *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PComparer *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  result = ((papillon::PComparer const *)arg1)->Compare((papillon::PDescription const &)*arg2,(papillon::PDescription const &)*arg3,*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Bad() {
  void * jresult ;
  papillon::PPoint2Df *result = 0 ;
  
  result = (papillon::PPoint2Df *) &papillon::PPoint2Df::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Zero() {
  void * jresult ;
  papillon::PPoint2Df *result = 0 ;
  
  result = (papillon::PPoint2Df *) &papillon::PPoint2Df::Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_0(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_2() {
  void * jresult ;
  papillon::PPoint2Df *result = 0 ;
  
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_3(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Df__SWIG_5(void * jarg1) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = 0 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (papillon::PPoint2Df *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPoint2Df *)new papillon::PPoint2Df((papillon::PPoint2Df const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPoint2Df(void * jarg1) {
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PPoint2Df_GetX(void * jarg1) {
  float jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  float result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  result = (float)((papillon::PPoint2Df const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PPoint2Df_GetY(void * jarg1) {
  float jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  float result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  result = (float)((papillon::PPoint2Df const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPoint2Df_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  bool result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  result = (bool)((papillon::PPoint2Df const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPoint2Df_IsBad(void * jarg1) {
  unsigned int jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  bool result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  result = (bool)((papillon::PPoint2Df const *)arg1)->IsBad();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Translated__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((papillon::PPoint2Df const *)arg1)->Translated(arg2,arg3);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Translated__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPoint2Df const *)arg1)->Translated((papillon::PPoint2Df const &)*arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Scaled(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  float arg2 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PPoint2Df const *)arg1)->Scaled(arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_ToPPoint2Di(void * jarg1) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  result = ((papillon::PPoint2Df const *)arg1)->ToPPoint2Di();
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PPoint2Df_EuclideanDistance(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PPoint2Df *arg1 = (papillon::PPoint2Df *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PPoint2Df *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PPoint2Df const *)arg1)->EuclideanDistance((papillon::PPoint2Df const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Df_Middle(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2Df *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = papillon::PPoint2Df::Middle((papillon::PPoint2Df const &)*arg1,(papillon::PPoint2Df const &)*arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Di_Zero() {
  void * jresult ;
  papillon::PPoint2Di *result = 0 ;
  
  result = (papillon::PPoint2Di *) &papillon::PPoint2Di::Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Di__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Di *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PPoint2Di *)new papillon::PPoint2Di(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Di__SWIG_1(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PPoint2Di *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PPoint2Di *)new papillon::PPoint2Di(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Di__SWIG_2() {
  void * jresult ;
  papillon::PPoint2Di *result = 0 ;
  
  result = (papillon::PPoint2Di *)new papillon::PPoint2Di();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2Di__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PPoint2Di *arg1 = 0 ;
  papillon::PPoint2Di *result = 0 ;
  
  arg1 = (papillon::PPoint2Di *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPoint2Di *)new papillon::PPoint2Di((papillon::PPoint2Di const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPoint2Di(void * jarg1) {
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPoint2Di_GetX(void * jarg1) {
  int jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  result = (papillon::int32)((papillon::PPoint2Di const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPoint2Di_GetY(void * jarg1) {
  int jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  result = (papillon::int32)((papillon::PPoint2Di const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Di_Translated(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PPoint2Di const *)arg1)->Translated(arg2,arg3);
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Di_Scaled(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PPoint2Di const *)arg1)->Scaled(arg2);
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2Di_ToPPoint2Df(void * jarg1) {
  void * jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  result = ((papillon::PPoint2Di const *)arg1)->ToPPoint2Df();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PPoint2Di_EuclideanDistance(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PPoint2Di *arg1 = (papillon::PPoint2Di *) 0 ;
  papillon::PPoint2Di *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PPoint2Di *)jarg1; 
  arg2 = (papillon::PPoint2Di *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PPoint2Di const *)arg1)->EuclideanDistance((papillon::PPoint2Di const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2DfList__SWIG_0() {
  void * jresult ;
  papillon::PPoint2DfList *result = 0 ;
  
  result = (papillon::PPoint2DfList *)new papillon::PPoint2DfList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPoint2DfList__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PPoint2DfList *arg1 = 0 ;
  papillon::PPoint2DfList *result = 0 ;
  
  arg1 = (papillon::PPoint2DfList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2DfList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPoint2DfList *)new papillon::PPoint2DfList((papillon::PPoint2DfList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPoint2DfList(void * jarg1) {
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPoint2DfList_Clear(void * jarg1) {
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPoint2DfList_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  bool result;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  result = (bool)((papillon::PPoint2DfList const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPoint2DfList_Size(void * jarg1) {
  int jresult ;
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  result = (papillon::int32)((papillon::PPoint2DfList const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPoint2DfList_Add(void * jarg1, void * jarg2) {
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PPoint2Df const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPoint2DfList_Get(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPoint2DfList *arg1 = (papillon::PPoint2DfList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPoint2DfList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PPoint2DfList const *)arg1)->Get(arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygonf__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = 0 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Df > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygonf *)new papillon::PPolygonf((std::vector< papillon::PPoint2Df > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygonf__SWIG_1() {
  void * jresult ;
  papillon::PPolygonf *result = 0 ;
  
  result = (papillon::PPolygonf *)new papillon::PPolygonf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygonf__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = 0 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PRectanglef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygonf *)new papillon::PPolygonf((papillon::PRectanglef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygonf__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PPolygonf *arg1 = 0 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygonf const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygonf *)new papillon::PPolygonf((papillon::PPolygonf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPolygonf(void * jarg1) {
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPolygonf_Clear(void * jarg1) {
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPolygonf_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  bool result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = (bool)((papillon::PPolygonf const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPolygonf_Size(void * jarg1) {
  int jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = (papillon::int32)((papillon::PPolygonf const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_GetPoint(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PPolygonf const *)arg1)->GetPoint(arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_GetFirstPoint(void * jarg1) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = ((papillon::PPolygonf const *)arg1)->GetFirstPoint();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_GetLastPoint(void * jarg1) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = ((papillon::PPolygonf const *)arg1)->GetLastPoint();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_GetBoundingRectangle(void * jarg1) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = ((papillon::PPolygonf const *)arg1)->GetBoundingRectangle();
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_GetConvexHull(void * jarg1) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  result = ((papillon::PPolygonf const *)arg1)->GetConvexHull();
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPolygonf_SetPoint(void * jarg1, int jarg2, void * jarg3) {
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Df *arg3 = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PPoint2Df *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  (arg1)->SetPoint(arg2,(papillon::PPoint2Df const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_AddPoint__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::int32 arg4 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (papillon::PPolygonf *) &(arg1)->AddPoint(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_AddPoint__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (papillon::PPolygonf *) &(arg1)->AddPoint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_AddPoint__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PPolygonf *) &(arg1)->AddPoint((papillon::PPoint2Df const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_AddPoint__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::PPolygonf *result = 0 ;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygonf *) &(arg1)->AddPoint((papillon::PPoint2Df const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_Intersected(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPolygonf *arg2 = 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::PPolygonf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygonf const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPolygonf const *)arg1)->Intersected((papillon::PPolygonf const &)*arg2);
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_United(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPolygonf *arg2 = 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::PPolygonf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygonf const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPolygonf const *)arg1)->United((papillon::PPolygonf const &)*arg2);
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygonf_Translated(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygonf *arg1 = (papillon::PPolygonf *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PPolygonf *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPolygonf const *)arg1)->Translated((papillon::PPoint2Df const &)*arg2);
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygoni__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = 0 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Di > const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygoni *)new papillon::PPolygoni((std::vector< papillon::PPoint2Di > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygoni__SWIG_1() {
  void * jresult ;
  papillon::PPolygoni *result = 0 ;
  
  result = (papillon::PPolygoni *)new papillon::PPolygoni();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygoni__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = 0 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PRectanglei *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygoni *)new papillon::PPolygoni((papillon::PRectanglei const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PPolygoni__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PPolygoni *arg1 = 0 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygoni const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygoni *)new papillon::PPolygoni((papillon::PPolygoni const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPolygoni(void * jarg1) {
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPolygoni_Clear(void * jarg1) {
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPolygoni_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  bool result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = (bool)((papillon::PPolygoni const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PPolygoni_Size(void * jarg1) {
  int jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = (papillon::int32)((papillon::PPolygoni const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_GetPoint(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PPolygoni const *)arg1)->GetPoint(arg2);
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_GetFirstPoint(void * jarg1) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = ((papillon::PPolygoni const *)arg1)->GetFirstPoint();
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_GetLastPoint(void * jarg1) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = ((papillon::PPolygoni const *)arg1)->GetLastPoint();
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_GetBoundingRectangle(void * jarg1) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = ((papillon::PPolygoni const *)arg1)->GetBoundingRectangle();
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_GetConvexHull(void * jarg1) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPolygoni result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  result = ((papillon::PPolygoni const *)arg1)->GetConvexHull();
  jresult = new papillon::PPolygoni((const papillon::PPolygoni &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PPolygoni_SetPoint(void * jarg1, int jarg2, void * jarg3) {
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::int32 arg2 ;
  papillon::PPoint2Di *arg3 = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return ;
  } 
  (arg1)->SetPoint(arg2,(papillon::PPoint2Di const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_AddPoint__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (papillon::PPolygoni *) &(arg1)->AddPoint(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_AddPoint__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PPolygoni *) &(arg1)->AddPoint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_AddPoint__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPoint2Di *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::PPoint2Di *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PPolygoni *) &(arg1)->AddPoint((papillon::PPoint2Di const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_AddPoint__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPoint2Di *arg2 = 0 ;
  papillon::PPolygoni *result = 0 ;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::PPoint2Di *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  result = (papillon::PPolygoni *) &(arg1)->AddPoint((papillon::PPoint2Di const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_Intersected(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPolygoni *arg2 = 0 ;
  papillon::PPolygoni result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::PPolygoni *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygoni const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPolygoni const *)arg1)->Intersected((papillon::PPolygoni const &)*arg2);
  jresult = new papillon::PPolygoni((const papillon::PPolygoni &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPolygoni_United(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PPolygoni *arg1 = (papillon::PPolygoni *) 0 ;
  papillon::PPolygoni *arg2 = 0 ;
  papillon::PPolygoni result;
  
  arg1 = (papillon::PPolygoni *)jarg1; 
  arg2 = (papillon::PPolygoni *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygoni const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PPolygoni const *)arg1)->United((papillon::PPolygoni const &)*arg2);
  jresult = new papillon::PPolygoni((const papillon::PPolygoni &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Empty() {
  void * jresult ;
  papillon::PProperties *result = 0 ;
  
  result = (papillon::PProperties *) &papillon::PProperties::Empty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PProperties__SWIG_0() {
  void * jresult ;
  papillon::PProperties *result = 0 ;
  
  result = (papillon::PProperties *)new papillon::PProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PProperties__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PProperties *arg1 = 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  result = (papillon::PProperties *)new papillon::PProperties((papillon::PProperties const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_CreateFromKeyValueString(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PProperties::CreateFromKeyValueString((papillon::PString const &)*arg1);
  jresult = new papillon::PProperties((const papillon::PProperties &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (char *)jarg3; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool arg3 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = jarg3 ? true : false; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_4(void * jarg1, char * jarg2, long long jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int64 arg3 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int64)jarg3; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_5(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PProperties_Set__SWIG_6(void * jarg1, char * jarg2, double jarg3) {
  void * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  double arg3 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double)jarg3; 
  result = (papillon::PProperties *) &(arg1)->Set((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PProperties_GetBool__SWIG_0(void * jarg1, char * jarg2, unsigned int * jarg3) {
  unsigned int jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = (bool)((papillon::PProperties const *)arg1)->GetBool((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PProperties_GetBool__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PProperties const *)arg1)->GetBool((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PProperties_GetInt32__SWIG_0(void * jarg1, char * jarg2, unsigned int * jarg3) {
  int jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = (papillon::int32)((papillon::PProperties const *)arg1)->GetInt32((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PProperties_GetInt32__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)((papillon::PProperties const *)arg1)->GetInt32((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PProperties_GetInt64__SWIG_0(void * jarg1, char * jarg2, unsigned int * jarg3) {
  long long jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = (papillon::int64)((papillon::PProperties const *)arg1)->GetInt64((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PProperties_GetInt64__SWIG_1(void * jarg1, char * jarg2) {
  long long jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int64)((papillon::PProperties const *)arg1)->GetInt64((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PProperties_GetFloat__SWIG_0(void * jarg1, char * jarg2, unsigned int * jarg3) {
  float jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  float result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = (float)((papillon::PProperties const *)arg1)->GetFloat((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PProperties_GetFloat__SWIG_1(void * jarg1, char * jarg2) {
  float jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (float)((papillon::PProperties const *)arg1)->GetFloat((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PProperties_GetDouble__SWIG_0(void * jarg1, char * jarg2, unsigned int * jarg3) {
  double jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  double result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (bool *)jarg3; 
  result = (double)((papillon::PProperties const *)arg1)->GetDouble((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PProperties_GetDouble__SWIG_1(void * jarg1, char * jarg2) {
  double jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  double result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (double)((papillon::PProperties const *)arg1)->GetDouble((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PProperties_GetAsString(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PProperties const *)arg1)->GetAsString((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PProperties_RemoveByRegexp(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)(arg1)->RemoveByRegexp((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PProperties_ToStringLog(void * jarg1) {
  char * jresult ;
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PProperties *)jarg1; 
  result = ((papillon::PProperties const *)arg1)->ToStringLog();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PProperties(void * jarg1) {
  papillon::PProperties *arg1 = (papillon::PProperties *) 0 ;
  
  arg1 = (papillon::PProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Bad() {
  void * jresult ;
  papillon::PRectanglef *result = 0 ;
  
  result = (papillon::PRectanglef *) &papillon::PRectanglef::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (papillon::PRectanglef *)new papillon::PRectanglef(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (papillon::PRectanglef *)new papillon::PRectanglef(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (papillon::PRectanglef *)new papillon::PRectanglef(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (papillon::PRectanglef *)new papillon::PRectanglef(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_4() {
  void * jresult ;
  papillon::PRectanglef *result = 0 ;
  
  result = (papillon::PRectanglef *)new papillon::PRectanglef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglef__SWIG_5(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = 0 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (papillon::PRectanglef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  result = (papillon::PRectanglef *)new papillon::PRectanglef((papillon::PRectanglef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PRectanglef(void * jarg1) {
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PRectanglef_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  bool result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (bool)((papillon::PRectanglef const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetX(void * jarg1) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (float)((papillon::PRectanglef const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetY(void * jarg1) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (float)((papillon::PRectanglef const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetWidth(void * jarg1) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (float)((papillon::PRectanglef const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetHeight(void * jarg1) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (float)((papillon::PRectanglef const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_GetOrigin(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = ((papillon::PRectanglef const *)arg1)->GetOrigin();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_GetSize(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PSizef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = ((papillon::PRectanglef const *)arg1)->GetSize();
  jresult = new papillon::PSizef((const papillon::PSizef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_GetCentre(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = ((papillon::PRectanglef const *)arg1)->GetCentre();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetArea(void * jarg1) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = (float)((papillon::PRectanglef const *)arg1)->GetArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetOverlapArea(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PRectanglef *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PRectanglef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PRectanglef const *)arg1)->GetOverlapArea((papillon::PRectanglef const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglef_GetDiceCoefficient(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PRectanglef *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PRectanglef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PRectanglef const *)arg1)->GetDiceCoefficient((papillon::PRectanglef const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PRectanglef_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PRectanglef const *)arg1)->Contains((papillon::PPoint2Df const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Expand(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float arg2 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PRectanglef const *)arg1)->Expand(arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Scaled__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float arg2 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PRectanglef const *)arg1)->Scaled(arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Scaled__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((papillon::PRectanglef const *)arg1)->Scaled(arg2,arg3);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Scaled__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PSizef *arg2 = 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PSizef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizef const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglef const *)arg1)->Scaled((papillon::PSizef const &)*arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Scaled__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglef const *)arg1)->Scaled((papillon::PSizei const &)*arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Normalized__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((papillon::PRectanglef const *)arg1)->Normalized(arg2,arg3);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Normalized__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PSizef *arg2 = 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PSizef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizef const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglef const *)arg1)->Normalized((papillon::PSizef const &)*arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Normalized__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglef const *)arg1)->Normalized((papillon::PSizei const &)*arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Translated__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((papillon::PRectanglef const *)arg1)->Translated(arg2,arg3);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_Translated__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglef const *)arg1)->Translated((papillon::PPoint2Df const &)*arg2);
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglef_ToPRectanglei(void * jarg1) {
  void * jresult ;
  papillon::PRectanglef *arg1 = (papillon::PRectanglef *) 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PRectanglef *)jarg1; 
  result = ((papillon::PRectanglef const *)arg1)->ToPRectanglei();
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PRectanglei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (papillon::PRectanglei *)new papillon::PRectanglei(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PRectanglei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PRectanglei *)new papillon::PRectanglei(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PRectanglei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PRectanglei *)new papillon::PRectanglei(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_3(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PRectanglei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PRectanglei *)new papillon::PRectanglei(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_4() {
  void * jresult ;
  papillon::PRectanglei *result = 0 ;
  
  result = (papillon::PRectanglei *)new papillon::PRectanglei();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PRectanglei__SWIG_5(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = 0 ;
  papillon::PRectanglei *result = 0 ;
  
  arg1 = (papillon::PRectanglei *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (papillon::PRectanglei *)new papillon::PRectanglei((papillon::PRectanglei const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PRectanglei(void * jarg1) {
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PRectanglei_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  bool result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (bool)((papillon::PRectanglei const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRectanglei_GetX(void * jarg1) {
  int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (papillon::int32)((papillon::PRectanglei const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRectanglei_GetY(void * jarg1) {
  int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (papillon::int32)((papillon::PRectanglei const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRectanglei_GetWidth(void * jarg1) {
  int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (papillon::int32)((papillon::PRectanglei const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRectanglei_GetHeight(void * jarg1) {
  int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (papillon::int32)((papillon::PRectanglei const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_GetOrigin(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PPoint2Di result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = ((papillon::PRectanglei const *)arg1)->GetOrigin();
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_GetOriginf(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = ((papillon::PRectanglei const *)arg1)->GetOriginf();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_GetSize(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = ((papillon::PRectanglei const *)arg1)->GetSize();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_GetCentre(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = ((papillon::PRectanglei const *)arg1)->GetCentre();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRectanglei_GetArea(void * jarg1) {
  int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = (papillon::int32)((papillon::PRectanglei const *)arg1)->GetArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_ClipBy(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PRectanglei const *)arg1)->ClipBy((papillon::PRectanglei const &)*arg2);
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_Expand(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::int32 arg2 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PRectanglei const *)arg1)->Expand(arg2);
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglei_GetOverlapArea(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PRectanglei const *)arg1)->GetOverlapArea((papillon::PRectanglei const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PRectanglei_GetDiceCoefficient(void * jarg1, void * jarg2) {
  float jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  float result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (float)((papillon::PRectanglei const *)arg1)->GetDiceCoefficient((papillon::PRectanglei const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PRectanglei_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PPoint2Di *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  arg2 = (papillon::PPoint2Di *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PRectanglei const *)arg1)->Contains((papillon::PPoint2Di const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_ToPRectanglef(void * jarg1) {
  void * jresult ;
  papillon::PRectanglei *arg1 = (papillon::PRectanglei *) 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PRectanglei *)jarg1; 
  result = ((papillon::PRectanglei const *)arg1)->ToPRectanglef();
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PRectanglei_FromString(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei & type is null", 0);
    return 0;
  } 
  result = papillon::PRectanglei::FromString((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_OK_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_OK;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_FALSE_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_FALSE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_UNKNOWN_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_UNKNOWN;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_NULL_OBJECT_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_NULL_OBJECT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_NOT_YET_IMPLEMENTED_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_NOT_YET_IMPLEMENTED;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_NOT_SUPPORTED_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_NOT_SUPPORTED;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_NO_PRIVATE_IMPLEMENTATION_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_NO_PRIVATE_IMPLEMENTATION;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_C_ERROR_SERIALISATION_NOT_SUPPORTED_get() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)&papillon::PResult::C_ERROR_SERIALISATION_NOT_SUPPORTED;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PResult__SWIG_0() {
  void * jresult ;
  papillon::PResult *result = 0 ;
  
  result = (papillon::PResult *)new papillon::PResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PResult__SWIG_1(int jarg1) {
  void * jresult ;
  papillon::PResult::EReturnCode arg1 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult::EReturnCode)jarg1; 
  result = (papillon::PResult *)new papillon::PResult(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PResult__SWIG_2(int jarg1, char * jarg2) {
  void * jresult ;
  papillon::PResult::EReturnCode arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult::EReturnCode)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PResult *)new papillon::PResult(arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PResult__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PResult *arg1 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PResult const & type is null", 0);
    return 0;
  } 
  result = (papillon::PResult *)new papillon::PResult((papillon::PResult const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Error(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::Error((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorBadCast(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  papillon::classid arg1 ;
  papillon::classid arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::classid)jarg1; 
  arg2 = (papillon::classid)jarg2; 
  result = papillon::PResult::ErrorBadCast(arg1,arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorNullPointer(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorNullPointer((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorSerialisation() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorSerialisation();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorSerialization() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorSerialization();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorSerialisationUnsupportedFormat(int jarg1) {
  void * jresult ;
  papillon::ESerialisationFormat arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::ESerialisationFormat)jarg1; 
  result = papillon::PResult::ErrorSerialisationUnsupportedFormat(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorSerializationUnsupportedFormat(int jarg1) {
  void * jresult ;
  papillon::ESerialisationFormat arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::ESerialisationFormat)jarg1; 
  result = papillon::PResult::ErrorSerializationUnsupportedFormat(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserialisationReadFailed() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorDeserialisationReadFailed();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserializationReadFailed() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorDeserializationReadFailed();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserialisationBadClassId() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorDeserialisationBadClassId();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserializationBadClassId() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PResult::ErrorDeserializationBadClassId();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserialisationUnsupportedFormat(int jarg1) {
  void * jresult ;
  papillon::ESerialisationFormat arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::ESerialisationFormat)jarg1; 
  result = papillon::PResult::ErrorDeserialisationUnsupportedFormat(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorDeserializationUnsupportedFormat(int jarg1) {
  void * jresult ;
  papillon::ESerialisationFormat arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::ESerialisationFormat)jarg1; 
  result = papillon::PResult::ErrorDeserializationUnsupportedFormat(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorBadArgument(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorBadArgument((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorInvalidState(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorInvalidState((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorUnhandledCase(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorUnhandledCase((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorFileNotFound(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorFileNotFound((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorEndOfFile(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorEndOfFile((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorOpenFileForWriting(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorOpenFileForWriting((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorOpenFileForReading(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorOpenFileForReading((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorBadPluginParameters(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorBadPluginParameters((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorFailedToCheckOutLicense(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PResult::ErrorFailedToCheckOutLicense((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorBadURIFormat(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorBadURIFormat((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorEndOfStream(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorEndOfStream((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorStreamNotFound(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorStreamNotFound((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorServerDown(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorServerDown((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorStreamNotAvailable(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorStreamNotAvailable((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorStreamClosed(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorStreamClosed((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorStreamInvalidated(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorStreamInvalidated((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorStreamKicked(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorStreamKicked((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_ErrorTimeout(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PResult::ErrorTimeout((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PResult(void * jarg1) {
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PResult_GetCode(void * jarg1) {
  int jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PResult::EReturnCode result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (papillon::PResult::EReturnCode)((papillon::PResult const *)arg1)->GetCode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PResult_GetErrorMessage(void * jarg1) {
  char * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = ((papillon::PResult const *)arg1)->GetErrorMessage();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Push(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PResult *arg2 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::PResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PResult const & type is null", 0);
    return 0;
  } 
  result = (papillon::PResult *) &(arg1)->Push((papillon::PResult const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Pop(void * jarg1) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (papillon::PResult *) &(arg1)->Pop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_PrependErrorMessage(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PResult *) &(arg1)->PrependErrorMessage((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PResult_Ok(void * jarg1) {
  unsigned int jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  bool result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (bool)((papillon::PResult const *)arg1)->Ok();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PResult_Failed(void * jarg1) {
  unsigned int jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  bool result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (bool)((papillon::PResult const *)arg1)->Failed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PResult_IsFalse(void * jarg1) {
  unsigned int jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  bool result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (bool)((papillon::PResult const *)arg1)->IsFalse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny((papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny((papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny2__SWIG_0(void * jarg1, int jarg2, char * jarg3, char * jarg4, int jarg5, char * jarg6) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::int32 arg5 ;
  papillon::PString *arg6 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::int32)jarg5; 
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny2(arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,arg5,(papillon::PString const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny2__SWIG_1(void * jarg1, int jarg2, char * jarg3, char * jarg4, int jarg5) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::int32 arg5 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::int32)jarg5; 
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny2(arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny2__SWIG_2(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny2(arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_LogErrorIfAny2__SWIG_3(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult *result = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (papillon::PResult *) &(arg1)->LogErrorIfAny2(arg2,(papillon::PString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PResult_OrDie__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  ((papillon::PResult const *)arg1)->OrDie((papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PResult_OrDie__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  ((papillon::PResult const *)arg1)->OrDie((papillon::PString const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PResult_OrDie__SWIG_2(void * jarg1, char * jarg2) {
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  ((papillon::PResult const *)arg1)->OrDie((papillon::PString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PResult_OrDie__SWIG_3(void * jarg1) {
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  
  arg1 = (papillon::PResult *)jarg1; 
  ((papillon::PResult const *)arg1)->OrDie();
}


SWIGEXPORT int SWIGSTDCALL CSharp_PResult_Size(void * jarg1) {
  int jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = (papillon::int32)((papillon::PResult const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Write__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = ((papillon::PResult const *)arg1)->Write(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Write__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  result = ((papillon::PResult const *)arg1)->Write(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Read__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = (arg1)->Read(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PResult_Read__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PByteStream *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PResult *)jarg1; 
  arg2 = (papillon::PByteStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteStream & type is null", 0);
    return 0;
  } 
  result = (arg1)->Read(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PResult_ToString(void * jarg1) {
  char * jresult ;
  papillon::PResult *arg1 = (papillon::PResult *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PResult *)jarg1; 
  result = ((papillon::PResult const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_Zero() {
  void * jresult ;
  papillon::PSizef *result = 0 ;
  
  result = (papillon::PSizef *) &papillon::PSizef::Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_Bad() {
  void * jresult ;
  papillon::PSizef *result = 0 ;
  
  result = (papillon::PSizef *) &papillon::PSizef::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizef__SWIG_0() {
  void * jresult ;
  papillon::PSizef *result = 0 ;
  
  result = (papillon::PSizef *)new papillon::PSizef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizef__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  papillon::PSizef *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (papillon::PSizef *)new papillon::PSizef(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizef__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  papillon::PSizef *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (papillon::PSizef *)new papillon::PSizef(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizef__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PSizef *arg1 = 0 ;
  papillon::PSizef *result = 0 ;
  
  arg1 = (papillon::PSizef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizef const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSizef *)new papillon::PSizef((papillon::PSizef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSizef(void * jarg1) {
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  
  arg1 = (papillon::PSizef *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSizef_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  bool result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  result = (bool)((papillon::PSizef const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PSizef_GetWidth(void * jarg1) {
  float jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  float result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  result = (float)((papillon::PSizef const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PSizef_GetHeight(void * jarg1) {
  float jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  float result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  result = (float)((papillon::PSizef const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_Scaled(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  float arg2 ;
  papillon::PSizef result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PSizef const *)arg1)->Scaled(arg2);
  jresult = new papillon::PSizef((const papillon::PSizef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_Clamped(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  float arg2 ;
  float arg3 ;
  papillon::PSizef result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (arg1)->Clamped(arg2,arg3);
  jresult = new papillon::PSizef((const papillon::PSizef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_ToSizei(void * jarg1) {
  void * jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  result = ((papillon::PSizef const *)arg1)->ToSizei();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizef_FromString(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PSizef *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PSizef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizef & type is null", 0);
    return 0;
  } 
  result = papillon::PSizef::FromString((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSizef_ToStringShort(void * jarg1) {
  char * jresult ;
  papillon::PSizef *arg1 = (papillon::PSizef *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PSizef *)jarg1; 
  result = ((papillon::PSizef const *)arg1)->ToStringShort();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizei_Zero() {
  void * jresult ;
  papillon::PSizei *result = 0 ;
  
  result = (papillon::PSizei *) &papillon::PSizei::Zero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizei__SWIG_0() {
  void * jresult ;
  papillon::PSizei *result = 0 ;
  
  result = (papillon::PSizei *)new papillon::PSizei();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizei__SWIG_1(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PSizei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PSizei *)new papillon::PSizei(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizei__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PSizei *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PSizei *)new papillon::PSizei(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSizei__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PSizei *arg1 = 0 ;
  papillon::PSizei *result = 0 ;
  
  arg1 = (papillon::PSizei *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSizei *)new papillon::PSizei((papillon::PSizei const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSizei(void * jarg1) {
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  
  arg1 = (papillon::PSizei *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSizei_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  bool result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = (bool)((papillon::PSizei const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSizei_IsZero(void * jarg1) {
  unsigned int jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  bool result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = (bool)((papillon::PSizei const *)arg1)->IsZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSizei_GetWidth(void * jarg1) {
  int jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = (papillon::int32)((papillon::PSizei const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSizei_GetHeight(void * jarg1) {
  int jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = (papillon::int32)((papillon::PSizei const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizei_Scaled(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  float arg2 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PSizei const *)arg1)->Scaled(arg2);
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizei_Clamped(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Clamped(arg2,arg3);
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizei_ToSizef(void * jarg1) {
  void * jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  papillon::PSizef result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = ((papillon::PSizei const *)arg1)->ToSizef();
  jresult = new papillon::PSizef((const papillon::PSizef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSizei_FromString(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei & type is null", 0);
    return 0;
  } 
  result = papillon::PSizei::FromString((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSizei_ToStringShort(void * jarg1) {
  char * jresult ;
  papillon::PSizei *arg1 = (papillon::PSizei *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PSizei *)jarg1; 
  result = ((papillon::PSizei const *)arg1)->ToStringShort();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSocket__SWIG_0() {
  void * jresult ;
  papillon::PSocket *result = 0 ;
  
  result = (papillon::PSocket *)new papillon::PSocket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Open__SWIG_0(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PSocket *arg1 = 0 ;
  papillon::PSocket::ESocketType arg2 ;
  papillon::PSocket::ESocketBinding arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSocket & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PSocket::ESocketType)jarg2; 
  arg3 = (papillon::PSocket::ESocketBinding)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = papillon::PSocket::Open(*arg1,arg2,arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Open__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PSocket *arg1 = 0 ;
  papillon::PSocket::ESocketType arg2 ;
  papillon::PSocket::ESocketBinding arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSocket & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PSocket::ESocketType)jarg2; 
  arg3 = (papillon::PSocket::ESocketBinding)jarg3; 
  result = papillon::PSocket::Open(*arg1,arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Open__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = 0 ;
  papillon::PSocket::ESocketType arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSocket & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PSocket::ESocketType)jarg2; 
  result = papillon::PSocket::Open(*arg1,arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSocket__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PSocket *arg1 = 0 ;
  papillon::PSocket *result = 0 ;
  
  arg1 = (papillon::PSocket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSocket const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSocket *)new papillon::PSocket((papillon::PSocket const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSocket(void * jarg1) {
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  
  arg1 = (papillon::PSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSocket_IsOpened(void * jarg1) {
  unsigned int jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  bool result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  result = (bool)((papillon::PSocket const *)arg1)->IsOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Bind(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Bind((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Connnect(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Connnect((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_SetLingerPeriod(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->SetLingerPeriod(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Subscribe__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Subscribe((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Subscribe__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  result = (arg1)->Subscribe();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Unsubscribe(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Unsubscribe((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Close(void * jarg1) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  result = (arg1)->Close();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (arg1)->Send((papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Send((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (arg1)->Send((papillon::PByteArray const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Send((papillon::PByteArray const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_4(void * jarg1, void * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (arg1)->Send((void const *)arg2,arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Send__SWIG_5(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Send((void const *)arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Receive__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  result = (arg1)->Receive(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Receive__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  result = (arg1)->Receive(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_Receive__SWIG_2(void * jarg1, void * jarg2, int jarg3, int * jarg4) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::int32 *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32 *)jarg4; 
  result = (arg1)->Receive(arg2,arg3,*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_IsPendingIncomingMessage__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PSocket const *)arg1)->IsPendingIncomingMessage(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_IsPendingIncomingMessage__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  result = ((papillon::PSocket const *)arg1)->IsPendingIncomingMessage();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_IsPendingOutgoingMessage__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PSocket const *)arg1)->IsPendingOutgoingMessage(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_IsPendingOutgoingMessage__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  result = ((papillon::PSocket const *)arg1)->IsPendingOutgoingMessage();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_GetBoundPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  result = ((papillon::PSocket const *)arg1)->GetBoundPoint(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_GetBoundAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::PString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  result = ((papillon::PSocket const *)arg1)->GetBoundAddress(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSocket_GetBoundPort(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PSocket *arg1 = (papillon::PSocket *) 0 ;
  papillon::uint32 *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSocket *)jarg1; 
  arg2 = (papillon::uint32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::uint32 & type is null", 0);
    return 0;
  } 
  result = ((papillon::PSocket const *)arg1)->GetBoundPort(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_Bad() {
  void * jresult ;
  papillon::PDateTime *result = 0 ;
  
  result = (papillon::PDateTime *) &papillon::PDateTime::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDateTime__SWIG_0() {
  void * jresult ;
  papillon::PDateTime *result = 0 ;
  
  result = (papillon::PDateTime *)new papillon::PDateTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDateTime__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PDate *arg1 = 0 ;
  papillon::PTime *arg2 = 0 ;
  papillon::PDateTime::EDateTimeZone arg3 ;
  papillon::PDateTime *result = 0 ;
  
  arg1 = (papillon::PDate *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDate const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTime const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDateTime::EDateTimeZone)jarg3; 
  result = (papillon::PDateTime *)new papillon::PDateTime((papillon::PDate const &)*arg1,(papillon::PTime const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDateTime__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDate *arg1 = 0 ;
  papillon::PTime *arg2 = 0 ;
  papillon::PDateTime *result = 0 ;
  
  arg1 = (papillon::PDate *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDate const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDateTime *)new papillon::PDateTime((papillon::PDate const &)*arg1,(papillon::PTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDateTime__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PDateTime *arg1 = 0 ;
  papillon::PDateTime *result = 0 ;
  
  arg1 = (papillon::PDateTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDateTime *)new papillon::PDateTime((papillon::PDateTime const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDateTime__SWIG_4(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDateTime *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PDateTime *)new papillon::PDateTime((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDateTime(void * jarg1) {
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_ToLocalTime(void * jarg1) {
  void * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->ToLocalTime();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_ToUTC(void * jarg1) {
  void * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->ToUTC();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_Current() {
  void * jresult ;
  papillon::PDateTime result;
  
  result = papillon::PDateTime::Current();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_CurrentUTC() {
  void * jresult ;
  papillon::PDateTime result;
  
  result = papillon::PDateTime::CurrentUTC();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_GetDate(void * jarg1) {
  void * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PDate result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->GetDate();
  jresult = new papillon::PDate((const papillon::PDate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_GetTime(void * jarg1) {
  void * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PTime result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->GetTime();
  jresult = new papillon::PTime((const papillon::PTime &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDateTime_GetOffsetFromUTCInSeconds(void * jarg1) {
  int jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = (papillon::int32)(arg1)->GetOffsetFromUTCInSeconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDateTime_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  bool result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = (bool)((papillon::PDateTime const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_AddMillisecond(void * jarg1, long long jarg2) {
  void * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::int64 arg2 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  result = ((papillon::PDateTime const *)arg1)->AddMillisecond(arg2);
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PDateTime_GetMillisecondsTo(void * jarg1, void * jarg2) {
  long long jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::int64)((papillon::PDateTime const *)arg1)->GetMillisecondsTo((papillon::PDateTime const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDateTime_FromMillisecondsSinceEpoch(long long jarg1) {
  void * jresult ;
  papillon::int64 arg1 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::int64)jarg1; 
  result = papillon::PDateTime::FromMillisecondsSinceEpoch(arg1);
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PDateTime_ToMillisecondsSinceEpoch(void * jarg1) {
  long long jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = (papillon::int64)((papillon::PDateTime const *)arg1)->ToMillisecondsSinceEpoch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDateTime_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PDateTime const *)arg1)->Compare((papillon::PDateTime const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDateTime_ToString__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PDateTime const *)arg1)->ToString((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDateTime_ToString__SWIG_1(void * jarg1) {
  char * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDateTime_ToStringISO(void * jarg1) {
  char * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->ToStringISO();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDateTime_ToStringISOWithMs(void * jarg1) {
  char * jresult ;
  papillon::PDateTime *arg1 = (papillon::PDateTime *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDateTime *)jarg1; 
  result = ((papillon::PDateTime const *)arg1)->ToStringISOWithMs();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDate__SWIG_0() {
  void * jresult ;
  papillon::PDate *result = 0 ;
  
  result = (papillon::PDate *)new papillon::PDate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDate__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PDate *arg1 = 0 ;
  papillon::PDate *result = 0 ;
  
  arg1 = (papillon::PDate *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDate const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDate *)new papillon::PDate((papillon::PDate const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDate__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PDate *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PDate *)new papillon::PDate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDate__SWIG_3(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDate *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PDate *)new papillon::PDate((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDate(void * jarg1) {
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  
  arg1 = (papillon::PDate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDate_Current() {
  void * jresult ;
  papillon::PDate result;
  
  result = papillon::PDate::Current();
  jresult = new papillon::PDate((const papillon::PDate &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDate_GetDay(void * jarg1) {
  int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = (papillon::int32)((papillon::PDate const *)arg1)->GetDay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDate_GetMonth(void * jarg1) {
  int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = (papillon::int32)((papillon::PDate const *)arg1)->GetMonth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDate_GetYear(void * jarg1) {
  int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = (papillon::int32)((papillon::PDate const *)arg1)->GetYear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDate_GetDate(void * jarg1, int * jarg2, int * jarg3, int * jarg4) {
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 *arg2 = (papillon::int32 *) 0 ;
  papillon::int32 *arg3 = (papillon::int32 *) 0 ;
  papillon::int32 *arg4 = (papillon::int32 *) 0 ;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::int32 *)jarg2; 
  arg3 = (papillon::int32 *)jarg3; 
  arg4 = (papillon::int32 *)jarg4; 
  (arg1)->GetDate(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDate_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  bool result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = (bool)((papillon::PDate const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDate_AddDays(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 arg2 ;
  papillon::PDate result;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PDate const *)arg1)->AddDays(arg2);
  jresult = new papillon::PDate((const papillon::PDate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDate_AddMonths(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 arg2 ;
  papillon::PDate result;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PDate const *)arg1)->AddMonths(arg2);
  jresult = new papillon::PDate((const papillon::PDate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDate_AddYears(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::int32 arg2 ;
  papillon::PDate result;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PDate const *)arg1)->AddYears(arg2);
  jresult = new papillon::PDate((const papillon::PDate &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDate_GetDaysTo(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::PDate *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::PDate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDate const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PDate const *)arg1)->GetDaysTo((papillon::PDate const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDate_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::PDate *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDate *)jarg1; 
  arg2 = (papillon::PDate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDate const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PDate const *)arg1)->Compare((papillon::PDate const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDate_ToString__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDate *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PDate const *)arg1)->ToString((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDate_ToString__SWIG_1(void * jarg1) {
  char * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = ((papillon::PDate const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDate_ToStringISO(void * jarg1) {
  char * jresult ;
  papillon::PDate *arg1 = (papillon::PDate *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDate *)jarg1; 
  result = ((papillon::PDate const *)arg1)->ToStringISO();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDescriberInterface(void * jarg1) {
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriberInterface_GetObjectType(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PObjectType *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriberInterface const *)arg1)->GetObjectType(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriberInterface_GetDescribeId(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriberInterface const *)arg1)->GetDescribeId(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriberInterface_GetModelName(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  arg2 = (papillon::PString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriberInterface const *)arg1)->GetModelName(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriberInterface_Apply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PExampleSet *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  arg2 = (papillon::PExampleSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PExampleSet const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = (arg1)->Apply((papillon::PExampleSet const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriberInterface_ApplyBatch(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PDescriptionList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescriptionList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptionList & type is null", 0);
    return 0;
  } 
  result = (arg1)->ApplyBatch((papillon::PDetectionList const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDescriberInterface_ToString(void * jarg1) {
  char * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  result = ((papillon::PDescriberInterface const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_C_PARAM_INT_VALID_POINTS_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDescriber::C_PARAM_INT_VALID_POINTS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_C_PARAM_FLOAT_POINT_THRESHOLD_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDescriber::C_PARAM_FLOAT_POINT_THRESHOLD;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_C_PARAM_FLOAT_FACE_THRESHOLD_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDescriber::C_PARAM_FLOAT_FACE_THRESHOLD;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_C_PARAM_INT_MEAN_FACE_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDescriber::C_PARAM_INT_MEAN_FACE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_C_PARAM_BOOL_DESCRIPTOR_THUMBNAIL_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDescriber::C_PARAM_BOOL_DESCRIPTOR_THUMBNAIL;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_Create__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PDescriber *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescriber *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber & type is null", 0);
    return 0;
  } 
  result = papillon::PDescriber::Create((papillon::PString const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PDescriber *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescriber *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber & type is null", 0);
    return 0;
  } 
  result = papillon::PDescriber::Create((papillon::PPlugin const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriber__SWIG_0() {
  void * jresult ;
  papillon::PDescriber *result = 0 ;
  
  result = (papillon::PDescriber *)new papillon::PDescriber();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriber__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PDescriberInterface *arg1 = (papillon::PDescriberInterface *) 0 ;
  papillon::PDescriber *result = 0 ;
  
  arg1 = (papillon::PDescriberInterface *)jarg1; 
  result = (papillon::PDescriber *)new papillon::PDescriber(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriber__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PDescriber *arg1 = 0 ;
  papillon::PDescriber *result = 0 ;
  
  arg1 = (papillon::PDescriber *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescriber *)new papillon::PDescriber((papillon::PDescriber const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDescriber(void * jarg1) {
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_GetObjectType(void * jarg1) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PObjectType result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  result = ((papillon::PDescriber const *)arg1)->GetObjectType();
  jresult = new papillon::PObjectType((const papillon::PObjectType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_GetDescribeId(void * jarg1) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  result = ((papillon::PDescriber const *)arg1)->GetDescribeId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDescriber_GetModelName(void * jarg1) {
  char * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  result = ((papillon::PDescriber const *)arg1)->GetModelName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_Describe__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PExampleSet *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  arg2 = (papillon::PExampleSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PExampleSet const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriber const *)arg1)->Describe((papillon::PExampleSet const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_Describe__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PGuid *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PGuid *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriber const *)arg1)->Describe((papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PGuid const &)*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_Describe__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriber const *)arg1)->Describe((papillon::PDetection const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriber_DescribeBatch(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDescriber *arg1 = (papillon::PDescriber *) 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PDescriptionList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriber *)jarg1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescriptionList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptionList & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriber const *)arg1)->DescribeBatch((papillon::PDetectionList const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PObjectType__SWIG_0() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)new papillon::PObjectType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_FromString(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PObjectType *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PObjectType *) &papillon::PObjectType::FromString((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PObjectType__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PObjectType *arg1 = 0 ;
  papillon::PObjectType *result = 0 ;
  
  arg1 = (papillon::PObjectType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  result = (papillon::PObjectType *)new papillon::PObjectType((papillon::PObjectType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PObjectType(void * jarg1) {
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PObjectType_GetType(void * jarg1) {
  int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  papillon::PObjectType::EObjectType result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (papillon::PObjectType::EObjectType)((papillon::PObjectType const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObjectType_IsUnknown(void * jarg1) {
  unsigned int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  bool result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (bool)((papillon::PObjectType const *)arg1)->IsUnknown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObjectType_IsFace(void * jarg1) {
  unsigned int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  bool result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (bool)((papillon::PObjectType const *)arg1)->IsFace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObjectType_IsPerson(void * jarg1) {
  unsigned int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  bool result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (bool)((papillon::PObjectType const *)arg1)->IsPerson();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObjectType_IsMotion(void * jarg1) {
  unsigned int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  bool result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (bool)((papillon::PObjectType const *)arg1)->IsMotion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PObjectType_IsFaceMetaData(void * jarg1) {
  unsigned int jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  bool result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = (bool)((papillon::PObjectType const *)arg1)->IsFaceMetaData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PObjectType_GetName(void * jarg1) {
  char * jresult ;
  papillon::PObjectType *arg1 = (papillon::PObjectType *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PObjectType *)jarg1; 
  result = ((papillon::PObjectType const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_UNKNOWN_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_UNKNOWN;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_FACE_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_FACE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_FACE_META_DATA_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_FACE_META_DATA;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_PERSON_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_PERSON;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_MOTION_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_MOTION;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PObjectType_C_OTHER_get() {
  void * jresult ;
  papillon::PObjectType *result = 0 ;
  
  result = (papillon::PObjectType *)&papillon::PObjectType::C_OTHER;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PGuid_UndefinedPartId() {
  unsigned long long jresult ;
  papillon::uint64 result;
  
  result = (papillon::uint64)papillon::PGuid::UndefinedPartId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_Null() {
  void * jresult ;
  papillon::PGuid *result = 0 ;
  
  result = (papillon::PGuid *) &papillon::PGuid::Null();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_Undefined() {
  void * jresult ;
  papillon::PGuid *result = 0 ;
  
  result = (papillon::PGuid *) &papillon::PGuid::Undefined();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_Invalid() {
  void * jresult ;
  papillon::PGuid *result = 0 ;
  
  result = (papillon::PGuid *) &papillon::PGuid::Invalid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGuid__SWIG_0() {
  void * jresult ;
  papillon::PGuid *result = 0 ;
  
  result = (papillon::PGuid *)new papillon::PGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGuid__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PGuid *)new papillon::PGuid((papillon::PGuid const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGuid__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (papillon::PGuid *)new papillon::PGuid((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGuid__SWIG_4(unsigned char * jarg1) {
  void * jresult ;
  papillon::uint8 *arg1 ;
  papillon::PGuid *result = 0 ;
  
  arg1
  = jarg1; 
  result = (papillon::PGuid *)new papillon::PGuid((papillon::uint8 const (*))arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGuid__SWIG_5(unsigned long long jarg1, unsigned long long jarg2) {
  void * jresult ;
  papillon::uint64 arg1 ;
  papillon::uint64 arg2 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::uint64)jarg1; 
  arg2 = (papillon::uint64)jarg2; 
  result = (papillon::PGuid *)new papillon::PGuid(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PGuid(void * jarg1) {
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  
  arg1 = (papillon::PGuid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_CreateUniqueId() {
  void * jresult ;
  papillon::PGuid result;
  
  result = papillon::PGuid::CreateUniqueId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_CreateEntityId__SWIG_0(unsigned long long jarg1) {
  void * jresult ;
  papillon::uint64 arg1 ;
  papillon::PGuid result;
  
  arg1 = (papillon::uint64)jarg1; 
  result = papillon::PGuid::CreateEntityId(arg1);
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_CreateEntityId__SWIG_1() {
  void * jresult ;
  papillon::PGuid result;
  
  result = papillon::PGuid::CreateEntityId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGuid_CreateFromMD5(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PGuid result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PGuid::CreateFromMD5((papillon::PString const &)*arg1);
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsNull(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsUndefined(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsUndefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsInvalid(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsInvalid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsNullStoreId(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsNullStoreId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsUndefinedStoreId(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsUndefinedStoreId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PGuid_GetStoreId(void * jarg1) {
  unsigned long long jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (papillon::uint64)((papillon::PGuid const *)arg1)->GetStoreId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsNullObjectId(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsNullObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGuid_IsUndefinedObjectId(void * jarg1) {
  unsigned int jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  bool result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (bool)((papillon::PGuid const *)arg1)->IsUndefinedObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PGuid_GetObjectId(void * jarg1) {
  unsigned long long jresult ;
  papillon::PGuid *arg1 = (papillon::PGuid *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PGuid *)jarg1; 
  result = (papillon::uint64)((papillon::PGuid const *)arg1)->GetObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescription__SWIG_0() {
  void * jresult ;
  papillon::PDescription *result = 0 ;
  
  result = (papillon::PDescription *)new papillon::PDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescription__SWIG_1(char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PObjectType *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PProperties *arg4 = 0 ;
  papillon::PDescription *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PProperties *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescription *)new papillon::PDescription((papillon::PString const &)*arg1,(papillon::PObjectType const &)*arg2,(papillon::PGuid const &)*arg3,(papillon::PProperties const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescription__SWIG_2(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PObjectType *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PDescription *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescription *)new papillon::PDescription((papillon::PString const &)*arg1,(papillon::PObjectType const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescription__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = 0 ;
  papillon::PDescription *result = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescription *)new papillon::PDescription((papillon::PDescription const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDescription(void * jarg1) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDescription_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  bool result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = (bool)((papillon::PDescription const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_Reset(void * jarg1) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_SetName(void * jarg1, char * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetName((papillon::PString const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PDescription_GetName(void * jarg1) {
  char * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = ((papillon::PDescription const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_SetIdentityId(void * jarg1, void * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetIdentityId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetIdentityId(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PDescription const *)arg1)->GetIdentityId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_SetObjectType(void * jarg1, void * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PObjectType *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return ;
  } 
  (arg1)->SetObjectType((papillon::PObjectType const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetObjectType(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PObjectType result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = ((papillon::PDescription const *)arg1)->GetObjectType();
  jresult = new papillon::PObjectType((const papillon::PObjectType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_SetThumbnail(void * jarg1, void * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PImage *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  (arg1)->SetThumbnail((papillon::PImage const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetThumbnail(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PImage result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = ((papillon::PDescription const *)arg1)->GetThumbnail();
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_SetVersion(void * jarg1, void * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PVersion *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PVersion const & type is null", 0);
    return ;
  } 
  (arg1)->SetVersion((papillon::PVersion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetVersion(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PVersion result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = ((papillon::PDescription const *)arg1)->GetVersion();
  jresult = new papillon::PVersion((const papillon::PVersion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescription_AddDescriptor(void * jarg1, void * jarg2) {
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PDescriptor *arg2 = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->AddDescriptor((papillon::PDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_RemoveDescriptor(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (arg1)->RemoveDescriptor((papillon::PGuid const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_AddDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = (arg1)->AddDescription((papillon::PDescription const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetDescriptors__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescription const *)arg1)->GetDescriptors((papillon::PGuid const &)*arg2);
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetDescriptors__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PObjectType *arg2 = 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescription const *)arg1)->GetDescriptors((papillon::PObjectType const &)*arg2);
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetDescriptors__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PList *result = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = (papillon::PList *) &((papillon::PDescription const *)arg1)->GetDescriptors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetProperties(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PProperties result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = (arg1)->GetProperties();
  jresult = new papillon::PProperties((const papillon::PProperties &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescription_GetThumbnails(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  result = ((papillon::PDescription const *)arg1)->GetThumbnails();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDescription_RecomputeDescriptors(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  papillon::PDescription *arg1 = (papillon::PDescription *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PDetector *arg3 = 0 ;
  papillon::PDescriber *arg4 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDescription *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PDescriber *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)(arg1)->RecomputeDescriptors((papillon::PGuid const &)*arg2,(papillon::PDetector const &)*arg3,(papillon::PDescriber const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriptor__SWIG_0() {
  void * jresult ;
  papillon::PDescriptor *result = 0 ;
  
  result = (papillon::PDescriptor *)new papillon::PDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriptor__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PObjectType *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PDescriptor *result = 0 ;
  
  arg1 = (papillon::PObjectType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescriptor *)new papillon::PDescriptor((papillon::PObjectType const &)*arg1,(papillon::PGuid const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriptor__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PObjectType *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PDescriptor *result = 0 ;
  
  arg1 = (papillon::PObjectType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescriptor *)new papillon::PDescriptor((papillon::PObjectType const &)*arg1,(papillon::PGuid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDescriptor__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = 0 ;
  papillon::PDescriptor *result = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDescriptor *)new papillon::PDescriptor((papillon::PDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDescriptor(void * jarg1) {
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetObjectType(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PObjectType result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = ((papillon::PDescriptor const *)arg1)->GetObjectType();
  jresult = new papillon::PObjectType((const papillon::PObjectType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetDescribeId(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PDescriptor const *)arg1)->GetDescribeId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetDescriptorId(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PDescriptor const *)arg1)->GetDescriptorId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescriptor_SetDescriptorId(void * jarg1, void * jarg2) {
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetDescriptorId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDescriptor_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  bool result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = (bool)((papillon::PDescriptor const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescriptor_SetDataSourceAsPNGImage(void * jarg1, void * jarg2) {
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PImage *arg2 = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  (arg1)->SetDataSourceAsPNGImage((papillon::PImage const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetDataSourceAsImage(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PImage result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = ((papillon::PDescriptor const *)arg1)->GetDataSourceAsImage();
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescriptor_SetDescriptor__SWIG_0(void * jarg1, void * jarg2) {
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return ;
  } 
  (arg1)->SetDescriptor((papillon::PByteArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetDescriptor__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriptor const *)arg1)->GetDescriptor(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDescriptor_SetDescriptor__SWIG_1(void * jarg1, void * jarg2) {
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PObject *arg2 = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return ;
  } 
  (arg1)->SetDescriptor((papillon::PObject const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetDescriptor__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDescriptor const *)arg1)->GetDescriptor(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetPropertiesShared(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PProperties result;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = ((papillon::PDescriptor const *)arg1)->GetPropertiesShared();
  jresult = new papillon::PProperties((const papillon::PProperties &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDescriptor_GetProperties(void * jarg1) {
  void * jresult ;
  papillon::PDescriptor *arg1 = (papillon::PDescriptor *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1; 
  result = (papillon::PProperties *) &((papillon::PDescriptor const *)arg1)->GetProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeaturePoint_Bad() {
  void * jresult ;
  papillon::PFeaturePoint *result = 0 ;
  
  result = (papillon::PFeaturePoint *) &papillon::PFeaturePoint::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeaturePoint__SWIG_0() {
  void * jresult ;
  papillon::PFeaturePoint *result = 0 ;
  
  result = (papillon::PFeaturePoint *)new papillon::PFeaturePoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeaturePoint__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PFeaturePoint *arg1 = 0 ;
  papillon::PFeaturePoint *result = 0 ;
  
  arg1 = (papillon::PFeaturePoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeaturePoint const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFeaturePoint *)new papillon::PFeaturePoint((papillon::PFeaturePoint const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeaturePoint__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PFeaturePoint *result = 0 ;
  
  arg1 = (papillon::PPoint2Df *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  result = (papillon::PFeaturePoint *)new papillon::PFeaturePoint((papillon::PPoint2Df const &)*arg1,(papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFeaturePoint(void * jarg1) {
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeaturePoint_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  bool result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (bool)((papillon::PFeaturePoint const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeaturePoint_GetLocation(void * jarg1) {
  void * jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (papillon::PPoint2Df *) &((papillon::PFeaturePoint const *)arg1)->GetLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeaturePoint_GetColumn(void * jarg1) {
  float jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  float result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (float)((papillon::PFeaturePoint const *)arg1)->GetColumn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeaturePoint_GetX(void * jarg1) {
  float jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  float result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (float)((papillon::PFeaturePoint const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeaturePoint_GetRow(void * jarg1) {
  float jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  float result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (float)((papillon::PFeaturePoint const *)arg1)->GetRow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeaturePoint_GetY(void * jarg1) {
  float jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  float result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (float)((papillon::PFeaturePoint const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PFeaturePoint_GetDescription(void * jarg1) {
  char * jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = ((papillon::PFeaturePoint const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeaturePoint_GetConfidence(void * jarg1) {
  float jresult ;
  papillon::PFeaturePoint *arg1 = (papillon::PFeaturePoint *) 0 ;
  float result;
  
  arg1 = (papillon::PFeaturePoint *)jarg1; 
  result = (float)((papillon::PFeaturePoint const *)arg1)->GetConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeaturePoint_FeaturePoints() {
  void * jresult ;
  papillon::PStringList *result = 0 ;
  
  result = (papillon::PStringList *) &papillon::PFeaturePoint::FeaturePoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeaturePoint_Initialise() {
  papillon::PFeaturePoint::Initialise();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeaturePoint_Finalise() {
  papillon::PFeaturePoint::Finalise();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureRectangle__SWIG_0() {
  void * jresult ;
  papillon::PFeatureRectangle *result = 0 ;
  
  result = (papillon::PFeatureRectangle *)new papillon::PFeatureRectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureRectangle__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PFeatureRectangle *arg1 = 0 ;
  papillon::PFeatureRectangle *result = 0 ;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureRectangle const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFeatureRectangle *)new papillon::PFeatureRectangle((papillon::PFeatureRectangle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureRectangle__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  papillon::PRectanglef *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PFeatureRectangle *result = 0 ;
  
  arg1 = (papillon::PRectanglef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  result = (papillon::PFeatureRectangle *)new papillon::PFeatureRectangle((papillon::PRectanglef const &)*arg1,(papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFeatureRectangle(void * jarg1) {
  papillon::PFeatureRectangle *arg1 = (papillon::PFeatureRectangle *) 0 ;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureRectangle_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PFeatureRectangle *arg1 = (papillon::PFeatureRectangle *) 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1; 
  result = (bool)((papillon::PFeatureRectangle const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureRectangle_GetRectangle(void * jarg1) {
  void * jresult ;
  papillon::PFeatureRectangle *arg1 = (papillon::PFeatureRectangle *) 0 ;
  papillon::PRectanglef *result = 0 ;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1; 
  result = (papillon::PRectanglef *) &((papillon::PFeatureRectangle const *)arg1)->GetRectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PFeatureRectangle_GetDescription(void * jarg1) {
  char * jresult ;
  papillon::PFeatureRectangle *arg1 = (papillon::PFeatureRectangle *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1; 
  result = ((papillon::PFeatureRectangle const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeatureRectangle_GetConfidence(void * jarg1) {
  float jresult ;
  papillon::PFeatureRectangle *arg1 = (papillon::PFeatureRectangle *) 0 ;
  float result;
  
  arg1 = (papillon::PFeatureRectangle *)jarg1; 
  result = (float)((papillon::PFeatureRectangle const *)arg1)->GetConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Empty() {
  char * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *) &papillon::PString::Empty();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_0() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)new papillon::PString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_1(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PString *)new papillon::PString((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_3(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PString *)new papillon::PString((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_7(char jarg1) {
  void * jresult ;
  char arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_8(short jarg1) {
  void * jresult ;
  papillon::int16 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::int16)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_9(unsigned short jarg1) {
  void * jresult ;
  papillon::uint16 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::uint16)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_10(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_11(unsigned int jarg1) {
  void * jresult ;
  papillon::uint32 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_12(long long jarg1) {
  void * jresult ;
  papillon::int64 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::int64)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_13(unsigned long long jarg1) {
  void * jresult ;
  papillon::uint64 arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::uint64)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_14(double jarg1, char jarg2, int jarg3) {
  void * jresult ;
  double arg1 ;
  char arg2 ;
  papillon::int32 arg3 ;
  papillon::PString *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PString *)new papillon::PString(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_15(double jarg1, char jarg2) {
  void * jresult ;
  double arg1 ;
  char arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (char)jarg2; 
  result = (papillon::PString *)new papillon::PString(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PString__SWIG_16(double jarg1) {
  void * jresult ;
  double arg1 ;
  papillon::PString *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (papillon::PString *)new papillon::PString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_DuplicateChars(int jarg1, unsigned short jarg2) {
  char * jresult ;
  papillon::int32 arg1 ;
  papillon::wchar arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::wchar)jarg2; 
  result = papillon::PString::DuplicateChars(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PString(void * jarg1) {
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PString_Reserve(void * jarg1, int jarg2) {
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->Reserve(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PString_At(void * jarg1, int jarg2) {
  unsigned short jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::wchar result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::wchar)((papillon::PString const *)arg1)->At(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (bool)((papillon::PString const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_NotEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (bool)((papillon::PString const *)arg1)->NotEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_StartsWith__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (bool)((papillon::PString const *)arg1)->StartsWith((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_StartsWith__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PString const *)arg1)->StartsWith((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_EndsWith__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (bool)((papillon::PString const *)arg1)->EndsWith((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_EndsWith__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PString const *)arg1)->EndsWith((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_Contains__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (bool)((papillon::PString const *)arg1)->Contains((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_Contains__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PString const *)arg1)->Contains((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_Count__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (papillon::uint32)((papillon::PString const *)arg1)->Count((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_Count__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::uint32)((papillon::PString const *)arg1)->Count((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_IndexOf__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (papillon::int32)((papillon::PString const *)arg1)->IndexOf((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_IndexOf__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)((papillon::PString const *)arg1)->IndexOf((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_LastIndexOf__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (papillon::int32)((papillon::PString const *)arg1)->LastIndexOf((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_LastIndexOf__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)((papillon::PString const *)arg1)->LastIndexOf((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_Size(void * jarg1) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (papillon::int32)((papillon::PString const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_c_str(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  char *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (char *)((papillon::PString const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_PString_c_wstr(void * jarg1) {
  wchar_t * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (wchar_t *)((papillon::PString const *)arg1)->c_wstr();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_ConstUTF8(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  char *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (char *)((papillon::PString const *)arg1)->ConstUTF8();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_ToUTF8(void * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->ToUTF8();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Substring__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Substring(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Substring__SWIG_1(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PString const *)arg1)->Substring(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Trim(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->Trim();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Truncate(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PString *) &(arg1)->Truncate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Chop(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PString *) &(arg1)->Chop(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_RemoveEndDigits(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->RemoveEndDigits();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_PadRight__SWIG_0(void * jarg1, int jarg2, unsigned short jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::wchar arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::wchar)jarg3; 
  result = ((papillon::PString const *)arg1)->PadRight(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_PadRight__SWIG_1(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PString const *)arg1)->PadRight(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Quote(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->Quote();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Unquote(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->Unquote();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_DoubleBackslash(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->DoubleBackslash();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_AddLineNumbers__SWIG_0(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((papillon::PString const *)arg1)->AddLineNumbers(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_AddLineNumbers__SWIG_1(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->AddLineNumbers();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_ToUpper(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->ToUpper();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_ToLower(void * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = ((papillon::PString const *)arg1)->ToLower();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Split__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::wchar arg2 ;
  papillon::PString::ESplitBehavior arg3 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::wchar)jarg2; 
  arg3 = (papillon::PString::ESplitBehavior)jarg3; 
  result = ((papillon::PString const *)arg1)->Split(arg2,arg3);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Split__SWIG_1(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::wchar arg2 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::wchar)jarg2; 
  result = ((papillon::PString const *)arg1)->Split(arg2);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Split__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ESplitBehavior arg3 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ESplitBehavior)jarg3; 
  result = ((papillon::PString const *)arg1)->Split((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Split__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PString const *)arg1)->Split((papillon::PString const &)*arg2);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_SplitSameLength(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PString const *)arg1)->SplitSameLength(arg2);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned short jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::wchar arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::wchar)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg((papillon::PString const &)*arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg((papillon::PString const &)*arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_2(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PString const *)arg1)->Arg((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_3(void * jarg1, void * jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (void *)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_5(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned short jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::wchar arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::wchar)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_6(void * jarg1, int jarg2, int jarg3, int jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_7(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_8(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_9(void * jarg1, long long jarg2, int jarg3, int jarg4, unsigned short jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int64 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::wchar arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::wchar)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_10(void * jarg1, long long jarg2, int jarg3, int jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int64 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_11(void * jarg1, long long jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int64 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_12(void * jarg1, long long jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int64 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int64)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_13(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned short jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::wchar arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::wchar)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_14(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_15(void * jarg1, unsigned int jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_16(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint32)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_17(void * jarg1, unsigned long long jarg2, int jarg3, int jarg4, unsigned short jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint64 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::wchar arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::wchar)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_18(void * jarg1, unsigned long long jarg2, int jarg3, int jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint64 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_19(void * jarg1, unsigned long long jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint64 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint64)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_20(void * jarg1, unsigned long long jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint64 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::uint64)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_21(void * jarg1, double jarg2, int jarg3, char jarg4, int jarg5, unsigned short jarg6) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::int32 arg5 ;
  papillon::wchar arg6 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::wchar)jarg6; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5,arg6);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_22(void * jarg1, double jarg2, int jarg3, char jarg4, int jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::int32 arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_23(void * jarg1, double jarg2, int jarg3, char jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_24(void * jarg1, double jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_25(void * jarg1, double jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_26(void * jarg1, float jarg2, int jarg3, char jarg4, int jarg5, unsigned short jarg6) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::int32 arg5 ;
  papillon::wchar arg6 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::wchar)jarg6; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5,arg6);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_27(void * jarg1, float jarg2, int jarg3, char jarg4, int jarg5) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::int32 arg5 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_28(void * jarg1, float jarg2, int jarg3, char jarg4) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float arg2 ;
  papillon::int32 arg3 ;
  char arg4 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (char)jarg4; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_29(void * jarg1, float jarg2, int jarg3) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float arg2 ;
  papillon::int32 arg3 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PString const *)arg1)->Arg(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_30(void * jarg1, float jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PString const *)arg1)->Arg(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_31(void * jarg1, void * jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PString const *)arg1)->Arg((papillon::PObject const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PString_Arg__SWIG_32(void * jarg1, void * jarg2) {
  char * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PResult *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::PResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PResult const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PString const *)arg1)->Arg((papillon::PResult const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_Compare__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = (papillon::int32)((papillon::PString const *)arg1)->Compare((papillon::PString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_Compare__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::int32)((papillon::PString const *)arg1)->Compare((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_ToBool__SWIG_0(void * jarg1, unsigned int * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)((papillon::PString const *)arg1)->ToBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_ToBool__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (bool)((papillon::PString const *)arg1)->ToBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_ToInt32__SWIG_0(void * jarg1, unsigned int * jarg2) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (papillon::int32)((papillon::PString const *)arg1)->ToInt32(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PString_ToInt32__SWIG_1(void * jarg1) {
  int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (papillon::int32)((papillon::PString const *)arg1)->ToInt32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_ToUInt32__SWIG_0(void * jarg1, unsigned int * jarg2) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (papillon::uint32)((papillon::PString const *)arg1)->ToUInt32(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PString_ToUInt32__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint32 result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (papillon::uint32)((papillon::PString const *)arg1)->ToUInt32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PString_ToInt64__SWIG_0(void * jarg1, unsigned int * jarg2) {
  long long jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (papillon::int64)((papillon::PString const *)arg1)->ToInt64(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PString_ToInt64__SWIG_1(void * jarg1) {
  long long jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int64 result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (papillon::int64)((papillon::PString const *)arg1)->ToInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PString_ToUInt64__SWIG_0(void * jarg1, unsigned int * jarg2) {
  unsigned long long jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (papillon::uint64)((papillon::PString const *)arg1)->ToUInt64(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PString_ToUInt64__SWIG_1(void * jarg1) {
  unsigned long long jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (papillon::uint64)((papillon::PString const *)arg1)->ToUInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PString_ToFloat__SWIG_0(void * jarg1, unsigned int * jarg2) {
  float jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  float result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (float)((papillon::PString const *)arg1)->ToFloat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PString_ToFloat__SWIG_1(void * jarg1) {
  float jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  float result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (float)((papillon::PString const *)arg1)->ToFloat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PString_ToDouble__SWIG_0(void * jarg1, unsigned int * jarg2) {
  double jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (double)((papillon::PString const *)arg1)->ToDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PString_ToDouble__SWIG_1(void * jarg1) {
  double jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  double result;
  
  arg1 = (papillon::PString *)jarg1; 
  result = (double)((papillon::PString const *)arg1)->ToDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Replace__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (papillon::PString *) &(arg1)->Replace((papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Replace__SWIG_1(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PString *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (papillon::PString *) &(arg1)->Replace(arg2,arg3,(papillon::PString const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Save__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::EWriteMode arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::EWriteMode)jarg3; 
  result = ((papillon::PString const *)arg1)->Save((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Save__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PString const *)arg1)->Save((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PString_Load(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = (papillon::PString *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PString *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Load((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_0() {
  void * jresult ;
  papillon::PStringList *result = 0 ;
  
  result = (papillon::PStringList *)new papillon::PStringList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PString *arg7 = 0 ;
  papillon::PString *arg8 = 0 ;
  papillon::PString *arg9 = 0 ;
  papillon::PString *arg10 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg7_str(jarg7);
  arg7 = &arg7_str; 
  //arg7 = new papillon::PString(jarg7);
  
  
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg8_str(jarg8);
  arg8 = &arg8_str; 
  //arg8 = new papillon::PString(jarg8);
  
  
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg9_str(jarg9);
  arg9 = &arg9_str; 
  //arg9 = new papillon::PString(jarg9);
  
  
  if (!jarg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg10_str(jarg10);
  arg10 = &arg10_str; 
  //arg10 = new papillon::PString(jarg10);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6,(papillon::PString const &)*arg7,(papillon::PString const &)*arg8,(papillon::PString const &)*arg9,(papillon::PString const &)*arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_2(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PString *arg7 = 0 ;
  papillon::PString *arg8 = 0 ;
  papillon::PString *arg9 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg7_str(jarg7);
  arg7 = &arg7_str; 
  //arg7 = new papillon::PString(jarg7);
  
  
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg8_str(jarg8);
  arg8 = &arg8_str; 
  //arg8 = new papillon::PString(jarg8);
  
  
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg9_str(jarg9);
  arg9 = &arg9_str; 
  //arg9 = new papillon::PString(jarg9);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6,(papillon::PString const &)*arg7,(papillon::PString const &)*arg8,(papillon::PString const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_3(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PString *arg7 = 0 ;
  papillon::PString *arg8 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg7_str(jarg7);
  arg7 = &arg7_str; 
  //arg7 = new papillon::PString(jarg7);
  
  
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg8_str(jarg8);
  arg8 = &arg8_str; 
  //arg8 = new papillon::PString(jarg8);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6,(papillon::PString const &)*arg7,(papillon::PString const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_4(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PString *arg7 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg7_str(jarg7);
  arg7 = &arg7_str; 
  //arg7 = new papillon::PString(jarg7);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6,(papillon::PString const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_5(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_6(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_7(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_8(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_9(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_10(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PStringList *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStringList__SWIG_11(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PStringList *)new papillon::PStringList((papillon::PStringList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PStringList(void * jarg1) {
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Clone(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = ((papillon::PStringList const *)arg1)->Clone();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PStringList_Clear(void * jarg1) {
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStringList_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  bool result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = (bool)((papillon::PStringList const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PStringList_Size(void * jarg1) {
  int jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = (papillon::int32)((papillon::PStringList const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PStringList_Get(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PString *) &((papillon::PStringList const *)arg1)->Get(arg2);
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Set(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = (arg1)->Set(arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Add(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PStringList *) &(arg1)->Add((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_AddAll(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList *arg2 = 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  arg2 = (papillon::PStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PStringList *) &(arg1)->AddAll((papillon::PStringList const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_RemoveFirst(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = (papillon::PStringList *) &(arg1)->RemoveFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_RemoveLast(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = (papillon::PStringList *) &(arg1)->RemoveLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_RemoveOne(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PStringList *) &(arg1)->RemoveOne((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_RemoveAll(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PStringList *) &(arg1)->RemoveAll((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_RemoveDuplicates(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = (papillon::PStringList *) &(arg1)->RemoveDuplicates();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStringList_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)(arg1)->Contains((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PStringList_Join(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PStringList const *)arg1)->Join((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Filter(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PStringList const *)arg1)->Filter((papillon::PString const &)*arg2);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_ToUpper(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = ((papillon::PStringList const *)arg1)->ToUpper();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Sorted(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = ((papillon::PStringList const *)arg1)->Sorted();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_Shuffled(void * jarg1) {
  void * jresult ;
  papillon::PStringList *arg1 = (papillon::PStringList *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PStringList *)jarg1; 
  result = ((papillon::PStringList const *)arg1)->Shuffled();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStringList_FromTextFile(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PStringList *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList & type is null", 0);
    return 0;
  } 
  result = papillon::PStringList::FromTextFile((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureMap__SWIG_0() {
  void * jresult ;
  papillon::PFeatureMap *result = 0 ;
  
  result = (papillon::PFeatureMap *)new papillon::PFeatureMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureMap__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = 0 ;
  papillon::PFeatureMap *result = 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFeatureMap *)new papillon::PFeatureMap((papillon::PFeatureMap const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFeatureMap__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStringMap *arg1 = 0 ;
  papillon::PStringMap *arg2 = 0 ;
  papillon::PFeatureMap *result = 0 ;
  
  arg1 = (papillon::PStringMap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringMap const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PStringMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringMap const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFeatureMap *)new papillon::PFeatureMap((papillon::PStringMap const &)*arg1,(papillon::PStringMap const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFeatureMap(void * jarg1) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_Clear(void * jarg1) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_IsFeaturePointEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = (bool)((papillon::PFeatureMap const *)arg1)->IsFeaturePointEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_IsFeatureRectangleEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = (bool)((papillon::PFeatureMap const *)arg1)->IsFeatureRectangleEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFeatureMap_FeaturePointSize(void * jarg1) {
  int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = (papillon::int32)((papillon::PFeatureMap const *)arg1)->FeaturePointSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFeatureMap_FeatureRectangleSize(void * jarg1) {
  int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = (papillon::int32)((papillon::PFeatureMap const *)arg1)->FeatureRectangleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_Add__SWIG_0(void * jarg1, void * jarg2) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PFeaturePoint *arg2 = 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PFeaturePoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeaturePoint const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PFeaturePoint const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_Add__SWIG_1(void * jarg1, void * jarg2) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PFeatureRectangle *arg2 = 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PFeatureRectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureRectangle const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PFeatureRectangle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_AddPoint(void * jarg1, void * jarg2) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PFeaturePoint *arg2 = 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PFeaturePoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeaturePoint const & type is null", 0);
    return ;
  } 
  (arg1)->AddPoint((papillon::PFeaturePoint const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_AddRectangle(void * jarg1, void * jarg2) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PFeatureRectangle *arg2 = 0 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PFeatureRectangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureRectangle const & type is null", 0);
    return ;
  } 
  (arg1)->AddRectangle((papillon::PFeatureRectangle const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)(arg1)->Remove((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetPoints(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PPoint2DfList result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetPoints();
  jresult = new papillon::PPoint2DfList((const papillon::PPoint2DfList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeaturePoints__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetFeaturePoints();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_GetFeaturePointByName__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PFeaturePoint *arg3 = 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PFeaturePoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeaturePoint & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PFeatureMap const *)arg1)->GetFeaturePointByName((papillon::PString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeaturePointByName__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PFeaturePoint result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PFeatureMap const *)arg1)->GetFeaturePointByName((papillon::PString const &)*arg2);
  jresult = new papillon::PFeaturePoint((const papillon::PFeaturePoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeatureRectangles__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetFeatureRectangles();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetLeftEyeCentre(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetLeftEyeCentre();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetRightEyeCentre(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetRightEyeCentre();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_GetFeatureRectangleByName__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PFeatureRectangle *arg3 = 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PFeatureRectangle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureRectangle & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PFeatureMap const *)arg1)->GetFeatureRectangleByName((papillon::PString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeatureRectangleByName__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PFeatureRectangle result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PFeatureMap const *)arg1)->GetFeatureRectangleByName((papillon::PString const &)*arg2);
  jresult = new papillon::PFeatureRectangle((const papillon::PFeatureRectangle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFaceRectangle(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PFeatureRectangle result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetFaceRectangle();
  jresult = new papillon::PFeatureRectangle((const papillon::PFeatureRectangle &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PFeatureMap_GetInterocularDistance(void * jarg1) {
  float jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  float result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = (float)((papillon::PFeatureMap const *)arg1)->GetInterocularDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeaturePointNames(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetFeaturePointNames();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetFeatureRectangleNames(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetFeatureRectangleNames();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetBoundingBox(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetBoundingBox();
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetBoundingPolygon__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetBoundingPolygon();
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetBoundingPolygon__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringList *arg2 = 0 ;
  papillon::PPolygonf result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PFeatureMap const *)arg1)->GetBoundingPolygon((papillon::PStringList const &)*arg2);
  jresult = new papillon::PPolygonf((const papillon::PPolygonf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetCentreOfMass__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  result = ((papillon::PFeatureMap const *)arg1)->GetCentreOfMass();
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFeatureMap_GetCentreOfMass__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringList *arg2 = 0 ;
  papillon::PPoint2Df result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PFeatureMap const *)arg1)->GetCentreOfMass((papillon::PStringList const &)*arg2);
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_GetFeaturePoints__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringMap *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PStringMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringMap & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PFeatureMap const *)arg1)->GetFeaturePoints(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PFeatureMap_GetFeatureRectangles__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  papillon::PStringMap *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (papillon::PStringMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringMap & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PFeatureMap const *)arg1)->GetFeatureRectangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFeatureMap_Translate(void * jarg1, float jarg2, float jarg3) {
  papillon::PFeatureMap *arg1 = (papillon::PFeatureMap *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (papillon::PFeatureMap *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Translate(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrame__SWIG_0() {
  void * jresult ;
  papillon::PFrame *result = 0 ;
  
  result = (papillon::PFrame *)new papillon::PFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrame__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PFrame *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFrame *)new papillon::PFrame((papillon::PImage const &)*arg1,(papillon::PGuid const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrame__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PFrame *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFrame *)new papillon::PFrame((papillon::PImage const &)*arg1,(papillon::PGuid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrame__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PFrame *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFrame *)new papillon::PFrame((papillon::PImage const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrame__SWIG_4(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFrame *result = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFrame *)new papillon::PFrame((papillon::PFrame const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFrame(void * jarg1) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetFrameId(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PFrame const *)arg1)->GetFrameId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetSourceId(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PFrame const *)arg1)->GetSourceId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetFrameId(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetFrameId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetSourceId(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetSourceId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetSize(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = ((papillon::PFrame const *)arg1)->GetSize();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFrame_GetWidth(void * jarg1) {
  int jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::int32)((papillon::PFrame const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFrame_GetHeight(void * jarg1) {
  int jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::int32)((papillon::PFrame const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetRectangle(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = ((papillon::PFrame const *)arg1)->GetRectangle();
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetNewImage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PGuid *arg4 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  arg4 = (papillon::PGuid *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetNewImage((papillon::PImage const &)*arg2,(papillon::PGuid const &)*arg3,(papillon::PGuid const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetNewImage__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetNewImage((papillon::PImage const &)*arg2,(papillon::PGuid const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetNewImage__SWIG_2(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  (arg1)->SetNewImage((papillon::PImage const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetImage(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  (arg1)->SetImage((papillon::PImage const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetFrameNumber(void * jarg1, int jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->SetFrameNumber(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetSourceFrameNumber(void * jarg1, int jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->SetSourceFrameNumber(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetTimestampUTC(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetTimestampUTC((papillon::PDateTime const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetTimestampToCurrentUTC(void * jarg1) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  (arg1)->SetTimestampToCurrentUTC();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Resize__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PImage::EAspectRatioMode arg3 ;
  papillon::PImage::EInterpolation arg4 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PImage::EAspectRatioMode)jarg3; 
  arg4 = (papillon::PImage::EInterpolation)jarg4; 
  (arg1)->Resize((papillon::PSizei const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Resize__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PImage::EAspectRatioMode arg3 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PImage::EAspectRatioMode)jarg3; 
  (arg1)->Resize((papillon::PSizei const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Resize__SWIG_2(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  (arg1)->Resize((papillon::PSizei const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Resize__SWIG_3(void * jarg1, float jarg2, int jarg3) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  float arg2 ;
  papillon::PImage::EInterpolation arg3 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::PImage::EInterpolation)jarg3; 
  (arg1)->Resize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Resize__SWIG_4(void * jarg1, float jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  float arg2 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_ConvertTo(void * jarg1, int jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage::EPixelFormat arg2 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage::EPixelFormat)jarg2; 
  (arg1)->ConvertTo(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_Crop(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Crop((papillon::PRectanglei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetImageShared__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = ((papillon::PFrame const *)arg1)->GetImageShared();
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetImage(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::PImage *) &((papillon::PFrame const *)arg1)->GetImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetImageShared__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PImage::EPixelFormat arg2 ;
  papillon::PImage result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PImage::EPixelFormat)jarg2; 
  result = ((papillon::PFrame const *)arg1)->GetImageShared(arg2);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFrame_GetFrameNumber(void * jarg1) {
  int jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::int32)((papillon::PFrame const *)arg1)->GetFrameNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFrame_GetSourceFrameNumber(void * jarg1) {
  int jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::int32)((papillon::PFrame const *)arg1)->GetSourceFrameNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetTimestampUTC(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = ((papillon::PFrame const *)arg1)->GetTimestampUTC();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetPropertiesShared(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PProperties result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = ((papillon::PFrame const *)arg1)->GetPropertiesShared();
  jresult = new papillon::PProperties((const papillon::PProperties &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_GetProperties(void * jarg1) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  result = (papillon::PProperties *) &((papillon::PFrame const *)arg1)->GetProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_SetProperties(void * jarg1, void * jarg2) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PProperties *arg2 = 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return ;
  } 
  (arg1)->SetProperties((papillon::PProperties const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_InvalidateCache(void * jarg1) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  (arg1)->InvalidateCache();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PFrame_Reset(void * jarg1) {
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  
  arg1 = (papillon::PFrame *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_Display__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PFrame const *)arg1)->Display((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_Display__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PFrame const *)arg1)->Display((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_DisplayScaled__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = ((papillon::PFrame const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_DisplayScaled__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PFrame const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_DisplayScaled__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PFrame const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrame_DisplayScaled__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PFrame *arg1 = (papillon::PFrame *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PFrame const *)arg1)->DisplayScaled((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WAIT_FOR_RETURN_get() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)(papillon::int32)papillon::WAIT_FOR_RETURN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_MaxSize() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)papillon::PImage::MaxSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImage__SWIG_0(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PImage::EPixelFormat arg3 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PImage::EPixelFormat)jarg3; 
  result = (papillon::PImage *)new papillon::PImage(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImage__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PImage *)new papillon::PImage(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImage__SWIG_2(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PImage *)new papillon::PImage(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImage__SWIG_3() {
  void * jresult ;
  papillon::PImage *result = 0 ;
  
  result = (papillon::PImage *)new papillon::PImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImage__SWIG_4(void * jarg1) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  result = (papillon::PImage *)new papillon::PImage((papillon::PImage const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PImage(void * jarg1) {
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Clone(void * jarg1) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->Clone();
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PImage_Allocate__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PImage::EPixelFormat arg4 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PImage::EPixelFormat)jarg4; 
  (arg1)->Allocate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PImage_Allocate__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  (arg1)->Allocate(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetWidth(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetHeight(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_GetRectangle(void * jarg1) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->GetRectangle();
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_GetSize(void * jarg1) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->GetSize();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_ScaleSize(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  float arg2 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((papillon::PImage const *)arg1)->ScaleSize(arg2);
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PImage_GetAspectRatio(void * jarg1) {
  float jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  float result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (float)((papillon::PImage const *)arg1)->GetAspectRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetNumberOfChannels(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetNumberOfChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetSizeInBytes(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetSizeInBytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetSizeOfRowInBytes(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetSizeOfRowInBytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetSizeOfPixelInBytes(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::int32)((papillon::PImage const *)arg1)->GetSizeOfPixelInBytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetPixelFormat(void * jarg1) {
  int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage::EPixelFormat result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::PImage::EPixelFormat)((papillon::PImage const *)arg1)->GetPixelFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_GetPixelFormatToString__SWIG_0(void * jarg1) {
  char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->GetPixelFormatToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_GetPixelFormatToString__SWIG_1(int jarg1) {
  char * jresult ;
  papillon::PImage::EPixelFormat arg1 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage::EPixelFormat)jarg1; 
  result = papillon::PImage::GetPixelFormatToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_GetAspectRatioToString(int jarg1) {
  char * jresult ;
  papillon::PImage::EAspectRatioMode arg1 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage::EAspectRatioMode)jarg1; 
  result = papillon::PImage::GetAspectRatioToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PImage_GetEFileFormatFromString(char * jarg1) {
  int jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PImage::EFileFormat result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PImage::EFileFormat)papillon::PImage::GetEFileFormatFromString((papillon::PString const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_PImage_GetDataPtr__SWIG_0(void * jarg1, int jarg2) {
  unsigned char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::uint8 *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::uint8 *)((papillon::PImage const *)arg1)->GetDataPtr(arg2);
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_PImage_GetDataPtr__SWIG_1(void * jarg1) {
  unsigned char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::uint8 *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (papillon::uint8 *)((papillon::PImage const *)arg1)->GetDataPtr();
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_PImage_GetPixel(void * jarg1, int jarg2, int jarg3) {
  unsigned char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::uint8 *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::uint8 *)((papillon::PImage const *)arg1)->GetPixel(arg2,arg3);
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PImage_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  bool result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (bool)((papillon::PImage const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PImage_IsGrayscale(void * jarg1) {
  unsigned int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  bool result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = (bool)((papillon::PImage const *)arg1)->IsGrayscale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PImage_IsSame(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PImage const *)arg1)->IsSame((papillon::PImage const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Set(void * jarg1, unsigned char* jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PImage::EPixelFormat arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = jarg2;
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PImage::EPixelFormat)jarg5; 
  result = (arg1)->Set((void const *)arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_ExtractSubImage__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  result = ((papillon::PImage const *)arg1)->ExtractSubImage(*arg2,arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_ExtractSubImage__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PRectanglei *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PRectanglei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PImage const *)arg1)->ExtractSubImage(*arg2,(papillon::PRectanglei const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Crop__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = (arg1)->Crop(arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Crop__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Crop((papillon::PRectanglei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_InsertImageInPlace(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->InsertImageInPlace((papillon::PImage const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Convert(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PImage::EPixelFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage::EPixelFormat)jarg3; 
  result = ((papillon::PImage const *)arg1)->Convert(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_SwapRGB(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  result = ((papillon::PImage const *)arg1)->SwapRGB(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PImage::EAspectRatioMode arg5 ;
  papillon::PImage::EInterpolation arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PImage::EAspectRatioMode)jarg5; 
  arg6 = (papillon::PImage::EInterpolation)jarg6; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PImage::EAspectRatioMode arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PImage::EAspectRatioMode)jarg5; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PImage::EAspectRatioMode arg4 ;
  papillon::PImage::EInterpolation arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PImage::EAspectRatioMode)jarg4; 
  arg5 = (papillon::PImage::EInterpolation)jarg5; 
  result = (arg1)->Resize(arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PImage::EAspectRatioMode arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PImage::EAspectRatioMode)jarg4; 
  result = (arg1)->Resize(arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Resize(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_6(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PSizei *arg3 = 0 ;
  papillon::PImage::EAspectRatioMode arg4 ;
  papillon::PImage::EInterpolation arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PSizei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PImage::EAspectRatioMode)jarg4; 
  arg5 = (papillon::PImage::EInterpolation)jarg5; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,(papillon::PSizei const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_7(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PSizei *arg3 = 0 ;
  papillon::PImage::EAspectRatioMode arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PSizei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PImage::EAspectRatioMode)jarg4; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,(papillon::PSizei const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PSizei *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PSizei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,(papillon::PSizei const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_9(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PImage::EAspectRatioMode arg3 ;
  papillon::PImage::EInterpolation arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage::EAspectRatioMode)jarg3; 
  arg4 = (papillon::PImage::EInterpolation)jarg4; 
  result = (arg1)->Resize((papillon::PSizei const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_10(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PImage::EAspectRatioMode arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage::EAspectRatioMode)jarg3; 
  result = (arg1)->Resize((papillon::PSizei const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_11(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Resize((papillon::PSizei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_12(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  float arg3 ;
  papillon::PImage::EInterpolation arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (papillon::PImage::EInterpolation)jarg4; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_13(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  float arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((papillon::PImage const *)arg1)->Resize(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_14(void * jarg1, float jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  float arg2 ;
  papillon::PImage::EInterpolation arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::PImage::EInterpolation)jarg3; 
  result = (arg1)->Resize(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Resize__SWIG_15(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  float arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (float)jarg2; 
  result = (arg1)->Resize(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_EqualizeHistogram(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  result = (arg1)->EqualizeHistogram(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Rotate(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Rotate(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Blur(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Blur(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PImage_Clear(void * jarg1) {
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Fill(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PColour3i *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PColour3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Fill((papillon::PColour3i const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawString__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5, double jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PImage::EFont arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  double arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PImage::EFont)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (double)jarg6; 
  result = (arg1)->DrawString((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawString__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PImage::EFont arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PImage::EFont)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawString((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawString__SWIG_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::int32 arg5 ;
  papillon::PColour3i *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PColour3i *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawString((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,(papillon::PString const &)*arg4,arg5,(papillon::PColour3i const &)*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLabel__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PImage::EFont arg6 ;
  double arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PImage::EFont)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->DrawLabel((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLabel__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PImage::EFont arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PImage::EFont)jarg6; 
  result = (arg1)->DrawLabel((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLabel__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawLabel((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLabel__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawLabel((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLabel__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PPoint2Di *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawLabel((papillon::PString const &)*arg2,(papillon::PPoint2Di const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLine__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PColour3i *arg6 = 0 ;
  papillon::int32 arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PColour3i *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg7 = (papillon::int32)jarg7; 
  result = (arg1)->DrawLine(arg2,arg3,arg4,arg5,(papillon::PColour3i const &)*arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawLine__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PColour3i *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PColour3i *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawLine(arg2,arg3,arg4,arg5,(papillon::PColour3i const &)*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawRectangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->DrawRectangle((papillon::PRectanglei const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawRectangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawRectangle((papillon::PRectanglei const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawRectangle__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglef *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->DrawRectangle((papillon::PRectanglef const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawRectangle__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglef *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglef const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawRectangle((papillon::PRectanglef const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_FillRectangle(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->FillRectangle((papillon::PRectanglei const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawPolygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPolygoni *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPolygoni *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygoni const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->DrawPolygon((papillon::PPolygoni const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawPolygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPolygoni *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPolygoni *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygoni const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawPolygon((papillon::PPolygoni const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawPolygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPolygonf *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPolygonf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygonf const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->DrawPolygon((papillon::PPolygonf const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawPolygon__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPolygonf *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPolygonf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPolygonf const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawPolygon((papillon::PPolygonf const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawCircle__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::int32)jarg5; 
  result = (arg1)->DrawCircle((papillon::PPoint2Df const &)*arg2,arg3,(papillon::PColour3i const &)*arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawCircle__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawCircle((papillon::PPoint2Df const &)*arg2,arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawCircle__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  result = (arg1)->DrawCircle(arg2,arg3,arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawCircle__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawCircle(arg2,arg3,arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawEllipse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PColour3i *arg6 = 0 ;
  papillon::int32 arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PColour3i *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg7 = (papillon::int32)jarg7; 
  result = (arg1)->DrawEllipse(arg2,arg3,arg4,arg5,(papillon::PColour3i const &)*arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DrawEllipse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PColour3i *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PColour3i *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DrawEllipse(arg2,arg3,arg4,arg5,(papillon::PColour3i const &)*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_GetFingerPrint(void * jarg1) {
  char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->GetFingerPrint();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_ToJpegBase64__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PImage const *)arg1)->ToJpegBase64(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PImage_ToJpegBase64__SWIG_1(void * jarg1) {
  char * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PImage *)jarg1; 
  result = ((papillon::PImage const *)arg1)->ToJpegBase64();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Load__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->Load((papillon::PByteArray const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Load__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Load((papillon::PByteArray const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Load__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Load((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_LoadFromBase64(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->LoadFromBase64((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Save__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PImage::EFileFormat arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage::EFileFormat)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PImage const *)arg1)->Save(*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Save__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PByteArray *arg2 = 0 ;
  papillon::PImage::EFileFormat arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (papillon::PByteArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage::EFileFormat)jarg3; 
  result = ((papillon::PImage const *)arg1)->Save(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Save__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PImage const *)arg1)->Save((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Save__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PImage const *)arg1)->Save((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Display__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PImage const *)arg1)->Display((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_Display__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PImage const *)arg1)->Display((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DisplayScaled__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = ((papillon::PImage const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DisplayScaled__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PImage const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DisplayScaled__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::PImage const *)arg1)->DisplayScaled((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DisplayScaled__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PImage const *)arg1)->DisplayScaled((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_DisplayOff(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PImage const *)arg1)->DisplayOff((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PImage_SetDisplayPosition(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  papillon::PString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (papillon::PImage *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ((papillon::PImage const *)arg1)->SetDisplayPosition((papillon::PString const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImage_SetFromCvMat(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = (papillon::PImage *) 0 ;
  void *arg2 = (void *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (arg1)->SetFromCvMat(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTrack__SWIG_0() {
  void * jresult ;
  papillon::PTrack *result = 0 ;
  
  result = (papillon::PTrack *)new papillon::PTrack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTrack__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  float arg2 ;
  papillon::PTrack *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (papillon::PTrack *)new papillon::PTrack((papillon::PGuid const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTrack__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PTrack *arg1 = 0 ;
  papillon::PTrack *result = 0 ;
  
  arg1 = (papillon::PTrack *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTrack const & type is null", 0);
    return 0;
  } 
  result = (papillon::PTrack *)new papillon::PTrack((papillon::PTrack const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PTrack(void * jarg1) {
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  
  arg1 = (papillon::PTrack *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTrack_Clone(void * jarg1) {
  void * jresult ;
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  papillon::PTrack result;
  
  arg1 = (papillon::PTrack *)jarg1; 
  result = ((papillon::PTrack const *)arg1)->Clone();
  jresult = new papillon::PTrack((const papillon::PTrack &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTrack_GetTrackId(void * jarg1) {
  void * jresult ;
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PTrack *)jarg1; 
  result = ((papillon::PTrack const *)arg1)->GetTrackId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PTrack_GetConfidence(void * jarg1) {
  float jresult ;
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  float result;
  
  arg1 = (papillon::PTrack *)jarg1; 
  result = (float)((papillon::PTrack const *)arg1)->GetConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PTrack_SetTrackId(void * jarg1, void * jarg2) {
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PTrack *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetTrackId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PTrack_SetConfidence(void * jarg1, float jarg2) {
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  float arg2 ;
  
  arg1 = (papillon::PTrack *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetConfidence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PTrack_Clear(void * jarg1) {
  papillon::PTrack *arg1 = (papillon::PTrack *) 0 ;
  
  arg1 = (papillon::PTrack *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_Bad() {
  void * jresult ;
  papillon::PDetection *result = 0 ;
  
  result = (papillon::PDetection *) &papillon::PDetection::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetection__SWIG_0() {
  void * jresult ;
  papillon::PDetection *result = 0 ;
  
  result = (papillon::PDetection *)new papillon::PDetection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetection__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  papillon::PObjectType *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PFrame *arg3 = 0 ;
  papillon::PFeatureMap *arg4 = 0 ;
  float arg5 ;
  papillon::PDetection *result = 0 ;
  
  arg1 = (papillon::PObjectType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PFrame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PFeatureMap *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (papillon::PDetection *)new papillon::PDetection((papillon::PObjectType const &)*arg1,(papillon::PGuid const &)*arg2,(papillon::PFrame const &)*arg3,(papillon::PFeatureMap const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetection__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PFrame *arg3 = 0 ;
  papillon::PObjectType *arg4 = 0 ;
  papillon::PTrack *arg5 = 0 ;
  papillon::PFeatureMap *arg6 = 0 ;
  float arg7 ;
  papillon::PDetection *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PFrame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PObjectType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PTrack *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTrack const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PFeatureMap *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  result = (papillon::PDetection *)new papillon::PDetection((papillon::PGuid const &)*arg1,(papillon::PGuid const &)*arg2,(papillon::PFrame const &)*arg3,(papillon::PObjectType const &)*arg4,(papillon::PTrack const &)*arg5,(papillon::PFeatureMap const &)*arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetection__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PDetection *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDetection *)new papillon::PDetection((papillon::PDetection const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDetection(void * jarg1) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDetection_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  bool result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (bool)((papillon::PDetection const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetObjectType(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PObjectType result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetObjectType();
  jresult = new papillon::PObjectType((const papillon::PObjectType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetObjectId(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetObjectId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetDetectorId(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetDetectorId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetTrack(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PTrack *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (papillon::PTrack *) &((papillon::PDetection const *)arg1)->GetTrack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetTrackShared(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PTrack result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetTrackShared();
  jresult = new papillon::PTrack((const papillon::PTrack &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFrame(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFrame *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (papillon::PFrame *) &((papillon::PDetection const *)arg1)->GetFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFeatureMap(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFeatureMap *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (papillon::PFeatureMap *) &((papillon::PDetection const *)arg1)->GetFeatureMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFeatureMapShared(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFeatureMap result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetFeatureMapShared();
  jresult = new papillon::PFeatureMap((const papillon::PFeatureMap &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFeaturePoints(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetFeaturePoints();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFeatureRectangles(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetFeatureRectangles();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetFaceRectangle(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFeatureRectangle result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetFaceRectangle();
  jresult = new papillon::PFeatureRectangle((const papillon::PFeatureRectangle &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PDetection_GetInterocularDistance(void * jarg1) {
  float jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  float result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (float)((papillon::PDetection const *)arg1)->GetInterocularDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PDetection_GetConfidence(void * jarg1) {
  float jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  float result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (float)((papillon::PDetection const *)arg1)->GetConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetOrigin(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (papillon::PPoint2Df *) &((papillon::PDetection const *)arg1)->GetOrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetPropertiesShared(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PProperties result;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = ((papillon::PDetection const *)arg1)->GetPropertiesShared();
  jresult = new papillon::PProperties((const papillon::PProperties &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetection_GetProperties(void * jarg1) {
  void * jresult ;
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  result = (papillon::PProperties *) &((papillon::PDetection const *)arg1)->GetProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetInvalid(void * jarg1) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  (arg1)->SetInvalid();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetObjectType(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PObjectType *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return ;
  } 
  (arg1)->SetObjectType((papillon::PObjectType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetDetectorId(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetDetectorId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetFrame(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return ;
  } 
  (arg1)->SetFrame((papillon::PFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetFeatureMap(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return ;
  } 
  (arg1)->SetFeatureMap((papillon::PFeatureMap const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetConfidence(void * jarg1, float jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  float arg2 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetConfidence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetOrigin(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  (arg1)->SetOrigin((papillon::PPoint2Df const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_SetTrack(void * jarg1, void * jarg2) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  papillon::PTrack *arg2 = 0 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (papillon::PTrack *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTrack const & type is null", 0);
    return ;
  } 
  (arg1)->SetTrack((papillon::PTrack const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetection_Translate(void * jarg1, float jarg2, float jarg3) {
  papillon::PDetection *arg1 = (papillon::PDetection *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (papillon::PDetection *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Translate(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetectionList__SWIG_0(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PDetectionList *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PDetectionList *)new papillon::PDetectionList(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetectionList__SWIG_1() {
  void * jresult ;
  papillon::PDetectionList *result = 0 ;
  
  result = (papillon::PDetectionList *)new papillon::PDetectionList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetectionList__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PDetectionList *arg1 = 0 ;
  papillon::PDetectionList *result = 0 ;
  
  arg1 = (papillon::PDetectionList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDetectionList *)new papillon::PDetectionList((papillon::PDetectionList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDetectionList(void * jarg1) {
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetectionList_Get(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::int32 arg2 ;
  papillon::PDetection result;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PDetectionList const *)arg1)->Get(arg2);
  jresult = new papillon::PDetection((const papillon::PDetection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetectionList_GetLargest(void * jarg1) {
  void * jresult ;
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::PDetection result;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  result = ((papillon::PDetectionList const *)arg1)->GetLargest();
  jresult = new papillon::PDetection((const papillon::PDetection &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetectionList_RemoveSmallest(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  (arg1)->RemoveSmallest(arg2,arg3,(papillon::PString const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetectionList_GetBoundingBox(void * jarg1) {
  void * jresult ;
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::PRectanglef result;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  result = ((papillon::PDetectionList const *)arg1)->GetBoundingBox();
  jresult = new papillon::PRectanglef((const papillon::PRectanglef &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetectionList_Keep__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, int jarg5) {
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PSizei *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::int32 arg5 ;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PSizei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::int32)jarg5; 
  (arg1)->Keep((papillon::PSizei const &)*arg2,(papillon::PSizei const &)*arg3,(papillon::PString const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetectionList_Keep__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PSizei *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PSizei *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return ;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  (arg1)->Keep((papillon::PSizei const &)*arg2,(papillon::PSizei const &)*arg3,(papillon::PString const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDetectionList_Translate(void * jarg1, float jarg2, float jarg3) {
  papillon::PDetectionList *arg1 = (papillon::PDetectionList *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (papillon::PDetectionList *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Translate(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_FLOAT_THRESHOLD_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_FLOAT_THRESHOLD;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_RECTI_REGION_OF_INTEREST_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_RECTI_REGION_OF_INTEREST;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_SIZEI_MIN_DETECTION_SIZE_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_SIZEI_MIN_DETECTION_SIZE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_SIZEI_MAX_DETECTION_SIZE_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_SIZEI_MAX_DETECTION_SIZE;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_INT32_MAX_DETECTIONS_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_INT32_MAX_DETECTIONS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_C_PARAM_BOOL_LOCALISER_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PDetector::C_PARAM_BOOL_LOCALISER;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_Create__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PDetector *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector & type is null", 0);
    return 0;
  } 
  result = papillon::PDetector::Create((papillon::PString const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PDetector *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector & type is null", 0);
    return 0;
  } 
  result = papillon::PDetector::Create((papillon::PPlugin const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetector__SWIG_0() {
  void * jresult ;
  papillon::PDetector *result = 0 ;
  
  result = (papillon::PDetector *)new papillon::PDetector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDetector__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PDetector *arg1 = 0 ;
  papillon::PDetector *result = 0 ;
  
  arg1 = (papillon::PDetector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDetector *)new papillon::PDetector((papillon::PDetector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDetector(void * jarg1) {
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  
  arg1 = (papillon::PDetector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_Detect(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PDetectionList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetectionList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList & type is null", 0);
    return 0;
  } 
  result = ((papillon::PDetector const *)arg1)->Detect((papillon::PFrame const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetThreshold(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  float arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (float)jarg2; 
  result = (arg1)->SetThreshold(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PDetector_GetThreshold(void * jarg1) {
  float jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  float result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = (float)((papillon::PDetector const *)arg1)->GetThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetRegionOfInterest(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetRegionOfInterest((papillon::PRectanglei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_GetRegionOfInterest(void * jarg1) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PRectanglei result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = ((papillon::PDetector const *)arg1)->GetRegionOfInterest();
  jresult = new papillon::PRectanglei((const papillon::PRectanglei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetMinDetectionSize__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->SetMinDetectionSize(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetMinDetectionSize__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetMinDetectionSize((papillon::PSizei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_GetMinDetectionSize(void * jarg1) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = ((papillon::PDetector const *)arg1)->GetMinDetectionSize();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetMaxDetectionSize__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->SetMaxDetectionSize(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetMaxDetectionSize__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PSizei *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::PSizei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSizei const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetMaxDetectionSize((papillon::PSizei const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_GetMaxDetectionSize(void * jarg1) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = ((papillon::PDetector const *)arg1)->GetMaxDetectionSize();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_SetMaxDetections(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->SetMaxDetections(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PDetector_GetMaxDetections(void * jarg1) {
  int jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = (papillon::int32)((papillon::PDetector const *)arg1)->GetMaxDetections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDetector_EnableLocaliser(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  bool arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->EnableLocaliser(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDetector_IsLocaliserEnabled(void * jarg1) {
  unsigned int jresult ;
  papillon::PDetector *arg1 = (papillon::PDetector *) 0 ;
  bool result;
  
  arg1 = (papillon::PDetector *)jarg1; 
  result = (bool)((papillon::PDetector const *)arg1)->IsLocaliserEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PExampleSet__SWIG_0() {
  void * jresult ;
  papillon::PExampleSet *result = 0 ;
  
  result = (papillon::PExampleSet *)new papillon::PExampleSet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PExampleSet__SWIG_1(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PObjectType *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PExampleSet *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PExampleSet *)new papillon::PExampleSet((papillon::PString const &)*arg1,(papillon::PObjectType const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PExampleSet__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PExampleSet *arg1 = 0 ;
  papillon::PExampleSet *result = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PExampleSet const & type is null", 0);
    return 0;
  } 
  result = (papillon::PExampleSet *)new papillon::PExampleSet((papillon::PExampleSet const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PExampleSet(void * jarg1) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_Clear(void * jarg1) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PExampleSet_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  bool result;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  result = (bool)((papillon::PExampleSet const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_SetMaxSize(void * jarg1, int jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->SetMaxSize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PExampleSet_Size(void * jarg1) {
  int jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  result = (papillon::int32)((papillon::PExampleSet const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_Add__SWIG_0(void * jarg1, void * jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PDetection *arg2 = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PDetection const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_Add__SWIG_1(void * jarg1, void * jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PDetectionList const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PExampleSet_Get(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::int32 arg2 ;
  papillon::PDetection *result = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PDetection *) &((papillon::PExampleSet const *)arg1)->Get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_SetName(void * jarg1, char * jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetName((papillon::PString const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PExampleSet_GetName(void * jarg1) {
  char * jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  result = (papillon::PString *) &((papillon::PExampleSet const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_SetIdentityId(void * jarg1, void * jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetIdentityId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PExampleSet_GetIdentityId(void * jarg1) {
  void * jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PExampleSet const *)arg1)->GetIdentityId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PExampleSet_GetObjectType(void * jarg1) {
  void * jresult ;
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PObjectType *result = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  result = (papillon::PObjectType *) &((papillon::PExampleSet const *)arg1)->GetObjectType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PExampleSet_SetObjectType(void * jarg1, void * jarg2) {
  papillon::PExampleSet *arg1 = (papillon::PExampleSet *) 0 ;
  papillon::PObjectType *arg2 = 0 ;
  
  arg1 = (papillon::PExampleSet *)jarg1; 
  arg2 = (papillon::PObjectType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObjectType const & type is null", 0);
    return ;
  } 
  (arg1)->SetObjectType((papillon::PObjectType const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrameToFrameTracker_Create__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PFrameToFrameTracker *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PFrameToFrameTracker *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrameToFrameTracker & type is null", 0);
    return 0;
  } 
  result = papillon::PFrameToFrameTracker::Create((papillon::PString const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrameToFrameTracker_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PFrameToFrameTracker *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PFrameToFrameTracker *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrameToFrameTracker & type is null", 0);
    return 0;
  } 
  result = papillon::PFrameToFrameTracker::Create((papillon::PPlugin const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrameToFrameTracker__SWIG_0() {
  void * jresult ;
  papillon::PFrameToFrameTracker *result = 0 ;
  
  result = (papillon::PFrameToFrameTracker *)new papillon::PFrameToFrameTracker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFrameToFrameTracker__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PFrameToFrameTracker *arg1 = 0 ;
  papillon::PFrameToFrameTracker *result = 0 ;
  
  arg1 = (papillon::PFrameToFrameTracker *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrameToFrameTracker const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFrameToFrameTracker *)new papillon::PFrameToFrameTracker((papillon::PFrameToFrameTracker const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFrameToFrameTracker(void * jarg1) {
  papillon::PFrameToFrameTracker *arg1 = (papillon::PFrameToFrameTracker *) 0 ;
  
  arg1 = (papillon::PFrameToFrameTracker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFrameToFrameTracker_Apply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PFrameToFrameTracker *arg1 = (papillon::PFrameToFrameTracker *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PDetectionList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrameToFrameTracker *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetectionList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList & type is null", 0);
    return 0;
  } 
  result = (arg1)->Apply((papillon::PFrame const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PGPSLocation_Bad() {
  void * jresult ;
  papillon::PGPSLocation *result = 0 ;
  
  result = (papillon::PGPSLocation *) &papillon::PGPSLocation::Bad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGPSLocation__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  papillon::PGPSLocation *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (papillon::PGPSLocation *)new papillon::PGPSLocation(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGPSLocation__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  papillon::PGPSLocation *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (papillon::PGPSLocation *)new papillon::PGPSLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGPSLocation__SWIG_2() {
  void * jresult ;
  papillon::PGPSLocation *result = 0 ;
  
  result = (papillon::PGPSLocation *)new papillon::PGPSLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PGPSLocation__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PGPSLocation *arg1 = 0 ;
  papillon::PGPSLocation *result = 0 ;
  
  arg1 = (papillon::PGPSLocation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGPSLocation const & type is null", 0);
    return 0;
  } 
  result = (papillon::PGPSLocation *)new papillon::PGPSLocation((papillon::PGPSLocation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PGPSLocation(void * jarg1) {
  papillon::PGPSLocation *arg1 = (papillon::PGPSLocation *) 0 ;
  
  arg1 = (papillon::PGPSLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PGPSLocation_GetLongitude(void * jarg1) {
  double jresult ;
  papillon::PGPSLocation *arg1 = (papillon::PGPSLocation *) 0 ;
  double result;
  
  arg1 = (papillon::PGPSLocation *)jarg1; 
  result = (double)((papillon::PGPSLocation const *)arg1)->GetLongitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PGPSLocation_GetLatitude(void * jarg1) {
  double jresult ;
  papillon::PGPSLocation *arg1 = (papillon::PGPSLocation *) 0 ;
  double result;
  
  arg1 = (papillon::PGPSLocation *)jarg1; 
  result = (double)((papillon::PGPSLocation const *)arg1)->GetLatitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PGPSLocation_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PGPSLocation *arg1 = (papillon::PGPSLocation *) 0 ;
  bool result;
  
  arg1 = (papillon::PGPSLocation *)jarg1; 
  result = (bool)((papillon::PGPSLocation const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PIdentifyResult__SWIG_0() {
  void * jresult ;
  papillon::PIdentifyResult *result = 0 ;
  
  result = (papillon::PIdentifyResult *)new papillon::PIdentifyResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PIdentifyResult__SWIG_1(void * jarg1, char * jarg2, int jarg3, double jarg4) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  double arg4 ;
  papillon::PIdentifyResult *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (double)jarg4; 
  result = (papillon::PIdentifyResult *)new papillon::PIdentifyResult((papillon::PGuid const &)*arg1,(papillon::PString const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PIdentifyResult__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResult *arg1 = 0 ;
  papillon::PIdentifyResult *result = 0 ;
  
  arg1 = (papillon::PIdentifyResult *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResult const & type is null", 0);
    return 0;
  } 
  result = (papillon::PIdentifyResult *)new papillon::PIdentifyResult((papillon::PIdentifyResult const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PIdentifyResult(void * jarg1) {
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResult_Clone(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  papillon::PIdentifyResult result;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = ((papillon::PIdentifyResult const *)arg1)->Clone();
  jresult = new papillon::PIdentifyResult((const papillon::PIdentifyResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PIdentifyResult_Reset(void * jarg1) {
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PIdentifyResult_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  bool result;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = (bool)((papillon::PIdentifyResult const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResult_GetIdentityId(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PIdentifyResult const *)arg1)->GetIdentityId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PIdentifyResult_GetName(void * jarg1) {
  char * jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = ((papillon::PIdentifyResult const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PIdentifyResult_GetRank(void * jarg1) {
  int jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = (papillon::int32)((papillon::PIdentifyResult const *)arg1)->GetRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PIdentifyResult_GetScore(void * jarg1) {
  double jresult ;
  papillon::PIdentifyResult *arg1 = (papillon::PIdentifyResult *) 0 ;
  double result;
  
  arg1 = (papillon::PIdentifyResult *)jarg1; 
  result = (double)((papillon::PIdentifyResult const *)arg1)->GetScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PIdentifyResults__SWIG_0() {
  void * jresult ;
  papillon::PIdentifyResults *result = 0 ;
  
  result = (papillon::PIdentifyResults *)new papillon::PIdentifyResults();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PIdentifyResults__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResults *arg1 = 0 ;
  papillon::PIdentifyResults *result = 0 ;
  
  arg1 = (papillon::PIdentifyResults *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResults const & type is null", 0);
    return 0;
  } 
  result = (papillon::PIdentifyResults *)new papillon::PIdentifyResults((papillon::PIdentifyResults const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PIdentifyResults(void * jarg1) {
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResults_Clone(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::PIdentifyResults result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = ((papillon::PIdentifyResults const *)arg1)->Clone();
  jresult = new papillon::PIdentifyResults((const papillon::PIdentifyResults &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PIdentifyResults_Clear(void * jarg1) {
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PIdentifyResults_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  bool result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = (bool)((papillon::PIdentifyResults const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PIdentifyResults_Size(void * jarg1) {
  int jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = (papillon::int32)((papillon::PIdentifyResults const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PIdentifyResults_Add(void * jarg1, void * jarg2) {
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::PIdentifyResult *arg2 = 0 ;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  arg2 = (papillon::PIdentifyResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResult const & type is null", 0);
    return ;
  } 
  (arg1)->Add((papillon::PIdentifyResult const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResults_Remove(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->Remove(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResults_Get(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::int32 arg2 ;
  papillon::PIdentifyResult result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PIdentifyResults const *)arg1)->Get(arg2);
  jresult = new papillon::PIdentifyResult((const papillon::PIdentifyResult &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PIdentifyResults_GetThreshold(void * jarg1) {
  double jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  double result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = (double)((papillon::PIdentifyResults const *)arg1)->GetThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PIdentifyResults_GetNumberOfMatches(void * jarg1) {
  int jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = (papillon::int32)((papillon::PIdentifyResults const *)arg1)->GetNumberOfMatches();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIdentifyResults_GetResults(void * jarg1) {
  void * jresult ;
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  papillon::PIdentifyResults result;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  result = ((papillon::PIdentifyResults const *)arg1)->GetResults();
  jresult = new papillon::PIdentifyResults((const papillon::PIdentifyResults &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PIdentifyResults_SetThreshold(void * jarg1, double jarg2) {
  papillon::PIdentifyResults *arg1 = (papillon::PIdentifyResults *) 0 ;
  double arg2 ;
  
  arg1 = (papillon::PIdentifyResults *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetThreshold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImageFilter_Create__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PImageFilter *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImageFilter *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImageFilter & type is null", 0);
    return 0;
  } 
  result = papillon::PImageFilter::Create((papillon::PString const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImageFilter_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PImageFilter *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImageFilter *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImageFilter & type is null", 0);
    return 0;
  } 
  result = papillon::PImageFilter::Create((papillon::PPlugin const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImageFilter__SWIG_0() {
  void * jresult ;
  papillon::PImageFilter *result = 0 ;
  
  result = (papillon::PImageFilter *)new papillon::PImageFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PImageFilter__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PImageFilter *arg1 = 0 ;
  papillon::PImageFilter *result = 0 ;
  
  arg1 = (papillon::PImageFilter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImageFilter const & type is null", 0);
    return 0;
  } 
  result = (papillon::PImageFilter *)new papillon::PImageFilter((papillon::PImageFilter const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PImageFilter(void * jarg1) {
  papillon::PImageFilter *arg1 = (papillon::PImageFilter *) 0 ;
  
  arg1 = (papillon::PImageFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImageFilter_Apply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImageFilter *arg1 = (papillon::PImageFilter *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PImage *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImageFilter *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  result = (arg1)->Apply((papillon::PImage const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PImageFilter_Apply__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImageFilter *arg1 = (papillon::PImageFilter *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImageFilter *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame & type is null", 0);
    return 0;
  } 
  result = (arg1)->Apply(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_INT32_STREAM_WIDTH_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_INT32_STREAM_WIDTH;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_INT32_STREAM_HEIGHT_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_INT32_STREAM_HEIGHT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_DOUBLE_STREAM_FPS_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_DOUBLE_STREAM_FPS;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_INT32_GO_TO_FRAME_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_INT32_GO_TO_FRAME;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_INT32_FRAME_COUNT_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_INT32_FRAME_COUNT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_C_PROPERTY_INT32_FRAME_NUMBER_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::PInputVideoStream::C_PROPERTY_INT32_FRAME_NUMBER;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_Open__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PInputVideoStream *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PInputVideoStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PInputVideoStream & type is null", 0);
    return 0;
  } 
  result = papillon::PInputVideoStream::Open((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_Open__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PUri *arg2 = 0 ;
  papillon::PInputVideoStream *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PUri *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PUri const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PInputVideoStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PInputVideoStream & type is null", 0);
    return 0;
  } 
  result = papillon::PInputVideoStream::Open((papillon::PPlugin const &)*arg1,(papillon::PUri const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInputVideoStream__SWIG_0() {
  void * jresult ;
  papillon::PInputVideoStream *result = 0 ;
  
  result = (papillon::PInputVideoStream *)new papillon::PInputVideoStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PInputVideoStream__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = 0 ;
  papillon::PInputVideoStream *result = 0 ;
  
  arg1 = (papillon::PInputVideoStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PInputVideoStream const & type is null", 0);
    return 0;
  } 
  result = (papillon::PInputVideoStream *)new papillon::PInputVideoStream((papillon::PInputVideoStream const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PInputVideoStream(void * jarg1) {
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PInputVideoStream_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (bool)((papillon::PInputVideoStream const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PInputVideoStream_IsOpened(void * jarg1) {
  unsigned int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (bool)((papillon::PInputVideoStream const *)arg1)->IsOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_GetUri(void * jarg1) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PUri result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = ((papillon::PInputVideoStream const *)arg1)->GetUri();
  jresult = new papillon::PUri((const papillon::PUri &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_OpenVideoStream(void * jarg1) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (arg1)->OpenVideoStream();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_Close(void * jarg1) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (arg1)->Close();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_GetFrame__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = (arg1)->GetFrame(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_GetFrame__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetFrame(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PInputVideoStream_SetCheckPeriod(void * jarg1, int jarg2) {
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->SetCheckPeriod(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PInputVideoStream_IsFrozen(void * jarg1) {
  unsigned int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (bool)((papillon::PInputVideoStream const *)arg1)->IsFrozen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PInputVideoStream_CanSeek(void * jarg1) {
  unsigned int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (bool)((papillon::PInputVideoStream const *)arg1)->CanSeek();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_GoToFrame(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->GoToFrame(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PInputVideoStream_GetResolution(void * jarg1) {
  void * jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = ((papillon::PInputVideoStream const *)arg1)->GetResolution();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PInputVideoStream_GetFrameratePerSecond(void * jarg1) {
  double jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  double result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (double)((papillon::PInputVideoStream const *)arg1)->GetFrameratePerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PInputVideoStream_GetCurrentFrameNumber(void * jarg1) {
  int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (papillon::int32)((papillon::PInputVideoStream const *)arg1)->GetCurrentFrameNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PInputVideoStream_GetNumberOfFrames(void * jarg1) {
  int jresult ;
  papillon::PInputVideoStream *arg1 = (papillon::PInputVideoStream *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PInputVideoStream *)jarg1; 
  result = (papillon::int32)((papillon::PInputVideoStream const *)arg1)->GetNumberOfFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFaceMetaData__SWIG_0() {
  void * jresult ;
  papillon::PFaceMetaData *result = 0 ;
  
  result = (papillon::PFaceMetaData *)new papillon::PFaceMetaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFaceMetaData__SWIG_1(int jarg1, double jarg2) {
  void * jresult ;
  papillon::PFaceMetaData::EGenderType arg1 ;
  double arg2 ;
  papillon::PFaceMetaData *result = 0 ;
  
  arg1 = (papillon::PFaceMetaData::EGenderType)jarg1; 
  arg2 = (double)jarg2; 
  result = (papillon::PFaceMetaData *)new papillon::PFaceMetaData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PFaceMetaData__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PFaceMetaData *arg1 = 0 ;
  papillon::PFaceMetaData *result = 0 ;
  
  arg1 = (papillon::PFaceMetaData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFaceMetaData const & type is null", 0);
    return 0;
  } 
  result = (papillon::PFaceMetaData *)new papillon::PFaceMetaData((papillon::PFaceMetaData const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFaceMetaData_FromDescription(void * jarg1) {
  void * jresult ;
  papillon::PDescription *arg1 = 0 ;
  papillon::PFaceMetaData result;
  
  arg1 = (papillon::PDescription *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = papillon::PFaceMetaData::FromDescription((papillon::PDescription const &)*arg1);
  jresult = new papillon::PFaceMetaData((const papillon::PFaceMetaData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFaceMetaData(void * jarg1) {
  papillon::PFaceMetaData *arg1 = (papillon::PFaceMetaData *) 0 ;
  
  arg1 = (papillon::PFaceMetaData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PFaceMetaData_GetGender(void * jarg1) {
  int jresult ;
  papillon::PFaceMetaData *arg1 = (papillon::PFaceMetaData *) 0 ;
  papillon::PFaceMetaData::EGenderType result;
  
  arg1 = (papillon::PFaceMetaData *)jarg1; 
  result = (papillon::PFaceMetaData::EGenderType)((papillon::PFaceMetaData const *)arg1)->GetGender();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PFaceMetaData_GetGenderAsString(void * jarg1) {
  char * jresult ;
  papillon::PFaceMetaData *arg1 = (papillon::PFaceMetaData *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PFaceMetaData *)jarg1; 
  result = ((papillon::PFaceMetaData const *)arg1)->GetGenderAsString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PFaceMetaData_GetGenderConfidence(void * jarg1) {
  double jresult ;
  papillon::PFaceMetaData *arg1 = (papillon::PFaceMetaData *) 0 ;
  double result;
  
  arg1 = (papillon::PFaceMetaData *)jarg1; 
  result = (double)((papillon::PFaceMetaData const *)arg1)->GetGenderConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PFaceMetaData_ToStringOSD(void * jarg1) {
  char * jresult ;
  papillon::PFaceMetaData *arg1 = (papillon::PFaceMetaData *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PFaceMetaData *)jarg1; 
  result = ((papillon::PFaceMetaData const *)arg1)->ToStringOSD();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMatchScore__SWIG_0() {
  void * jresult ;
  papillon::PMatchScore *result = 0 ;
  
  result = (papillon::PMatchScore *)new papillon::PMatchScore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMatchScore__SWIG_1(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  papillon::PMatchScore *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (papillon::PMatchScore *)new papillon::PMatchScore((papillon::PGuid const &)*arg1,(papillon::PGuid const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMatchScore__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  papillon::PGuid *arg2 = 0 ;
  double arg3 ;
  papillon::PMatchScore *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (papillon::PMatchScore *)new papillon::PMatchScore((papillon::PGuid const &)*arg1,(papillon::PGuid const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMatchScore__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PMatchScore *arg1 = 0 ;
  papillon::PMatchScore *result = 0 ;
  
  arg1 = (papillon::PMatchScore *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore const & type is null", 0);
    return 0;
  } 
  result = (papillon::PMatchScore *)new papillon::PMatchScore((papillon::PMatchScore const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PMatchScore(void * jarg1) {
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PMatchScore_Reset(void * jarg1) {
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PMatchScore_SetScore(void * jarg1, double jarg2) {
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  double arg2 ;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetScore(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMatchScore_GetScore(void * jarg1) {
  double jresult ;
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  double result;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  result = (double)((papillon::PMatchScore const *)arg1)->GetScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PMatchScore_SetThreshold(void * jarg1, double jarg2) {
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  double arg2 ;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetThreshold(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMatchScore_GetThreshold(void * jarg1) {
  double jresult ;
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  double result;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  result = (double)((papillon::PMatchScore const *)arg1)->GetThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMatchScore_IsVerified(void * jarg1) {
  unsigned int jresult ;
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  bool result;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  result = (bool)((papillon::PMatchScore const *)arg1)->IsVerified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PMatchScore_GetIdentityId1(void * jarg1) {
  void * jresult ;
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  result = ((papillon::PMatchScore const *)arg1)->GetIdentityId1();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PMatchScore_GetIdentityId2(void * jarg1) {
  void * jresult ;
  papillon::PMatchScore *arg1 = (papillon::PMatchScore *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PMatchScore *)jarg1; 
  result = ((papillon::PMatchScore const *)arg1)->GetIdentityId2();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PMath_NaNf() {
  float jresult ;
  float result;
  
  result = (float)papillon::PMath::NaNf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMath_NaNd() {
  double jresult ;
  double result;
  
  result = (double)papillon::PMath::NaNd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PMath_IntMin() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)papillon::PMath::IntMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PMath_IntMax() {
  int jresult ;
  papillon::int32 result;
  
  result = (papillon::int32)papillon::PMath::IntMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_IsNaN__SWIG_0(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)papillon::PMath::IsNaN(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_IsNaN__SWIG_1(double jarg1) {
  unsigned int jresult ;
  double arg1 ;
  bool result;
  
  arg1 = (double)jarg1; 
  result = (bool)papillon::PMath::IsNaN(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PMath_Clamp__SWIG_0(int jarg1, int jarg2, int jarg3) {
  int jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  int result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (int)papillon::PMath::Clamp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PMath_Clamp__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)papillon::PMath::Clamp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMath_Clamp__SWIG_2(double jarg1, double jarg2, double jarg3) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)papillon::PMath::Clamp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMath_Sigmoid(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)papillon::PMath::Sigmoid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PMath_LERP__SWIG_0(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)papillon::PMath::LERP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PMath_LERP__SWIG_1(double jarg1, double jarg2, double jarg3) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)papillon::PMath::LERP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_RandBool() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)papillon::PMath::RandBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_RandUInt32() {
  unsigned int jresult ;
  papillon::uint32 result;
  
  result = (papillon::uint32)papillon::PMath::RandUInt32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PMath_RandUInt64() {
  unsigned long long jresult ;
  papillon::uint64 result;
  
  result = (papillon::uint64)papillon::PMath::RandUInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PMath_RandUInt63() {
  unsigned long long jresult ;
  papillon::uint64 result;
  
  result = (papillon::uint64)papillon::PMath::RandUInt63();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqual__SWIG_0(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)papillon::PMath::AreAlmostEqual(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqual__SWIG_1(float jarg1, float jarg2) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)papillon::PMath::AreAlmostEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqual__SWIG_2(double jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)papillon::PMath::AreAlmostEqual(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqual__SWIG_3(double jarg1, double jarg2) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)papillon::PMath::AreAlmostEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqualULP__SWIG_0(float jarg1, float jarg2, int jarg3) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  papillon::int32 arg3 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (bool)papillon::PMath::AreAlmostEqualULP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_AreAlmostEqualULP__SWIG_1(float jarg1, float jarg2) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)papillon::PMath::AreAlmostEqualULP(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_GCD(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  papillon::uint32 arg1 ;
  papillon::uint32 arg2 ;
  papillon::uint32 result;
  
  arg1 = (papillon::uint32)jarg1; 
  arg2 = (papillon::uint32)jarg2; 
  result = (papillon::uint32)papillon::PMath::GCD(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_IsPow2(unsigned int jarg1) {
  unsigned int jresult ;
  papillon::uint32 arg1 ;
  bool result;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (bool)papillon::PMath::IsPow2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_Pow2Up(unsigned int jarg1) {
  unsigned int jresult ;
  papillon::uint32 arg1 ;
  papillon::uint32 result;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (papillon::uint32)papillon::PMath::Pow2Up(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_Pow2Down(unsigned int jarg1) {
  unsigned int jresult ;
  papillon::uint32 arg1 ;
  papillon::uint32 result;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (papillon::uint32)papillon::PMath::Pow2Down(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_Pow2Nearest(unsigned int jarg1) {
  unsigned int jresult ;
  papillon::uint32 arg1 ;
  papillon::uint32 result;
  
  arg1 = (papillon::uint32)jarg1; 
  result = (papillon::uint32)papillon::PMath::Pow2Nearest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PMath_IsNthBitSet(int jarg1, int jarg2) {
  unsigned int jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  bool result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (bool)papillon::PMath::IsNthBitSet(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PMath_SetNthBit(int jarg1, int jarg2) {
  int jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::int32)papillon::PMath::SetNthBit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PMath_UnsetNthBit(int jarg1, int jarg2) {
  int jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 result;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::int32)papillon::PMath::UnsetNthBit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PMath(void * jarg1) {
  papillon::PMath *arg1 = (papillon::PMath *) 0 ;
  
  arg1 = (papillon::PMath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMemoryStream__SWIG_0() {
  void * jresult ;
  papillon::PMemoryStream *result = 0 ;
  
  result = (papillon::PMemoryStream *)new papillon::PMemoryStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMemoryStream__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  papillon::int32 arg2 ;
  papillon::PMemoryStream *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PMemoryStream *)new papillon::PMemoryStream((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PMemoryStream__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PByteArray *arg1 = 0 ;
  papillon::PMemoryStream *result = 0 ;
  
  arg1 = (papillon::PByteArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PByteArray const & type is null", 0);
    return 0;
  } 
  result = (papillon::PMemoryStream *)new papillon::PMemoryStream((papillon::PByteArray const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PMemoryStream(void * jarg1) {
  papillon::PMemoryStream *arg1 = (papillon::PMemoryStream *) 0 ;
  
  arg1 = (papillon::PMemoryStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PMemoryStream_GetByteArray(void * jarg1) {
  void * jresult ;
  papillon::PMemoryStream *arg1 = (papillon::PMemoryStream *) 0 ;
  papillon::PByteArray result;
  
  arg1 = (papillon::PMemoryStream *)jarg1; 
  result = ((papillon::PMemoryStream const *)arg1)->GetByteArray();
  jresult = new papillon::PByteArray((const papillon::PByteArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PMemoryStream_WriteObjectDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PMemoryStream *arg1 = (papillon::PMemoryStream *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMemoryStream *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SWIGTEMPLATEDISAMBIGUATOR WriteObject< papillon::PDescription >((papillon::PDescription const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PMemoryStream_ReadObjectDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PMemoryStream *arg1 = (papillon::PMemoryStream *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PMemoryStream *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = (arg1)->SWIGTEMPLATEDISAMBIGUATOR ReadObject< papillon::PDescription >(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_Open__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::POutputVideoStream *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::POutputVideoStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::POutputVideoStream & type is null", 0);
    return 0;
  } 
  result = papillon::POutputVideoStream::Open((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_Open__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PUri *arg2 = 0 ;
  papillon::POutputVideoStream *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PUri *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PUri const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::POutputVideoStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::POutputVideoStream & type is null", 0);
    return 0;
  } 
  result = papillon::POutputVideoStream::Open((papillon::PPlugin const &)*arg1,(papillon::PUri const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_POutputVideoStream__SWIG_0() {
  void * jresult ;
  papillon::POutputVideoStream *result = 0 ;
  
  result = (papillon::POutputVideoStream *)new papillon::POutputVideoStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_POutputVideoStream__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = 0 ;
  papillon::POutputVideoStream *result = 0 ;
  
  arg1 = (papillon::POutputVideoStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::POutputVideoStream const & type is null", 0);
    return 0;
  } 
  result = (papillon::POutputVideoStream *)new papillon::POutputVideoStream((papillon::POutputVideoStream const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_POutputVideoStream(void * jarg1) {
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POutputVideoStream_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  result = (bool)((papillon::POutputVideoStream const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POutputVideoStream_IsOpened(void * jarg1) {
  unsigned int jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  bool result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  result = (bool)((papillon::POutputVideoStream const *)arg1)->IsOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_OpenVideoStream(void * jarg1) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  result = (arg1)->OpenVideoStream();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_Close(void * jarg1) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  result = (arg1)->Close();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_GetUri(void * jarg1) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  papillon::PUri result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  result = ((papillon::POutputVideoStream const *)arg1)->GetUri();
  jresult = new papillon::PUri((const papillon::PUri &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_PutFrame__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  result = ((papillon::POutputVideoStream const *)arg1)->PutFrame((papillon::PFrame const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_POutputVideoStream_PutFrame__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::POutputVideoStream *arg1 = (papillon::POutputVideoStream *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::POutputVideoStream *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  result = ((papillon::POutputVideoStream const *)arg1)->PutFrame((papillon::PFrame const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTextFile_ReadAll(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PTextFile *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PTextFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTextFile & type is null", 0);
    return 0;
  } 
  result = papillon::PTextFile::ReadAll((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTextFile__SWIG_0() {
  void * jresult ;
  papillon::PTextFile *result = 0 ;
  
  result = (papillon::PTextFile *)new papillon::PTextFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTextFile__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PTextFile *arg1 = 0 ;
  papillon::PTextFile *result = 0 ;
  
  arg1 = (papillon::PTextFile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTextFile const & type is null", 0);
    return 0;
  } 
  result = (papillon::PTextFile *)new papillon::PTextFile((papillon::PTextFile const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PTextFile(void * jarg1) {
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PTextFile_GetFileName(void * jarg1) {
  char * jresult ;
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  result = (papillon::PString *) &((papillon::PTextFile const *)arg1)->GetFileName();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTextFile_GetNumberOfLines(void * jarg1) {
  int jresult ;
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  result = (papillon::int32)((papillon::PTextFile const *)arg1)->GetNumberOfLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PTextFile_GetLine__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString result;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PTextFile const *)arg1)->GetLine(arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTextFile_GetLine__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = ((papillon::PTextFile const *)arg1)->GetLine(arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTextFile_GetLines(void * jarg1) {
  void * jresult ;
  papillon::PTextFile *arg1 = (papillon::PTextFile *) 0 ;
  papillon::PStringList *result = 0 ;
  
  arg1 = (papillon::PTextFile *)jarg1; 
  result = (papillon::PStringList *) &((papillon::PTextFile const *)arg1)->GetLines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PTime *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (papillon::PTime *)new papillon::PTime(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PTime *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PTime *)new papillon::PTime(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PTime *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PTime *)new papillon::PTime(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_3(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PTime *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PTime *)new papillon::PTime(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_4() {
  void * jresult ;
  papillon::PTime *result = 0 ;
  
  result = (papillon::PTime *)new papillon::PTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_5(void * jarg1) {
  void * jresult ;
  papillon::PTime *arg1 = 0 ;
  papillon::PTime *result = 0 ;
  
  arg1 = (papillon::PTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::PTime *)new papillon::PTime((papillon::PTime const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_6(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PTime *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PTime *)new papillon::PTime((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTime__SWIG_7(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PTime *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PTime *)new papillon::PTime((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PTime(void * jarg1) {
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  
  arg1 = (papillon::PTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTime_Current() {
  void * jresult ;
  papillon::PTime result;
  
  result = papillon::PTime::Current();
  jresult = new papillon::PTime((const papillon::PTime &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_GetHour(void * jarg1) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = (papillon::int32)((papillon::PTime const *)arg1)->GetHour();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_GetMinute(void * jarg1) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = (papillon::int32)((papillon::PTime const *)arg1)->GetMinute();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_GetSecond(void * jarg1) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = (papillon::int32)((papillon::PTime const *)arg1)->GetSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_GetMillisecond(void * jarg1) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = (papillon::int32)((papillon::PTime const *)arg1)->GetMillisecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PTime_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  bool result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = (bool)((papillon::PTime const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PTime_AddMillisecond(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::int32 arg2 ;
  papillon::PTime result;
  
  arg1 = (papillon::PTime *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = ((papillon::PTime const *)arg1)->AddMillisecond(arg2);
  jresult = new papillon::PTime((const papillon::PTime &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_GetMillisecondsTo(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::PTime *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  arg2 = (papillon::PTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PTime const *)arg1)->GetMillisecondsTo((papillon::PTime const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTime_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::PTime *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTime *)jarg1; 
  arg2 = (papillon::PTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PTime const *)arg1)->Compare((papillon::PTime const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PTime_ToString__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PTime *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PTime const *)arg1)->ToString((papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PTime_ToString__SWIG_1(void * jarg1) {
  char * jresult ;
  papillon::PTime *arg1 = (papillon::PTime *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PTime *)jarg1; 
  result = ((papillon::PTime const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTimer__SWIG_0(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PTimer *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PTimer *)new papillon::PTimer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTimer__SWIG_1() {
  void * jresult ;
  papillon::PTimer *result = 0 ;
  
  result = (papillon::PTimer *)new papillon::PTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PTimer(void * jarg1) {
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  
  arg1 = (papillon::PTimer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PTimer__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PTimer *arg1 = 0 ;
  papillon::PTimer *result = 0 ;
  
  arg1 = (papillon::PTimer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PTimer const & type is null", 0);
    return 0;
  } 
  result = (papillon::PTimer *)new papillon::PTimer((papillon::PTimer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PTimer_Reset(void * jarg1) {
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  
  arg1 = (papillon::PTimer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PTimer_Start(void * jarg1) {
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  
  arg1 = (papillon::PTimer *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_Stop(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)(arg1)->Stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_ElapsedSec(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)((papillon::PTimer const *)arg1)->ElapsedSec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_ElapsedMs(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)((papillon::PTimer const *)arg1)->ElapsedMs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_Min(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)((papillon::PTimer const *)arg1)->Min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_Max(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)((papillon::PTimer const *)arg1)->Max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_Average(void * jarg1) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (double)((papillon::PTimer const *)arg1)->Average();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PTimer_Size(void * jarg1) {
  int jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = (papillon::int32)((papillon::PTimer const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PTimer_Get(void * jarg1, int jarg2) {
  double jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  papillon::int32 arg2 ;
  double result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (double)((papillon::PTimer const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PTimer_ElapsedToString(void * jarg1) {
  char * jresult ;
  papillon::PTimer *arg1 = (papillon::PTimer *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PTimer *)jarg1; 
  result = ((papillon::PTimer const *)arg1)->ElapsedToString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUri__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  papillon::PUri *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (papillon::PUri *)new papillon::PUri((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUri__SWIG_1() {
  void * jresult ;
  papillon::PUri *result = 0 ;
  
  result = (papillon::PUri *)new papillon::PUri();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUri__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PUri *arg1 = 0 ;
  papillon::PUri *result = 0 ;
  
  arg1 = (papillon::PUri *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PUri const & type is null", 0);
    return 0;
  } 
  result = (papillon::PUri *)new papillon::PUri((papillon::PUri const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUri(void * jarg1) {
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  
  arg1 = (papillon::PUri *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_IsFile(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->IsFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_IsNetwork(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->IsNetwork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUri_CheckScheme(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PStringList *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PUri *)jarg1; 
  arg2 = (papillon::PStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStringList const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PUri const *)arg1)->CheckScheme((papillon::PStringList const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetScheme(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetScheme();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetUsername(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetUsername();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetPassword(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetPassword();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetHost(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetHost();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PUri_GetPort(void * jarg1) {
  int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (papillon::int32)((papillon::PUri const *)arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetAuthority(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetAuthority();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetPath(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetPath();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_HasQuery(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->HasQuery();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_HasQueryItem(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)((papillon::PUri const *)arg1)->HasQueryItem((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetQueryString(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetQueryString();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_GetQueryValue__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PUri const *)arg1)->GetQueryValue((papillon::PString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_GetQueryValue__SWIG_1(void * jarg1, char * jarg2, int * jarg3) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 *arg3 = 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32 *)jarg3; 
  result = (bool)((papillon::PUri const *)arg1)->GetQueryValue((papillon::PString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_GetQueryValue__SWIG_2(void * jarg1, char * jarg2, double * jarg3) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (double *)jarg3; 
  result = (bool)((papillon::PUri const *)arg1)->GetQueryValue((papillon::PString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_RemoveQueryItem(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (bool)(arg1)->RemoveQueryItem((papillon::PString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_GetFragment(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->GetFragment();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUri_Encode(void * jarg1) {
  void * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (arg1)->Encode();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUri_Decode(void * jarg1) {
  void * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (arg1)->Decode();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_IsEncoded(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->IsEncoded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUri_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  bool result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = (bool)((papillon::PUri const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUri_ToStringRemovedUserInfo(void * jarg1) {
  char * jresult ;
  papillon::PUri *arg1 = (papillon::PUri *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PUri *)jarg1; 
  result = ((papillon::PUri const *)arg1)->ToStringRemovedUserInfo();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PUtils_GetEnv(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PUtils::GetEnv((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUtils_IsEscPressed() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)papillon::PUtils::IsEscPressed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUtils_IsKeyPressed__SWIG_0(int jarg1) {
  unsigned int jresult ;
  papillon::int32 arg1 ;
  bool result;
  
  arg1 = (papillon::int32)jarg1; 
  result = (bool)papillon::PUtils::IsKeyPressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PUtils_IsKeyPressed__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)papillon::PUtils::IsKeyPressed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUtils_WaitForKeyPressed() {
  papillon::PUtils::WaitForKeyPressed();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_GetCurrentProcessMemoryUsageMB(float * jarg1, float * jarg2, unsigned int * jarg3) {
  void * jresult ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  papillon::uint32 *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (papillon::uint32 *)jarg3; 
  result = papillon::PUtils::GetCurrentProcessMemoryUsageMB(*arg1,*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUtils_PrintStackTrace(void * jarg1) {
  papillon::PLogStream *arg1 = 0 ;
  
  arg1 = (papillon::PLogStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PLogStream const & type is null", 0);
    return ;
  } 
  papillon::PUtils::PrintStackTrace((papillon::PLogStream const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetectionList__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  papillon::int32 arg6 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::DrawDetectionList(arg1,(papillon::PDetectionList const &)*arg2,(papillon::PColour3i const &)*arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetectionList__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = papillon::PUtils::DrawDetectionList(arg1,(papillon::PDetectionList const &)*arg2,(papillon::PColour3i const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetectionList__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = papillon::PUtils::DrawDetectionList(arg1,(papillon::PDetectionList const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetectionList__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawDetectionList(arg1,(papillon::PDetectionList const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetectionList__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawDetectionList(arg1,(papillon::PDetectionList const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  papillon::int32 arg6 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PColour3i const &)*arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PColour3i const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_5(void * jarg1, void * jarg2, char * jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  papillon::int32 arg6 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_6(void * jarg1, void * jarg2, char * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_7(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawDetection__SWIG_8(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DrawDetection(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5, int jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::int32 arg6 ;
  papillon::PColour3i *arg7 = 0 ;
  papillon::PColour3i *arg8 = 0 ;
  papillon::PColour3i *arg9 = 0 ;
  papillon::PImage::EFont arg10 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PColour3i *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg8 = (papillon::PColour3i *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg9 = (papillon::PColour3i *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg10 = (papillon::PImage::EFont)jarg10; 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,(papillon::PColour3i const &)*arg7,(papillon::PColour3i const &)*arg8,(papillon::PColour3i const &)*arg9,arg10);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5, int jarg6, void * jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::int32 arg6 ;
  papillon::PColour3i *arg7 = 0 ;
  papillon::PColour3i *arg8 = 0 ;
  papillon::PColour3i *arg9 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PColour3i *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg8 = (papillon::PColour3i *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg9 = (papillon::PColour3i *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,(papillon::PColour3i const &)*arg7,(papillon::PColour3i const &)*arg8,(papillon::PColour3i const &)*arg9);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_2(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5, int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::int32 arg6 ;
  papillon::PColour3i *arg7 = 0 ;
  papillon::PColour3i *arg8 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PColour3i *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg8 = (papillon::PColour3i *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,(papillon::PColour3i const &)*arg7,(papillon::PColour3i const &)*arg8);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_3(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5, int jarg6, void * jarg7) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::int32 arg6 ;
  papillon::PColour3i *arg7 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PColour3i *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,(papillon::PColour3i const &)*arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_4(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_5(void * jarg1, void * jarg2, char * jarg3, int jarg4, double jarg5) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  double arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (double)jarg5; 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_6(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawRectangle__SWIG_7(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PRectanglei *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PRectanglei *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PRectanglei const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DrawRectangle(*arg1,(papillon::PRectanglei const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, double jarg6, int jarg7, void * jarg8, int jarg9) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PUtils::ELabelColourScheme arg5 ;
  double arg6 ;
  papillon::int32 arg7 ;
  papillon::PColour3i *arg8 = 0 ;
  papillon::PImage::EFont *arg9 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PImage::EFont temp9 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (papillon::PUtils::ELabelColourScheme)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (papillon::int32)jarg7; 
  arg8 = (papillon::PColour3i *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  temp9 = (papillon::PImage::EFont)jarg9; 
  arg9 = &temp9; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,arg7,(papillon::PColour3i const &)*arg8,(enum papillon::PImage::EFont const &)*arg9);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, double jarg6, int jarg7, void * jarg8) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PUtils::ELabelColourScheme arg5 ;
  double arg6 ;
  papillon::int32 arg7 ;
  papillon::PColour3i *arg8 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (papillon::PUtils::ELabelColourScheme)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (papillon::int32)jarg7; 
  arg8 = (papillon::PColour3i *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,arg7,(papillon::PColour3i const &)*arg8);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_2(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, double jarg6, int jarg7) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PUtils::ELabelColourScheme arg5 ;
  double arg6 ;
  papillon::int32 arg7 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (papillon::PUtils::ELabelColourScheme)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (papillon::int32)jarg7; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_3(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, double jarg6) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PUtils::ELabelColourScheme arg5 ;
  double arg6 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (papillon::PUtils::ELabelColourScheme)jarg5; 
  arg6 = (double)jarg6; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_4(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PUtils::ELabelColourScheme arg5 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  arg5 = (papillon::PUtils::ELabelColourScheme)jarg5; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_5(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PUtils::ELabelPosition arg4 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PUtils::ELabelPosition)jarg4; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_6(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_7(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7, int jarg8, void * jarg9, int jarg10) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PUtils::ELabelPosition arg6 ;
  double arg7 ;
  papillon::int32 arg8 ;
  papillon::PColour3i *arg9 = 0 ;
  papillon::PImage::EFont *arg10 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PImage::EFont temp10 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PUtils::ELabelPosition)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (papillon::int32)jarg8; 
  arg9 = (papillon::PColour3i *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  temp10 = (papillon::PImage::EFont)jarg10; 
  arg10 = &temp10; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8,(papillon::PColour3i const &)*arg9,(enum papillon::PImage::EFont const &)*arg10);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_8(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7, int jarg8, void * jarg9) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PUtils::ELabelPosition arg6 ;
  double arg7 ;
  papillon::int32 arg8 ;
  papillon::PColour3i *arg9 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PUtils::ELabelPosition)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (papillon::int32)jarg8; 
  arg9 = (papillon::PColour3i *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8,(papillon::PColour3i const &)*arg9);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_9(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7, int jarg8) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PUtils::ELabelPosition arg6 ;
  double arg7 ;
  papillon::int32 arg8 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PUtils::ELabelPosition)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (papillon::int32)jarg8; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_10(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PUtils::ELabelPosition arg6 ;
  double arg7 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PUtils::ELabelPosition)jarg6; 
  arg7 = (double)jarg7; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_11(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PUtils::ELabelPosition arg6 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PUtils::ELabelPosition)jarg6; 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawLabel__SWIG_12(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawLabel(arg1,(papillon::PDetection const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_0(char * jarg1, double jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, int jarg8) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::PImage::EFont arg7 ;
  papillon::PImage::EPixelFormat arg8 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PImage::EFont)jarg7; 
  arg8 = (papillon::PImage::EPixelFormat)jarg8; 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_1(char * jarg1, double jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::PImage::EFont arg7 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::PImage::EFont)jarg7; 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6,arg7);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_2(char * jarg1, double jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_3(char * jarg1, double jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3,(papillon::PColour3i const &)*arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_4(char * jarg1, double jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_5(char * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::int32 arg3 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2,arg3);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_6(char * jarg1, double jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  double arg2 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (double)jarg2; 
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1,arg2);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_MakeLabel__SWIG_7(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PImage result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PUtils::MakeLabel((papillon::PString const &)*arg1);
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_0(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, int jarg8, int jarg9) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  papillon::int32 arg8 ;
  papillon::int32 arg9 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (papillon::int32)jarg8; 
  arg9 = (papillon::int32)jarg9; 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_1(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, int jarg8) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  papillon::int32 arg8 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (papillon::int32)jarg8; 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6,arg7,arg8);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_2(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_3(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_4(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_5(void * jarg1, void * jarg2, char * jarg3, float jarg4) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetectionList__SWIG_6(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DisplayDetectionList((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFirstFaceDetection__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (papillon::int32)jarg6; 
  result = papillon::PUtils::DisplayFirstFaceDetection((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFirstFaceDetection__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = papillon::PUtils::DisplayFirstFaceDetection((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFirstFaceDetection__SWIG_2(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DisplayFirstFaceDetection((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFirstFaceDetection__SWIG_3(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DisplayFirstFaceDetection((papillon::PFrame const &)*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_0(void * jarg1, char * jarg2, float jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  papillon::int32 arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (papillon::int32)jarg7; 
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2,arg3,(papillon::PColour3i const &)*arg4,arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_1(void * jarg1, char * jarg2, float jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2,arg3,(papillon::PColour3i const &)*arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_2(void * jarg1, char * jarg2, float jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  bool arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2,arg3,(papillon::PColour3i const &)*arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_3(void * jarg1, char * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PColour3i *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  arg4 = (papillon::PColour3i *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2,arg3,(papillon::PColour3i const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_4(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  float arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (float)jarg3; 
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayDetection__SWIG_5(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PUtils::DisplayDetection((papillon::PDetection const &)*arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFeatureMap__SWIG_0(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6, int jarg7) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  papillon::int32 arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = (papillon::int32)jarg7; 
  result = papillon::PUtils::DisplayFeatureMap((papillon::PFrame const &)*arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFeatureMap__SWIG_1(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  bool arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = papillon::PUtils::DisplayFeatureMap((papillon::PFrame const &)*arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFeatureMap__SWIG_2(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PColour3i *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  arg5 = (papillon::PColour3i *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DisplayFeatureMap((papillon::PFrame const &)*arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PString const &)*arg3,arg4,(papillon::PColour3i const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFeatureMap__SWIG_3(void * jarg1, void * jarg2, char * jarg3, float jarg4) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  float arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (float)jarg4; 
  result = papillon::PUtils::DisplayFeatureMap((papillon::PFrame const &)*arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PString const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DisplayFeatureMap__SWIG_4(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PFrame *arg1 = 0 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PUtils::DisplayFeatureMap((papillon::PFrame const &)*arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawFeatureMap__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  papillon::int32 arg5 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (papillon::int32)jarg5; 
  result = papillon::PUtils::DrawFeatureMap(arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PColour3i const &)*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawFeatureMap__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  bool arg4 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = papillon::PUtils::DrawFeatureMap(arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawFeatureMap__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawFeatureMap(arg1,(papillon::PFeatureMap const &)*arg2,(papillon::PColour3i const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_DrawFeatureMap__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PImage arg1 ;
  papillon::PFeatureMap *arg2 = 0 ;
  papillon::PImage *argp1 ;
  papillon::PResult result;
  
  argp1 = (papillon::PImage *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PImage", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (papillon::PFeatureMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFeatureMap const & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::DrawFeatureMap(arg1,(papillon::PFeatureMap const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_CropDetection__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PImage *arg2 = 0 ;
  double arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = papillon::PUtils::CropDetection((papillon::PDetection const &)*arg1,*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_CropDetection__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PDetection *arg1 = 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  result = papillon::PUtils::CropDetection((papillon::PDetection const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_BlurDetection(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PDetection *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetection const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = papillon::PUtils::BlurDetection(*arg1,(papillon::PDetection const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PUtils_BlurDetectionList(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  papillon::PDetectionList *arg2 = 0 ;
  papillon::PColour3i *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PDetectionList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetectionList const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PColour3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PColour3i const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = papillon::PUtils::BlurDetectionList(*arg1,(papillon::PDetectionList const &)*arg2,(papillon::PColour3i const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUtils(void * jarg1) {
  papillon::PUtils *arg1 = (papillon::PUtils *) 0 ;
  
  arg1 = (papillon::PUtils *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PVersion *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = (papillon::PVersion *)new papillon::PVersion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::int32 arg3 ;
  papillon::PVersion *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PVersion *)new papillon::PVersion(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::int32 arg2 ;
  papillon::PVersion *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (papillon::PVersion *)new papillon::PVersion(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_3(int jarg1) {
  void * jresult ;
  papillon::int32 arg1 ;
  papillon::PVersion *result = 0 ;
  
  arg1 = (papillon::int32)jarg1; 
  result = (papillon::PVersion *)new papillon::PVersion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_4() {
  void * jresult ;
  papillon::PVersion *result = 0 ;
  
  result = (papillon::PVersion *)new papillon::PVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_5(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PVersion *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PVersion *)new papillon::PVersion((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVersion__SWIG_6(void * jarg1) {
  void * jresult ;
  papillon::PVersion *arg1 = 0 ;
  papillon::PVersion *result = 0 ;
  
  arg1 = (papillon::PVersion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PVersion const & type is null", 0);
    return 0;
  } 
  result = (papillon::PVersion *)new papillon::PVersion((papillon::PVersion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PVersion(void * jarg1) {
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  
  arg1 = (papillon::PVersion *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVersion_IsNull(void * jarg1) {
  unsigned int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  bool result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (bool)((papillon::PVersion const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVersion_IsDebug(void * jarg1) {
  unsigned int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  bool result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (bool)((papillon::PVersion const *)arg1)->IsDebug();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVersion_IsRelease(void * jarg1) {
  unsigned int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  bool result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (bool)((papillon::PVersion const *)arg1)->IsRelease();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVersion_IsX64(void * jarg1) {
  unsigned int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  bool result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (bool)((papillon::PVersion const *)arg1)->IsX64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVersion_IsX86(void * jarg1) {
  unsigned int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  bool result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (bool)((papillon::PVersion const *)arg1)->IsX86();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVersion_GetMajor(void * jarg1) {
  int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (papillon::int32)((papillon::PVersion const *)arg1)->GetMajor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVersion_GetMinor(void * jarg1) {
  int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (papillon::int32)((papillon::PVersion const *)arg1)->GetMinor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVersion_GetMaintenance(void * jarg1) {
  int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (papillon::int32)((papillon::PVersion const *)arg1)->GetMaintenance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVersion_GetBuild(void * jarg1) {
  int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = (papillon::int32)((papillon::PVersion const *)arg1)->GetBuild();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVersion_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::PVersion *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  arg2 = (papillon::PVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PVersion const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PVersion const *)arg1)->Compare((papillon::PVersion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVersion_Null() {
  void * jresult ;
  papillon::PVersion *result = 0 ;
  
  result = (papillon::PVersion *) &papillon::PVersion::Null();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PVersion_ToStringMajorMinor(void * jarg1) {
  char * jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = ((papillon::PVersion const *)arg1)->ToStringMajorMinor();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PVersion_ToString4Numbers(void * jarg1) {
  char * jresult ;
  papillon::PVersion *arg1 = (papillon::PVersion *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PVersion *)jarg1; 
  result = ((papillon::PVersion const *)arg1)->ToString4Numbers();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSWatchlistSingleUpdate__SWIG_0() {
  void * jresult ;
  papillon::PSWatchlistSingleUpdate *result = 0 ;
  
  result = (papillon::PSWatchlistSingleUpdate *)new papillon::PSWatchlistSingleUpdate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSWatchlistSingleUpdate__SWIG_1(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PSWatchlistSingleUpdate::EChangeType arg1 ;
  papillon::PGuid arg2 ;
  papillon::PDescription arg3 ;
  papillon::PGuid *argp2 ;
  papillon::PDescription *argp3 ;
  papillon::PSWatchlistSingleUpdate *result = 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate::EChangeType)jarg1; 
  argp2 = (papillon::PGuid *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PGuid", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (papillon::PDescription *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PDescription", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (papillon::PSWatchlistSingleUpdate *)new papillon::PSWatchlistSingleUpdate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_action_set(void * jarg1, int jarg2) {
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PSWatchlistSingleUpdate::EChangeType arg2 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  arg2 = (papillon::PSWatchlistSingleUpdate::EChangeType)jarg2; 
  if (arg1) (arg1)->m_action = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_action_get(void * jarg1) {
  int jresult ;
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PSWatchlistSingleUpdate::EChangeType result;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  result = (papillon::PSWatchlistSingleUpdate::EChangeType) ((arg1)->m_action);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_objectId_set(void * jarg1, void * jarg2) {
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PGuid *arg2 = (papillon::PGuid *) 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2; 
  if (arg1) (arg1)->m_objectId = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_objectId_get(void * jarg1) {
  void * jresult ;
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  result = (papillon::PGuid *)& ((arg1)->m_objectId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_description_set(void * jarg1, void * jarg2) {
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PDescription *arg2 = (papillon::PDescription *) 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2; 
  if (arg1) (arg1)->m_description = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSWatchlistSingleUpdate_m_description_get(void * jarg1) {
  void * jresult ;
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  papillon::PDescription *result = 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  result = (papillon::PDescription *)& ((arg1)->m_description);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSWatchlistSingleUpdate(void * jarg1) {
  papillon::PSWatchlistSingleUpdate *arg1 = (papillon::PSWatchlistSingleUpdate *) 0 ;
  
  arg1 = (papillon::PSWatchlistSingleUpdate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PIAsynchronousWatchlistUpdater(void * jarg1) {
  papillon::PIAsynchronousWatchlistUpdater *arg1 = (papillon::PIAsynchronousWatchlistUpdater *) 0 ;
  
  arg1 = (papillon::PIAsynchronousWatchlistUpdater *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PIAsynchronousWatchlistUpdater_GetNextChange(void * jarg1) {
  void * jresult ;
  papillon::PIAsynchronousWatchlistUpdater *arg1 = (papillon::PIAsynchronousWatchlistUpdater *) 0 ;
  papillon::PSWatchlistSingleUpdate result;
  
  arg1 = (papillon::PIAsynchronousWatchlistUpdater *)jarg1; 
  result = (arg1)->GetNextChange();
  jresult = new papillon::PSWatchlistSingleUpdate((const papillon::PSWatchlistSingleUpdate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PWatchlist__SWIG_0() {
  void * jresult ;
  papillon::PWatchlist *result = 0 ;
  
  result = (papillon::PWatchlist *)new papillon::PWatchlist();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PWatchlist__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PWatchlist *arg1 = 0 ;
  papillon::PWatchlist *result = 0 ;
  
  arg1 = (papillon::PWatchlist *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist const & type is null", 0);
    return 0;
  } 
  result = (papillon::PWatchlist *)new papillon::PWatchlist((papillon::PWatchlist const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PWatchlist(void * jarg1) {
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_GetId(void * jarg1) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = ((papillon::PWatchlist const *)arg1)->GetId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PWatchlist_Clear(void * jarg1) {
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PWatchlist_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  bool result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = (bool)((papillon::PWatchlist const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PWatchlist_IsCompatibleWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PWatchlist const *)arg1)->IsCompatibleWith((papillon::PGuid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PWatchlist_Size(void * jarg1) {
  int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = (papillon::int32)((papillon::PWatchlist const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PWatchlist_GetNumberOfDescriptors__SWIG_0(void * jarg1) {
  int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = (papillon::int32)((papillon::PWatchlist const *)arg1)->GetNumberOfDescriptors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PWatchlist_GetNumberOfDescriptors__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)((papillon::PWatchlist const *)arg1)->GetNumberOfDescriptors((papillon::PGuid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_GetAllDescribeId(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PList arg2 ;
  papillon::PList *argp2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  argp2 = (papillon::PList *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PList", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetAllDescribeId(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PWatchlist_RecomputeDescriptors(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PDetector *arg3 = 0 ;
  papillon::PDescriber *arg4 = 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDetector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PDescriber *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber const & type is null", 0);
    return 0;
  } 
  result = (papillon::int32)(arg1)->RecomputeDescriptors((papillon::PGuid const &)*arg2,(papillon::PDetector const &)*arg3,(papillon::PDescriber const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PWatchlist_Has(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PWatchlist const *)arg1)->Has((papillon::PGuid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Add((papillon::PDescription const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Update(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Update((papillon::PDescription const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Remove(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Remove((papillon::PGuid const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PWatchlist_SetAynchronousUpdater__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PIAsynchronousWatchlistUpdater *arg2 = (papillon::PIAsynchronousWatchlistUpdater *) 0 ;
  papillon::int32 arg3 ;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PIAsynchronousWatchlistUpdater *)jarg2; 
  arg3 = (papillon::int32)jarg3; 
  (arg1)->SetAynchronousUpdater(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PWatchlist_SetAynchronousUpdater__SWIG_1(void * jarg1, void * jarg2) {
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PIAsynchronousWatchlistUpdater *arg2 = (papillon::PIAsynchronousWatchlistUpdater *) 0 ;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PIAsynchronousWatchlistUpdater *)jarg2; 
  (arg1)->SetAynchronousUpdater(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Search__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, float jarg6, unsigned int jarg7) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PComparer *arg3 = 0 ;
  papillon::PIdentifyResults *arg4 = 0 ;
  papillon::int32 arg5 ;
  float arg6 ;
  bool arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PComparer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PIdentifyResults *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResults & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((papillon::PWatchlist const *)arg1)->Search((papillon::PDescription const &)*arg2,(papillon::PComparer const &)*arg3,*arg4,arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Search__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, float jarg6) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PComparer *arg3 = 0 ;
  papillon::PIdentifyResults *arg4 = 0 ;
  papillon::int32 arg5 ;
  float arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PComparer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PIdentifyResults *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResults & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (float)jarg6; 
  result = ((papillon::PWatchlist const *)arg1)->Search((papillon::PDescription const &)*arg2,(papillon::PComparer const &)*arg3,*arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_Search__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PComparer *arg3 = 0 ;
  papillon::PWatchlistOptions *arg4 = 0 ;
  papillon::PIdentifyResults *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PComparer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PComparer const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PWatchlistOptions *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlistOptions const & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PIdentifyResults *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PIdentifyResults & type is null", 0);
    return 0;
  } 
  result = ((papillon::PWatchlist const *)arg1)->Search((papillon::PDescription const &)*arg2,(papillon::PComparer const &)*arg3,(papillon::PWatchlistOptions const &)*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_SetNormalisationDistributions(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (arg1)->SetNormalisationDistributions(arg2,arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_GetDescription(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PWatchlist const *)arg1)->GetDescription((papillon::PGuid const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_GetAllDescriptions(void * jarg1) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = ((papillon::PWatchlist const *)arg1)->GetAllDescriptions();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_GetIdentityIds(void * jarg1) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  result = ((papillon::PWatchlist const *)arg1)->GetIdentityIds();
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_FindIdentityIdsByName__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString::ECaseSensitivity arg3 ;
  papillon::PList result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PString::ECaseSensitivity)jarg3; 
  result = ((papillon::PWatchlist const *)arg1)->FindIdentityIdsByName((papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_FindIdentityIdsByName__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PList result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = ((papillon::PWatchlist const *)arg1)->FindIdentityIdsByName((papillon::PString const &)*arg2);
  jresult = new papillon::PList((const papillon::PList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_ReadFromFile(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = papillon::PWatchlist::ReadFromFile((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_ReadFromStore(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStore *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStore const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = papillon::PWatchlist::ReadFromStore((papillon::PStore const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_WriteToFile(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->WriteToFile((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlist_WriteToStore(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PWatchlist *arg1 = (papillon::PWatchlist *) 0 ;
  papillon::PStore arg2 ;
  papillon::PStore *argp2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlist *)jarg1; 
  argp2 = (papillon::PStore *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null papillon::PStore", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->WriteToStore(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PWatchlistOptions__SWIG_0() {
  void * jresult ;
  papillon::PWatchlistOptions *result = 0 ;
  
  result = (papillon::PWatchlistOptions *)new papillon::PWatchlistOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PWatchlistOptions__SWIG_1(float jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  float arg1 ;
  papillon::int32 arg2 ;
  bool arg3 ;
  papillon::PProperties *arg4 = 0 ;
  papillon::PWatchlistOptions *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (papillon::PProperties *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  result = (papillon::PWatchlistOptions *)new papillon::PWatchlistOptions(arg1,arg2,arg3,(papillon::PProperties const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PWatchlistOptions__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PWatchlistOptions *arg1 = 0 ;
  papillon::PWatchlistOptions *result = 0 ;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlistOptions const & type is null", 0);
    return 0;
  } 
  result = (papillon::PWatchlistOptions *)new papillon::PWatchlistOptions((papillon::PWatchlistOptions const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PWatchlistOptions(void * jarg1) {
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PWatchlistOptions_Reset(void * jarg1) {
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlistOptions_SetThreshold(void * jarg1, float jarg2) {
  void * jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  float arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  arg2 = (float)jarg2; 
  result = (arg1)->SetThreshold(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PWatchlistOptions_GetThreshold(void * jarg1) {
  float jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  float result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  result = (float)((papillon::PWatchlistOptions const *)arg1)->GetThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlistOptions_SetTopN(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->SetTopN(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PWatchlistOptions_GetTopN(void * jarg1) {
  int jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  result = (papillon::int32)((papillon::PWatchlistOptions const *)arg1)->GetTopN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PWatchlistOptions_SetNormalise(void * jarg1, unsigned int jarg2) {
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNormalise(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PWatchlistOptions_GetNormalise(void * jarg1) {
  unsigned int jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  bool result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  result = (bool)((papillon::PWatchlistOptions const *)arg1)->GetNormalise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlistOptions_SetParameter(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetParameter((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PWatchlistOptions_GetParameter(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PWatchlistOptions *arg1 = (papillon::PWatchlistOptions *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PWatchlistOptions *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PWatchlistOptions const *)arg1)->GetParameter((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_STR_DEFAULT_LOG_FORMAT_get() {
  void * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *)&papillon::C_STR_DEFAULT_LOG_FORMAT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PLog_GetPrefix() {
  char * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *) &papillon::PLog::GetPrefix();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLog_SetPrefix(char * jarg1) {
  papillon::PString *arg1 = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  papillon::PLog::SetPrefix((papillon::PString const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_OpenConsoleLogger__SWIG_0(int jarg1) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  result = papillon::PLog::OpenConsoleLogger(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_OpenConsoleLogger__SWIG_1() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PLog::OpenConsoleLogger();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_OpenFileLogger__SWIG_0(char * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PLog::ELogLevel arg3 ;
  int arg4 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PLog::ELogLevel)jarg3; 
  arg4 = (int)jarg4; 
  result = papillon::PLog::OpenFileLogger((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_OpenFileLogger__SWIG_1(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PLog::ELogLevel arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PLog::ELogLevel)jarg3; 
  result = papillon::PLog::OpenFileLogger((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_OpenFileLogger__SWIG_2(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PLog::OpenFileLogger((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_Close(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PLog::Close((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_CloseConsole() {
  void * jresult ;
  papillon::PResult result;
  
  result = papillon::PLog::CloseConsole();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLog_DisableConsoleLoggerOnDebug() {
  papillon::PLog::DisableConsoleLoggerOnDebug();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetLevel(char * jarg1, int jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PLog::ELogLevel arg2 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PLog::ELogLevel)jarg2; 
  result = papillon::PLog::SetLevel((papillon::PString const &)*arg1,arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetConsoleLevel(int jarg1) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PResult result;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  result = papillon::PLog::SetConsoleLevel(arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLog_GetLevel(char * jarg1) {
  int jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PLog::ELogLevel result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PLog::ELogLevel)papillon::PLog::GetLevel((papillon::PString const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLog_GetConsoleLevel() {
  int jresult ;
  papillon::PLog::ELogLevel result;
  
  result = (papillon::PLog::ELogLevel)papillon::PLog::GetConsoleLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLog_EnableConsoleLogger() {
  papillon::PLog::EnableConsoleLogger();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLog_DisableConsoleLogger() {
  papillon::PLog::DisableConsoleLogger();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetFormat(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PLog::SetFormat((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetConsoleFormat(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PLog::SetConsoleFormat((papillon::PString const &)*arg1);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetRegExpFilter__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PLog::ERegExpPattern arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PLog::ERegExpPattern)jarg3; 
  result = papillon::PLog::SetRegExpFilter((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_SetRegExpFilter__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PLog::SetRegExpFilter((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_Log__SWIG_0(int jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = papillon::PLog::Log(arg1,(papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_Log__SWIG_1(int jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = papillon::PLog::Log(arg1,(papillon::PString const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLog_Log__SWIG_2(int jarg1, char * jarg2) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PLog::Log(arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLog_LogLevelFromString(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  papillon::PLog::ELogLevel result;
  
  arg1 = (char *)jarg1; 
  result = (papillon::PLog::ELogLevel)papillon::PLog::LogLevelFromString((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLog(void * jarg1) {
  papillon::PLog *arg1 = (papillon::PLog *) 0 ;
  
  arg1 = (papillon::PLog *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLogStream__SWIG_0(int jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PLogStream *result = 0 ;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (papillon::PLogStream *)new papillon::PLogStream(arg1,(papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLogStream__SWIG_1(int jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PLogStream *result = 0 ;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  result = (papillon::PLogStream *)new papillon::PLogStream(arg1,(papillon::PString const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLogStream__SWIG_2(int jarg1, char * jarg2) {
  void * jresult ;
  papillon::PLog::ELogLevel arg1 ;
  papillon::PString *arg2 = 0 ;
  papillon::PLogStream *result = 0 ;
  
  arg1 = (papillon::PLog::ELogLevel)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PLogStream *)new papillon::PLogStream(arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLogStream(void * jarg1) {
  papillon::PLogStream *arg1 = (papillon::PLogStream *) 0 ;
  
  arg1 = (papillon::PLogStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLogStream_GetLogLevel(void * jarg1) {
  int jresult ;
  papillon::PLogStream *arg1 = (papillon::PLogStream *) 0 ;
  papillon::PLog::ELogLevel result;
  
  arg1 = (papillon::PLogStream *)jarg1; 
  result = (papillon::PLog::ELogLevel)((papillon::PLogStream const *)arg1)->GetLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLogStream_AddToMessage(void * jarg1, char * jarg2) {
  papillon::PLogStream *arg1 = (papillon::PLogStream *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PLogStream *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  ((papillon::PLogStream const *)arg1)->AddToMessage((papillon::PString const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEvent__SWIG_0() {
  void * jresult ;
  papillon::PEvent *result = 0 ;
  
  result = (papillon::PEvent *)new papillon::PEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_Create__SWIG_0(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  SwigValueWrapper< papillon::PEventBuilder > result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = papillon::PEvent::Create((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = new papillon::PEventBuilder((const papillon::PEventBuilder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_Create__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  SwigValueWrapper< papillon::PEventBuilder > result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PEvent::Create((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = new papillon::PEventBuilder((const papillon::PEventBuilder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_Create__SWIG_2(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  SwigValueWrapper< papillon::PEventBuilder > result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PEvent::Create((papillon::PString const &)*arg1);
  jresult = new papillon::PEventBuilder((const papillon::PEventBuilder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = 0 ;
  papillon::PEvent *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEvent const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEvent *)new papillon::PEvent((papillon::PEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PEvent(void * jarg1) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetType(void * jarg1, char * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  ((papillon::PEvent const *)arg1)->SetType((papillon::PString const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PEvent_GetType(void * jarg1) {
  char * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PString *) &((papillon::PEvent const *)arg1)->GetType();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetComposition(void * jarg1, unsigned int jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  bool arg2 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetComposition(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PEvent_GetComposition(void * jarg1) {
  unsigned int jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  bool result;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (bool)((papillon::PEvent const *)arg1)->GetComposition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetTimeGranularity(void * jarg1, int jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PEvent::EEventTimeGranularity arg2 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (papillon::PEvent::EEventTimeGranularity)jarg2; 
  (arg1)->SetTimeGranularity(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PEvent_GetTimeGranularity(void * jarg1) {
  int jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PEvent::EEventTimeGranularity result;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PEvent::EEventTimeGranularity)((papillon::PEvent const *)arg1)->GetTimeGranularity();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetOccurrenceTime(void * jarg1, void * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetOccurrenceTime((papillon::PDateTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_GetOccurrenceTime(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PDateTime *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PDateTime *) &((papillon::PEvent const *)arg1)->GetOccurrenceTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetCertainty(void * jarg1, double jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  double arg2 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetCertainty(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_PEvent_GetCertainty(void * jarg1) {
  double jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  double result;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (double)((papillon::PEvent const *)arg1)->GetCertainty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetAnnotation(void * jarg1, char * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetAnnotation((papillon::PString const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PEvent_GetAnnotation(void * jarg1) {
  char * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PString *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PString *) &((papillon::PEvent const *)arg1)->GetAnnotation();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetEventId(void * jarg1, void * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetEventId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_GetEventId(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PEvent const *)arg1)->GetEventId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetDetectionTime(void * jarg1, void * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetDetectionTime((papillon::PDateTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_GetDetectionTime(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PDateTime *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PDateTime *) &((papillon::PEvent const *)arg1)->GetDetectionTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEvent_SetSource(void * jarg1, void * jarg2) {
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetSource((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_GetSource(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PGuid *) &((papillon::PEvent const *)arg1)->GetSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_SetPayload(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PProperties *) &((papillon::PEvent const *)arg1)->SetPayload();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEvent_GetPayload(void * jarg1) {
  void * jresult ;
  papillon::PEvent *arg1 = (papillon::PEvent *) 0 ;
  papillon::PProperties *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1; 
  result = (papillon::PProperties *) &((papillon::PEvent const *)arg1)->GetPayload();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEventBuilder__SWIG_0(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *)new papillon::PEventBuilder((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PGuid const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEventBuilder__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PEventBuilder *)new papillon::PEventBuilder((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEventBuilder__SWIG_2(char * jarg1) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (papillon::PEventBuilder *)new papillon::PEventBuilder((papillon::PString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEventBuilder__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEventBuilder const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *)new papillon::PEventBuilder((papillon::PEventBuilder const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PEventBuilder(void * jarg1) {
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Type(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PEventBuilder *) &(arg1)->Type((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Annotation(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PEventBuilder *) &(arg1)->Annotation((papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_SourceId(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->SourceId((papillon::PGuid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Payload__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->Payload((papillon::PProperties const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Payload__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->Payload((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Certainty(void * jarg1, double jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  double arg2 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (double)jarg2; 
  result = (papillon::PEventBuilder *) &(arg1)->Certainty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_OccurenceTime(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->OccurenceTime((papillon::PDateTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_TimeGranularity(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PEvent::EEventTimeGranularity arg2 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PEvent::EEventTimeGranularity)jarg2; 
  result = (papillon::PEventBuilder *) &(arg1)->TimeGranularity(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_DetectionTime(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->DetectionTime((papillon::PDateTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Id(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEventBuilder *) &(arg1)->Id((papillon::PGuid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Composed(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  bool arg2 ;
  papillon::PEventBuilder *result = 0 ;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (papillon::PEventBuilder *) &(arg1)->Composed(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEventBuilder_Done(void * jarg1) {
  void * jresult ;
  papillon::PEventBuilder *arg1 = (papillon::PEventBuilder *) 0 ;
  papillon::PEvent result;
  
  arg1 = (papillon::PEventBuilder *)jarg1; 
  result = ((papillon::PEventBuilder const *)arg1)->Done();
  jresult = new papillon::PEvent((const papillon::PEvent &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Separator() {
  char * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *) &papillon::PPath::Separator();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_TempPath() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PPath::TempPath();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_CurrentPath() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PPath::CurrentPath();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_SetCurrentWorkingDirectory(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::SetCurrentWorkingDirectory((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetAbsolutePath(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::GetAbsolutePath((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetDirectory(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::GetDirectory((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetBaseName(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::GetBaseName((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetBaseNameWithoutEndDigits(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::GetBaseNameWithoutEndDigits((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetExtension(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::GetExtension((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Clean__SWIG_0(char * jarg1, unsigned int jarg2) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  bool arg2 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = jarg2 ? true : false; 
  result = papillon::PPath::Clean((papillon::PString const &)*arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Clean__SWIG_1(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::Clean((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPath_ChangeRootDir__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  bool arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PString *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = jarg4 ? true : false; 
  result = papillon::PPath::ChangeRootDir(*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPath_ChangeRootDir__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PString *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PString & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PPath::ChangeRootDir(*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_MakePath(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::MakePath((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_RemoveNonEmptyDirectory(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::RemoveNonEmptyDirectory((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_IsPathExist(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::IsPathExist((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_IsDirectory(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::IsDirectory((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PPath_IsFile(char * jarg1) {
  unsigned int jresult ;
  papillon::PString *arg1 = 0 ;
  bool result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = (bool)papillon::PPath::IsFile((papillon::PString const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PPath_ListEntries(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  papillon::PStringList result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = papillon::PPath::ListEntries((papillon::PString const &)*arg1,arg2,arg3);
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetApplicationName() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PPath::GetApplicationName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_GetApplicationDirectory() {
  char * jresult ;
  papillon::PString result;
  
  result = papillon::PPath::GetApplicationDirectory();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Join__SWIG_0(char * jarg1, char * jarg2) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = papillon::PPath::Join((papillon::PString const &)*arg1,(papillon::PString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Join__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  result = papillon::PPath::Join((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Join__SWIG_2(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = papillon::PPath::Join((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Join__SWIG_3(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  result = papillon::PPath::Join((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_Join__SWIG_4(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  result = papillon::PPath::Join((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PPath_AddPathSeparatorIfMissing(char * jarg1) {
  char * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  result = papillon::PPath::AddPathSeparatorIfMissing((papillon::PString const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PPath(void * jarg1) {
  papillon::PPath *arg1 = (papillon::PPath *) 0 ;
  
  arg1 = (papillon::PPath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVideoTools_Extract(char * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  result = papillon::PVideoTools::Extract((papillon::PString const &)*arg1,(papillon::PString const &)*arg2,arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PVideoTools(void * jarg1) {
  papillon::PVideoTools *arg1 = (papillon::PVideoTools *) 0 ;
  
  arg1 = (papillon::PVideoTools *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_Create__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PAnalytics *arg3 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PAnalytics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PAnalytics & type is null", 0);
    return 0;
  } 
  result = papillon::PAnalytics::Create((papillon::PString const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PPlugin *arg1 = 0 ;
  papillon::PProperties *arg2 = 0 ;
  papillon::PAnalytics *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PPlugin *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPlugin const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::PProperties *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PProperties const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PAnalytics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PAnalytics & type is null", 0);
    return 0;
  } 
  result = papillon::PAnalytics::Create((papillon::PPlugin const &)*arg1,(papillon::PProperties const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PAnalytics__SWIG_0() {
  void * jresult ;
  papillon::PAnalytics *result = 0 ;
  
  result = (papillon::PAnalytics *)new papillon::PAnalytics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PAnalytics__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PAnalytics *arg1 = 0 ;
  papillon::PAnalytics *result = 0 ;
  
  arg1 = (papillon::PAnalytics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PAnalytics const & type is null", 0);
    return 0;
  } 
  result = (papillon::PAnalytics *)new papillon::PAnalytics((papillon::PAnalytics const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PAnalytics(void * jarg1) {
  papillon::PAnalytics *arg1 = (papillon::PAnalytics *) 0 ;
  
  arg1 = (papillon::PAnalytics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_Apply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PAnalytics *arg1 = (papillon::PAnalytics *) 0 ;
  papillon::PFrame *arg2 = 0 ;
  papillon::PList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PAnalytics *)jarg1; 
  arg2 = (papillon::PFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PFrame const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PList & type is null", 0);
    return 0;
  } 
  result = ((papillon::PAnalytics const *)arg1)->Apply((papillon::PFrame const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_Finish(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PAnalytics *arg1 = (papillon::PAnalytics *) 0 ;
  papillon::PList *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PAnalytics *)jarg1; 
  arg2 = (papillon::PList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PList & type is null", 0);
    return 0;
  } 
  result = ((papillon::PAnalytics const *)arg1)->Finish(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_GetMinimumInputResolution(void * jarg1) {
  void * jresult ;
  papillon::PAnalytics *arg1 = (papillon::PAnalytics *) 0 ;
  papillon::PSizei result;
  
  arg1 = (papillon::PAnalytics *)jarg1; 
  result = ((papillon::PAnalytics const *)arg1)->GetMinimumInputResolution();
  jresult = new papillon::PSizei((const papillon::PSizei &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAnalytics_DrawOSD(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PAnalytics *arg1 = (papillon::PAnalytics *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PAnalytics *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage & type is null", 0);
    return 0;
  } 
  result = ((papillon::PAnalytics const *)arg1)->DrawOSD(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_WriteToFileWatchlist__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR WriteToFile< papillon::PWatchlist >((papillon::PString const &)*arg1,(papillon::PWatchlist const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_WriteToFileWatchlist__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist const & type is null", 0);
    return 0;
  } 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR WriteToFile< papillon::PWatchlist >((papillon::PString const &)*arg1,(papillon::PWatchlist const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_ReadFromFileWatchlist__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR ReadFromFile< papillon::PWatchlist >((papillon::PString const &)*arg1,*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_ReadFromFileWatchlist__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PWatchlist *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PWatchlist *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR ReadFromFile< papillon::PWatchlist >((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_WriteToFile__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR WriteToFile< papillon::PDescription >((papillon::PString const &)*arg1,(papillon::PDescription const &)*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_WriteToFile__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR WriteToFile< papillon::PDescription >((papillon::PString const &)*arg1,(papillon::PDescription const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_ReadFromFile__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::ESerialisationFormat arg3 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::ESerialisationFormat)jarg3; 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR ReadFromFile< papillon::PDescription >((papillon::PString const &)*arg1,*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PFileIO_ReadFromFile__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = papillon::PFileIO::SWIGTEMPLATEDISAMBIGUATOR ReadFromFile< papillon::PDescription >((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PFileIO(void * jarg1) {
  papillon::PFileIO *arg1 = (papillon::PFileIO *) 0 ;
  
  arg1 = (papillon::PFileIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PEntity_EntityIdPropertyName() {
  char * jresult ;
  papillon::PString *result = 0 ;
  
  result = (papillon::PString *) &papillon::PEntity::EntityIdPropertyName();
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEntity__SWIG_0() {
  void * jresult ;
  papillon::PEntity *result = 0 ;
  
  result = (papillon::PEntity *)new papillon::PEntity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEntity__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PObject *arg1 = 0 ;
  papillon::PEntity *result = 0 ;
  
  arg1 = (papillon::PObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEntity *)new papillon::PEntity((papillon::PObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEntity__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PEntity *arg1 = 0 ;
  papillon::PEntity *result = 0 ;
  
  arg1 = (papillon::PEntity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEntity const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEntity *)new papillon::PEntity((papillon::PEntity const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PEntity(void * jarg1) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PEntity_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  bool result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = (bool)((papillon::PEntity const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEntity_GetEntityId(void * jarg1) {
  void * jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PGuid result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = ((papillon::PEntity const *)arg1)->GetEntityId();
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEntity_SetEntityId(void * jarg1, void * jarg2) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->SetEntityId((papillon::PGuid const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEntity_SetStoreId(void * jarg1, unsigned long long jarg2) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::uint64 *arg2 = 0 ;
  papillon::uint64 temp2 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  temp2 = (papillon::uint64)jarg2; 
  arg2 = &temp2; 
  (arg1)->SetStoreId((papillon::uint64 const &)*arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PEntity_GetStoreId(void * jarg1) {
  unsigned long long jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = (papillon::uint64)((papillon::PEntity const *)arg1)->GetStoreId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PEntity_GetObjectId(void * jarg1) {
  unsigned long long jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = (papillon::uint64)((papillon::PEntity const *)arg1)->GetObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PEntity_GetObjectClassId(void * jarg1) {
  unsigned short jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::classid result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = (papillon::classid)((papillon::PEntity const *)arg1)->GetObjectClassId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEntity_GetTimestamp(void * jarg1) {
  void * jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = ((papillon::PEntity const *)arg1)->GetTimestamp();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEntity_SetTimestamp(void * jarg1, void * jarg2) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetTimestamp((papillon::PDateTime const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PEntity_HasDeleteFlag(void * jarg1) {
  unsigned int jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  bool result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  result = (bool)((papillon::PEntity const *)arg1)->HasDeleteFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEntity_SetDeleteFlag(void * jarg1, unsigned int jarg2) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDeleteFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEntity_GetObject(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEntity *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEntity const *)arg1)->GetObject(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEntity_SetObject(void * jarg1, void * jarg2) {
  papillon::PEntity *arg1 = (papillon::PEntity *) 0 ;
  papillon::PObject *arg2 = 0 ;
  
  arg1 = (papillon::PEntity *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return ;
  } 
  (arg1)->SetObject((papillon::PObject const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlDatabase__SWIG_0(int jarg1) {
  void * jresult ;
  papillon::PSqlDatabase::EDatabase arg1 ;
  papillon::PSqlDatabase *result = 0 ;
  
  arg1 = (papillon::PSqlDatabase::EDatabase)jarg1; 
  result = (papillon::PSqlDatabase *)new papillon::PSqlDatabase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlDatabase__SWIG_1() {
  void * jresult ;
  papillon::PSqlDatabase *result = 0 ;
  
  result = (papillon::PSqlDatabase *)new papillon::PSqlDatabase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlDatabase__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = 0 ;
  papillon::PSqlDatabase *result = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSqlDatabase const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSqlDatabase *)new papillon::PSqlDatabase((papillon::PSqlDatabase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSqlDatabase(void * jarg1) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PSqlDatabase_GetDriverName(void * jarg1) {
  char * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = ((papillon::PSqlDatabase const *)arg1)->GetDriverName();
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_GetDrivers() {
  void * jresult ;
  papillon::PStringList result;
  
  result = papillon::PSqlDatabase::GetDrivers();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSqlDatabase_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  bool result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (bool)((papillon::PSqlDatabase const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetHostName(void * jarg1, char * jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetHostName((papillon::PString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetPort(void * jarg1, int jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::int32 arg2 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  (arg1)->SetPort(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetDatabaseName(void * jarg1, char * jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetDatabaseName((papillon::PString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetUserName(void * jarg1, char * jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetUserName((papillon::PString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetPassword(void * jarg1, char * jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetPassword((papillon::PString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_SetConnectOptions(void * jarg1, char * jarg2) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->SetConnectOptions((papillon::PString const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Open__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  result = (arg1)->Open((papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Open__SWIG_1(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  result = (arg1)->Open((papillon::PString const &)*arg2,arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,(papillon::PString const &)*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Open__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (arg1)->Open();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PSqlDatabase_Close(void * jarg1) {
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSqlDatabase_IsOpened(void * jarg1) {
  unsigned int jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  bool result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (bool)((papillon::PSqlDatabase const *)arg1)->IsOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_ListTables(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PStringList result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = ((papillon::PSqlDatabase const *)arg1)->ListTables();
  jresult = new papillon::PStringList((const papillon::PStringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Transaction(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (arg1)->Transaction();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Commit(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (arg1)->Commit();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlDatabase_Rollback(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = (papillon::PSqlDatabase *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlDatabase *)jarg1; 
  result = (arg1)->Rollback();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlQuery__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = 0 ;
  papillon::PSqlQuery *result = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSqlDatabase const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSqlQuery *)new papillon::PSqlQuery((papillon::PSqlDatabase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlQuery__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PSqlQuery *result = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSqlDatabase const & type is null", 0);
    return 0;
  } 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (papillon::PSqlQuery *)new papillon::PSqlQuery((papillon::PSqlDatabase const &)*arg1,(papillon::PString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PSqlQuery__SWIG_2(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = 0 ;
  papillon::PSqlQuery *result = 0 ;
  
  arg1 = (papillon::PSqlQuery *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSqlQuery const & type is null", 0);
    return 0;
  } 
  result = (papillon::PSqlQuery *)new papillon::PSqlQuery((papillon::PSqlQuery const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PSqlQuery(void * jarg1) {
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PSqlQuery_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  bool result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (bool)((papillon::PSqlQuery const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Prepare(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Prepare((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_BindValue(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BindValue((papillon::PString const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Exec__SWIG_0(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (arg1)->Exec();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Exec__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  result = (arg1)->Exec((papillon::PString const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Next(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (arg1)->Next();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Previous(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (arg1)->Previous();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_First(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (arg1)->First();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Last(void * jarg1) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (arg1)->Last();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PSqlQuery_Size(void * jarg1) {
  int jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  result = (papillon::int32)((papillon::PSqlQuery const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Get__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::int32 arg2 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PSqlQuery const *)arg1)->Get(arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PSqlQuery_Get__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PSqlQuery *arg1 = (papillon::PSqlQuery *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PSqlQuery *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PSqlQuery const *)arg1)->Get((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStore__SWIG_0() {
  void * jresult ;
  papillon::PStore *result = 0 ;
  
  result = (papillon::PStore *)new papillon::PStore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStore__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PStore *arg1 = 0 ;
  papillon::PStore *result = 0 ;
  
  arg1 = (papillon::PStore *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStore const & type is null", 0);
    return 0;
  } 
  result = (papillon::PStore *)new papillon::PStore((papillon::PStore const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PStore(void * jarg1) {
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  
  arg1 = (papillon::PStore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PStore_Close(void * jarg1) {
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  
  arg1 = (papillon::PStore *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PStore_GetStoreId(void * jarg1) {
  unsigned long long jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::uint64 result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = (papillon::uint64)((papillon::PStore const *)arg1)->GetStoreId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStore_IsValid(void * jarg1) {
  unsigned int jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  bool result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = (bool)((papillon::PStore const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStore_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  bool result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = (bool)((papillon::PStore const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PStore_Size__SWIG_0(void * jarg1) {
  int jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::int32 result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = (papillon::int32)((papillon::PStore const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PStore_Size__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::EType arg2 ;
  papillon::int32 result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::EType)jarg2; 
  result = (papillon::int32)((papillon::PStore const *)arg1)->Size(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PStore_Exists(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  bool result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = (bool)((papillon::PStore const *)arg1)->Exists((papillon::PGuid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_GetEntity(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PEntity *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PEntity *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEntity & type is null", 0);
    return 0;
  } 
  result = ((papillon::PStore const *)arg1)->GetEntity((papillon::PGuid const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Get(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PStore const *)arg1)->Get((papillon::PGuid const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_GetAll(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::EType arg2 ;
  papillon::PList *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::EType)jarg2; 
  arg3 = (papillon::PList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PList & type is null", 0);
    return 0;
  } 
  result = ((papillon::PStore const *)arg1)->GetAll(arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Add__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid & type is null", 0);
    return 0;
  } 
  result = (arg1)->Add((papillon::PObject const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Add__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Add((papillon::PObject const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Update(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PObject *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Update((papillon::PGuid const &)*arg2,(papillon::PObject const &)*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Remove(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid & type is null", 0);
    return 0;
  } 
  result = (arg1)->Remove(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_RemoveAllObjects(void * jarg1) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = (arg1)->RemoveAllObjects();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_SetDeleteFlag(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  bool arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->SetDeleteFlag(*arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_Iterator(void * jarg1) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PStoreIterator result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = ((papillon::PStore const *)arg1)->Iterator();
  jresult = new papillon::PStoreIterator((const papillon::PStoreIterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PStore_AddListener(void * jarg1, void * jarg2) {
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PStoreEventListener *arg2 = 0 ;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PStoreEventListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStoreEventListener const & type is null", 0);
    return ;
  } 
  (arg1)->AddListener((papillon::PStoreEventListener const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_RemoveListener(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PStoreEventListener *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PStoreEventListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStoreEventListener const & type is null", 0);
    return 0;
  } 
  result = (arg1)->RemoveListener((papillon::PStoreEventListener const &)*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStore_GetTimestampLatestUpdate(void * jarg1) {
  void * jresult ;
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PDateTime result;
  
  arg1 = (papillon::PStore *)jarg1; 
  result = ((papillon::PStore const *)arg1)->GetTimestampLatestUpdate();
  jresult = new papillon::PDateTime((const papillon::PDateTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PStore_SetTimestampLatestUpdate(void * jarg1, void * jarg2) {
  papillon::PStore *arg1 = (papillon::PStore *) 0 ;
  papillon::PDateTime *arg2 = 0 ;
  
  arg1 = (papillon::PStore *)jarg1; 
  arg2 = (papillon::PDateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDateTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetTimestampLatestUpdate((papillon::PDateTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStoreIterator__SWIG_0() {
  void * jresult ;
  papillon::PStoreIterator *result = 0 ;
  
  result = (papillon::PStoreIterator *)new papillon::PStoreIterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PStoreIterator__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PStoreIterator *arg1 = 0 ;
  papillon::PStoreIterator *result = 0 ;
  
  arg1 = (papillon::PStoreIterator *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStoreIterator const & type is null", 0);
    return 0;
  } 
  result = (papillon::PStoreIterator *)new papillon::PStoreIterator((papillon::PStoreIterator const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PStoreIterator(void * jarg1) {
  papillon::PStoreIterator *arg1 = (papillon::PStoreIterator *) 0 ;
  
  arg1 = (papillon::PStoreIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStoreIterator_Next(void * jarg1) {
  void * jresult ;
  papillon::PStoreIterator *arg1 = (papillon::PStoreIterator *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStoreIterator *)jarg1; 
  result = (arg1)->Next();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStoreIterator_GetEntity(void * jarg1) {
  void * jresult ;
  papillon::PStoreIterator *arg1 = (papillon::PStoreIterator *) 0 ;
  papillon::PEntity result;
  
  arg1 = (papillon::PStoreIterator *)jarg1; 
  result = ((papillon::PStoreIterator const *)arg1)->GetEntity();
  jresult = new papillon::PEntity((const papillon::PEntity &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PStoreIterator_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PStoreIterator *arg1 = (papillon::PStoreIterator *) 0 ;
  papillon::PObject *arg2 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PStoreIterator *)jarg1; 
  arg2 = (papillon::PObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PObject & type is null", 0);
    return 0;
  } 
  result = ((papillon::PStoreIterator const *)arg1)->Get(*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDatabaseStore_Open__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::PStore *arg2 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::PStore *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStore & type is null", 0);
    return 0;
  } 
  result = papillon::PDatabaseStore::Open((papillon::PString const &)*arg1,*arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDatabaseStore_Open__SWIG_1(char * jarg1, int jarg2, char * jarg3, char * jarg4, char * jarg5, void * jarg6) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  papillon::int32 arg2 ;
  papillon::PString *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PString *arg5 = 0 ;
  papillon::PStore *arg6 = 0 ;
  papillon::PResult result;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (papillon::int32)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  arg6 = (papillon::PStore *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PStore & type is null", 0);
    return 0;
  } 
  result = papillon::PDatabaseStore::Open((papillon::PString const &)*arg1,arg2,(papillon::PString const &)*arg3,(papillon::PString const &)*arg4,(papillon::PString const &)*arg5,*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDatabaseStore(void * jarg1) {
  void * jresult ;
  papillon::PDatabaseStore *arg1 = 0 ;
  papillon::PDatabaseStore *result = 0 ;
  
  arg1 = (papillon::PDatabaseStore *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDatabaseStore const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDatabaseStore *)new papillon::PDatabaseStore((papillon::PDatabaseStore const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDatabaseStore(void * jarg1) {
  papillon::PDatabaseStore *arg1 = (papillon::PDatabaseStore *) 0 ;
  
  arg1 = (papillon::PDatabaseStore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDatabaseStore_GetDatabase(void * jarg1) {
  void * jresult ;
  papillon::PDatabaseStore *arg1 = (papillon::PDatabaseStore *) 0 ;
  papillon::PSqlDatabase result;
  
  arg1 = (papillon::PDatabaseStore *)jarg1; 
  result = ((papillon::PDatabaseStore const *)arg1)->GetDatabase();
  jresult = new papillon::PSqlDatabase((const papillon::PSqlDatabase &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDatabaseStoreIterator(void * jarg1) {
  void * jresult ;
  papillon::PSqlDatabase *arg1 = 0 ;
  papillon::PDatabaseStoreIterator *result = 0 ;
  
  arg1 = (papillon::PSqlDatabase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PSqlDatabase const & type is null", 0);
    return 0;
  } 
  result = (papillon::PDatabaseStoreIterator *)new papillon::PDatabaseStoreIterator((papillon::PSqlDatabase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDatabaseStoreIterator(void * jarg1) {
  papillon::PDatabaseStoreIterator *arg1 = (papillon::PDatabaseStoreIterator *) 0 ;
  
  arg1 = (papillon::PDatabaseStoreIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEnrollment__SWIG_0() {
  void * jresult ;
  papillon::PEnrollment *result = 0 ;
  
  result = (papillon::PEnrollment *)new papillon::PEnrollment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PEnrollment__SWIG_1(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = 0 ;
  papillon::PEnrollment *result = 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEnrollment const & type is null", 0);
    return 0;
  } 
  result = (papillon::PEnrollment *)new papillon::PEnrollment((papillon::PEnrollment const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PEnrollment(void * jarg1) {
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PEnrollment_IsConfigured(void * jarg1) {
  unsigned int jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  bool result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  result = (bool)((papillon::PEnrollment const *)arg1)->IsConfigured();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEnrollment_Configure(void * jarg1, void * jarg2, void * jarg3) {
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PDetector *arg2 = 0 ;
  papillon::PDescriber *arg3 = 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PDetector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDetector const & type is null", 0);
    return ;
  } 
  arg3 = (papillon::PDescriber *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriber const & type is null", 0);
    return ;
  } 
  (arg1)->Configure((papillon::PDetector const &)*arg2,(papillon::PDescriber const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PEnrollment_EnableDisplay(void * jarg1, unsigned int jarg2) {
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  bool arg2 ;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((papillon::PEnrollment const *)arg1)->EnableDisplay(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_AutoConfigureForFaceRecognition__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::int32 arg2 ;
  bool arg3 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = (arg1)->AutoConfigureForFaceRecognition(arg2,arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_AutoConfigureForFaceRecognition__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::int32 arg2 ;
  bool arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->AutoConfigureForFaceRecognition(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_AutoConfigureForFaceRecognition__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::int32 arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::int32)jarg2; 
  result = (arg1)->AutoConfigureForFaceRecognition(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_AutoConfigureForFaceRecognition__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  result = (arg1)->AutoConfigureForFaceRecognition();
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_GetDetector(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PDetector result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  result = ((papillon::PEnrollment const *)arg1)->GetDetector();
  jresult = new papillon::PDetector((const papillon::PDetector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_GetDescriber(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PDescriber result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  result = ((papillon::PEnrollment const *)arg1)->GetDescriber();
  jresult = new papillon::PDescriber((const papillon::PDescriber &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_GetLastDescription(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PDescription result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  result = ((papillon::PEnrollment const *)arg1)->GetLastDescription();
  jresult = new papillon::PDescription((const papillon::PDescription &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PGuid *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PGuid *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PImage const &)*arg2,*arg3,(papillon::PString const &)*arg4,(papillon::PGuid const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PImage const &)*arg2,*arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PImage const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_3(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PGuid *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PGuid *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PString const &)*arg2,*arg3,(papillon::PString const &)*arg4,(papillon::PGuid const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_4(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PString const &)*arg2,*arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_6(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PWatchlist *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PWatchlist *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PImage const &)*arg2,(papillon::PGuid const &)*arg3,(papillon::PString const &)*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImage__SWIG_7(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PWatchlist *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PWatchlist *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImage((papillon::PString const &)*arg2,(papillon::PGuid const &)*arg3,(papillon::PString const &)*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImages__SWIG_0(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PGuid *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PWatchlist *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PWatchlist *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImages((papillon::PString const &)*arg2,(papillon::PGuid const &)*arg3,(papillon::PString const &)*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImages__SWIG_1(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PGuid *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  arg5 = (papillon::PGuid *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImages((papillon::PString const &)*arg2,*arg3,(papillon::PString const &)*arg4,(papillon::PGuid const &)*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImages__SWIG_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PString *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg4_str(jarg4);
  arg4 = &arg4_str; 
  //arg4 = new papillon::PString(jarg4);
  
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImages((papillon::PString const &)*arg2,*arg3,(papillon::PString const &)*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromImages__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromImages((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideoStream__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5, char * jarg6, void * jarg7) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PInputVideoStream *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PGuid *arg5 = 0 ;
  papillon::PString *arg6 = 0 ;
  papillon::PWatchlist *arg7 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PInputVideoStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PInputVideoStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::PGuid *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  arg7 = (papillon::PWatchlist *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideoStream(*arg2,arg3,arg4,(papillon::PGuid const &)*arg5,(papillon::PString const &)*arg6,*arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideoStream__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, char * jarg7) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PInputVideoStream *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PGuid *arg6 = 0 ;
  papillon::PString *arg7 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  arg2 = (papillon::PInputVideoStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PInputVideoStream & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::PGuid *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg7_str(jarg7);
  arg7 = &arg7_str; 
  //arg7 = new papillon::PString(jarg7);
  
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideoStream(*arg2,*arg3,arg4,arg5,(papillon::PGuid const &)*arg6,(papillon::PString const &)*arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideo__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, void * jarg7) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PString *arg6 = 0 ;
  papillon::PGuid *arg7 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  arg7 = (papillon::PGuid *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideo((papillon::PString const &)*arg2,*arg3,arg4,arg5,(papillon::PString const &)*arg6,(papillon::PGuid const &)*arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideo__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PString *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg6_str(jarg6);
  arg6 = &arg6_str; 
  //arg6 = new papillon::PString(jarg6);
  
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideo((papillon::PString const &)*arg2,*arg3,arg4,arg5,(papillon::PString const &)*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideo__SWIG_2(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideo((papillon::PString const &)*arg2,*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideo__SWIG_3(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideo((papillon::PString const &)*arg2,*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromVideo__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromVideo((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromCSV__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString *arg5 = 0 ;
  papillon::PWatchlist *arg6 = 0 ;
  papillon::PCallback_EnrollFromCSV arg7 = (papillon::PCallback_EnrollFromCSV) 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  arg6 = (papillon::PWatchlist *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg7 = (papillon::PCallback_EnrollFromCSV)jarg7; 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromCSV((papillon::PString const &)*arg2,arg3,arg4,(papillon::PString const &)*arg5,*arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_EnrollFromCSV__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5, void * jarg6) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::int32 arg3 ;
  papillon::int32 arg4 ;
  papillon::PString *arg5 = 0 ;
  papillon::PWatchlist *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::int32)jarg3; 
  arg4 = (papillon::int32)jarg4; 
  
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg5_str(jarg5);
  arg5 = &arg5_str; 
  //arg5 = new papillon::PString(jarg5);
  
  arg6 = (papillon::PWatchlist *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = ((papillon::PEnrollment const *)arg1)->EnrollFromCSV((papillon::PString const &)*arg2,arg3,arg4,(papillon::PString const &)*arg5,*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlist__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  arg5 = (papillon::int32)jarg5; 
  result = (arg1)->CreateWatchlist((papillon::PString const &)*arg2,*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlist__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  papillon::int32 arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::int32)jarg4; 
  result = (arg1)->CreateWatchlist((papillon::PString const &)*arg2,*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlist__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateWatchlist((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlistFromFolder__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  bool arg4 ;
  papillon::int32 arg5 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (papillon::int32)jarg5; 
  arg6 = (papillon::int32)jarg6; 
  result = (arg1)->CreateWatchlistFromFolder((papillon::PString const &)*arg2,*arg3,arg4,arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlistFromFolder__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  bool arg4 ;
  papillon::int32 arg5 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (papillon::int32)jarg5; 
  result = (arg1)->CreateWatchlistFromFolder((papillon::PString const &)*arg2,*arg3,arg4,arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlistFromFolder__SWIG_2(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  bool arg4 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->CreateWatchlistFromFolder((papillon::PString const &)*arg2,*arg3,arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PEnrollment_CreateWatchlistFromFolder__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = (papillon::PEnrollment *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PWatchlist *arg3 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PEnrollment *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  arg3 = (papillon::PWatchlist *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PWatchlist & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateWatchlistFromFolder((papillon::PString const &)*arg2,*arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVerify__SWIG_0() {
  void * jresult ;
  papillon::PVerify *result = 0 ;
  
  result = (papillon::PVerify *)new papillon::PVerify();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVerify__SWIG_1(void * jarg1, int jarg2, double jarg3) {
  void * jresult ;
  papillon::PEnrollment *arg1 = 0 ;
  papillon::EVerificationSecurityLevel arg2 ;
  double arg3 ;
  papillon::PVerify *result = 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEnrollment const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::EVerificationSecurityLevel)jarg2; 
  arg3 = (double)jarg3; 
  result = (papillon::PVerify *)new papillon::PVerify((papillon::PEnrollment const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVerify__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PEnrollment *arg1 = 0 ;
  papillon::EVerificationSecurityLevel arg2 ;
  papillon::PVerify *result = 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEnrollment const & type is null", 0);
    return 0;
  } 
  arg2 = (papillon::EVerificationSecurityLevel)jarg2; 
  result = (papillon::PVerify *)new papillon::PVerify((papillon::PEnrollment const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVerify__SWIG_3(void * jarg1) {
  void * jresult ;
  papillon::PEnrollment *arg1 = 0 ;
  papillon::PVerify *result = 0 ;
  
  arg1 = (papillon::PEnrollment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEnrollment const & type is null", 0);
    return 0;
  } 
  result = (papillon::PVerify *)new papillon::PVerify((papillon::PEnrollment const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PVerify__SWIG_4(void * jarg1) {
  void * jresult ;
  papillon::PVerify *arg1 = 0 ;
  papillon::PVerify *result = 0 ;
  
  arg1 = (papillon::PVerify *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PVerify const & type is null", 0);
    return 0;
  } 
  result = (papillon::PVerify *)new papillon::PVerify((papillon::PVerify const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PVerify(void * jarg1) {
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  
  arg1 = (papillon::PVerify *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PVerify_IsConfigured(void * jarg1) {
  unsigned int jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  bool result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  result = (bool)((papillon::PVerify const *)arg1)->IsConfigured();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVerify_GetSecurityLevel(void * jarg1, void * jarg2) {
  int jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  double *arg2 = 0 ;
  papillon::EVerificationSecurityLevel result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (papillon::EVerificationSecurityLevel)((papillon::PVerify const *)arg1)->GetSecurityLevel(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_SetSecurityLevel__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::EVerificationSecurityLevel arg2 ;
  double arg3 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::EVerificationSecurityLevel)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->SetSecurityLevel(arg2,arg3);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_SetSecurityLevel__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::EVerificationSecurityLevel arg2 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::EVerificationSecurityLevel)jarg2; 
  result = (arg1)->SetSecurityLevel(arg2);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PDescription *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  result = ((papillon::PVerify const *)arg1)->VerifyFromDescription((papillon::PDescription const &)*arg2,(papillon::PDescription const &)*arg3,*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromDescriptionFile(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  result = ((papillon::PVerify const *)arg1)->VerifyFromDescriptionFile((papillon::PString const &)*arg2,(papillon::PString const &)*arg3,*arg4);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromImage(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PImage *arg2 = 0 ;
  papillon::PImage *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::PDescription *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg3 = (papillon::PImage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PDescription *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PVerify const *)arg1)->VerifyFromImage((papillon::PImage const &)*arg2,(papillon::PImage const &)*arg3,*arg4,*arg5,*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromImageFile(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PString *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::PDescription *arg6 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::PDescription *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PVerify const *)arg1)->VerifyFromImageFile((papillon::PString const &)*arg2,(papillon::PString const &)*arg3,*arg4,*arg5,*arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromVideoFile__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::int32 arg7 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  arg7 = (papillon::int32)jarg7; 
  result = ((papillon::PVerify const *)arg1)->VerifyFromVideoFile((papillon::PDescription const &)*arg2,(papillon::PString const &)*arg3,*arg4,*arg5,arg6,arg7);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromVideoFile__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::int32 arg6 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  arg6 = (papillon::int32)jarg6; 
  result = ((papillon::PVerify const *)arg1)->VerifyFromVideoFile((papillon::PDescription const &)*arg2,(papillon::PString const &)*arg3,*arg4,*arg5,arg6);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVerify_VerifyFromVideoFile__SWIG_2(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  papillon::PVerify *arg1 = (papillon::PVerify *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  papillon::PString *arg3 = 0 ;
  papillon::PMatchScore *arg4 = 0 ;
  papillon::PDescription *arg5 = 0 ;
  papillon::PResult result;
  
  arg1 = (papillon::PVerify *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  arg4 = (papillon::PMatchScore *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PMatchScore & type is null", 0);
    return 0;
  } 
  arg5 = (papillon::PDescription *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription & type is null", 0);
    return 0;
  } 
  result = ((papillon::PVerify const *)arg1)->VerifyFromVideoFile((papillon::PDescription const &)*arg2,(papillon::PString const &)*arg3,*arg4,*arg5);
  jresult = new papillon::PResult((const papillon::PResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorInt_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorInt_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorInt(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_Clear(void * jarg1) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  papillon::PDescription *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (papillon::PDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PDescription const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorDescription_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  std::vector< papillon::PDescription >::size_type result;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  result = ((std::vector< papillon::PDescription > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorDescription_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  std::vector< papillon::PDescription >::size_type result;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  result = ((std::vector< papillon::PDescription > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  std::vector< papillon::PDescription >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (std::vector< papillon::PDescription >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescription__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PDescription > *result = 0 ;
  
  result = (std::vector< papillon::PDescription > *)new std::vector< papillon::PDescription >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescription__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PDescription > *arg1 = 0 ;
  std::vector< papillon::PDescription > *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescription > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PDescription > *)new std::vector< papillon::PDescription >((std::vector< papillon::PDescription > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescription__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PDescription > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PDescription > *)new_std_vector_Sl_papillon_PDescription_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescription_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  papillon::PDescription result;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PDescription_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PDescription((const papillon::PDescription &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescription_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  papillon::PDescription *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PDescription *) &std_vector_Sl_papillon_PDescription_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  papillon::PDescription *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescription_Sg__setitem(arg1,arg2,(papillon::PDescription const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  std::vector< papillon::PDescription > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (std::vector< papillon::PDescription > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescription > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PDescription_Sg__AddRange(arg1,(std::vector< papillon::PDescription > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescription_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PDescription > *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PDescription > *)std_vector_Sl_papillon_PDescription_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  papillon::PDescription *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PDescription *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescription_Sg__Insert(arg1,arg2,(papillon::PDescription const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  std::vector< papillon::PDescription > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PDescription > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescription > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescription_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PDescription > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PDescription_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PDescription_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescription_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDescription *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PDescription > *result = 0 ;
  
  arg1 = (papillon::PDescription *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescription const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PDescription > *)std_vector_Sl_papillon_PDescription_Sg__Repeat((papillon::PDescription const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  std_vector_Sl_papillon_PDescription_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PDescription_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescription_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  int arg2 ;
  std::vector< papillon::PDescription > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PDescription > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescription > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescription_Sg__SetRange(arg1,arg2,(std::vector< papillon::PDescription > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorDescription(void * jarg1) {
  std::vector< papillon::PDescription > *arg1 = (std::vector< papillon::PDescription > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescription > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_Clear(void * jarg1) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  papillon::PDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (papillon::PDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorDescriptor_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  std::vector< papillon::PDescriptor >::size_type result;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  result = ((std::vector< papillon::PDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorDescriptor_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  std::vector< papillon::PDescriptor >::size_type result;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  result = ((std::vector< papillon::PDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  std::vector< papillon::PDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (std::vector< papillon::PDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescriptor__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PDescriptor > *result = 0 ;
  
  result = (std::vector< papillon::PDescriptor > *)new std::vector< papillon::PDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PDescriptor > *arg1 = 0 ;
  std::vector< papillon::PDescriptor > *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PDescriptor > *)new std::vector< papillon::PDescriptor >((std::vector< papillon::PDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDescriptor__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PDescriptor > *)new_std_vector_Sl_papillon_PDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescriptor_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  papillon::PDescriptor result;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PDescriptor((const papillon::PDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescriptor_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  papillon::PDescriptor *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PDescriptor *) &std_vector_Sl_papillon_PDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  papillon::PDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__setitem(arg1,arg2,(papillon::PDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  std::vector< papillon::PDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (std::vector< papillon::PDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PDescriptor_Sg__AddRange(arg1,(std::vector< papillon::PDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescriptor_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PDescriptor > *result = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PDescriptor > *)std_vector_Sl_papillon_PDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  papillon::PDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__Insert(arg1,arg2,(papillon::PDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  std::vector< papillon::PDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDescriptor_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PDescriptor > *result = 0 ;
  
  arg1 = (papillon::PDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PDescriptor > *)std_vector_Sl_papillon_PDescriptor_Sg__Repeat((papillon::PDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  std_vector_Sl_papillon_PDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDescriptor_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  int arg2 ;
  std::vector< papillon::PDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PDescriptor_Sg__SetRange(arg1,arg2,(std::vector< papillon::PDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorDescriptor(void * jarg1) {
  std::vector< papillon::PDescriptor > *arg1 = (std::vector< papillon::PDescriptor > *) 0 ;
  
  arg1 = (std::vector< papillon::PDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_Clear(void * jarg1) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  papillon::PImage *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (papillon::PImage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PImage const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorImage_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  std::vector< papillon::PImage >::size_type result;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  result = ((std::vector< papillon::PImage > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorImage_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  std::vector< papillon::PImage >::size_type result;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  result = ((std::vector< papillon::PImage > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  std::vector< papillon::PImage >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (std::vector< papillon::PImage >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImage__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PImage > *result = 0 ;
  
  result = (std::vector< papillon::PImage > *)new std::vector< papillon::PImage >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImage__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PImage > *arg1 = 0 ;
  std::vector< papillon::PImage > *result = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PImage > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PImage > *)new std::vector< papillon::PImage >((std::vector< papillon::PImage > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImage__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PImage > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PImage > *)new_std_vector_Sl_papillon_PImage_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImage_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  papillon::PImage result;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PImage_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PImage((const papillon::PImage &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImage_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  papillon::PImage *result = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PImage *) &std_vector_Sl_papillon_PImage_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  papillon::PImage *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PImage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PImage_Sg__setitem(arg1,arg2,(papillon::PImage const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  std::vector< papillon::PImage > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (std::vector< papillon::PImage > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PImage > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PImage_Sg__AddRange(arg1,(std::vector< papillon::PImage > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImage_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PImage > *result = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PImage > *)std_vector_Sl_papillon_PImage_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  papillon::PImage *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PImage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PImage_Sg__Insert(arg1,arg2,(papillon::PImage const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  std::vector< papillon::PImage > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PImage > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PImage > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PImage_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PImage > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PImage_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PImage_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImage_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PImage *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PImage > *result = 0 ;
  
  arg1 = (papillon::PImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PImage const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PImage > *)std_vector_Sl_papillon_PImage_Sg__Repeat((papillon::PImage const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  std_vector_Sl_papillon_PImage_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PImage_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImage_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  int arg2 ;
  std::vector< papillon::PImage > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PImage > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PImage > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PImage_Sg__SetRange(arg1,arg2,(std::vector< papillon::PImage > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorImage(void * jarg1) {
  std::vector< papillon::PImage > *arg1 = (std::vector< papillon::PImage > *) 0 ;
  
  arg1 = (std::vector< papillon::PImage > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_Clear(void * jarg1) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  papillon::PPoint2Df *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (papillon::PPoint2Df *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PPoint2Df const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorPoint2Df_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  std::vector< papillon::PPoint2Df >::size_type result;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  result = ((std::vector< papillon::PPoint2Df > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorPoint2Df_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  std::vector< papillon::PPoint2Df >::size_type result;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  result = ((std::vector< papillon::PPoint2Df > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  std::vector< papillon::PPoint2Df >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (std::vector< papillon::PPoint2Df >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Df__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *result = 0 ;
  
  result = (std::vector< papillon::PPoint2Df > *)new std::vector< papillon::PPoint2Df >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Df__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = 0 ;
  std::vector< papillon::PPoint2Df > *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Df > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PPoint2Df > *)new std::vector< papillon::PPoint2Df >((std::vector< papillon::PPoint2Df > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Df__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PPoint2Df > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PPoint2Df > *)new_std_vector_Sl_papillon_PPoint2Df_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Df_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  papillon::PPoint2Df result;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PPoint2Df_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PPoint2Df((const papillon::PPoint2Df &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Df_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  papillon::PPoint2Df *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PPoint2Df *) &std_vector_Sl_papillon_PPoint2Df_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  papillon::PPoint2Df *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PPoint2Df *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__setitem(arg1,arg2,(papillon::PPoint2Df const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  std::vector< papillon::PPoint2Df > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (std::vector< papillon::PPoint2Df > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Df > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PPoint2Df_Sg__AddRange(arg1,(std::vector< papillon::PPoint2Df > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Df_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PPoint2Df > *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PPoint2Df > *)std_vector_Sl_papillon_PPoint2Df_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  papillon::PPoint2Df *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PPoint2Df *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__Insert(arg1,arg2,(papillon::PPoint2Df const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Df > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PPoint2Df > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Df > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PPoint2Df > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Df_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPoint2Df *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Df > *result = 0 ;
  
  arg1 = (papillon::PPoint2Df *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Df const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PPoint2Df > *)std_vector_Sl_papillon_PPoint2Df_Sg__Repeat((papillon::PPoint2Df const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  std_vector_Sl_papillon_PPoint2Df_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Df_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Df > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PPoint2Df > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Df > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Df_Sg__SetRange(arg1,arg2,(std::vector< papillon::PPoint2Df > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorPoint2Df(void * jarg1) {
  std::vector< papillon::PPoint2Df > *arg1 = (std::vector< papillon::PPoint2Df > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Df > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_Clear(void * jarg1) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  papillon::PPoint2Di *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (papillon::PPoint2Di *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PPoint2Di const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorPoint2Di_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  std::vector< papillon::PPoint2Di >::size_type result;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  result = ((std::vector< papillon::PPoint2Di > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorPoint2Di_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  std::vector< papillon::PPoint2Di >::size_type result;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  result = ((std::vector< papillon::PPoint2Di > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  std::vector< papillon::PPoint2Di >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (std::vector< papillon::PPoint2Di >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Di__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *result = 0 ;
  
  result = (std::vector< papillon::PPoint2Di > *)new std::vector< papillon::PPoint2Di >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Di__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = 0 ;
  std::vector< papillon::PPoint2Di > *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Di > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PPoint2Di > *)new std::vector< papillon::PPoint2Di >((std::vector< papillon::PPoint2Di > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPoint2Di__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PPoint2Di > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PPoint2Di > *)new_std_vector_Sl_papillon_PPoint2Di_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Di_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  papillon::PPoint2Di result;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PPoint2Di_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PPoint2Di((const papillon::PPoint2Di &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Di_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  papillon::PPoint2Di *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PPoint2Di *) &std_vector_Sl_papillon_PPoint2Di_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  papillon::PPoint2Di *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__setitem(arg1,arg2,(papillon::PPoint2Di const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  std::vector< papillon::PPoint2Di > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (std::vector< papillon::PPoint2Di > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Di > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PPoint2Di_Sg__AddRange(arg1,(std::vector< papillon::PPoint2Di > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Di_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PPoint2Di > *result = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PPoint2Di > *)std_vector_Sl_papillon_PPoint2Di_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  papillon::PPoint2Di *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PPoint2Di *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__Insert(arg1,arg2,(papillon::PPoint2Di const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Di > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PPoint2Di > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Di > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PPoint2Di > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPoint2Di_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PPoint2Di *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Di > *result = 0 ;
  
  arg1 = (papillon::PPoint2Di *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PPoint2Di const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PPoint2Di > *)std_vector_Sl_papillon_PPoint2Di_Sg__Repeat((papillon::PPoint2Di const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  std_vector_Sl_papillon_PPoint2Di_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPoint2Di_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  int arg2 ;
  std::vector< papillon::PPoint2Di > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PPoint2Di > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PPoint2Di > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PPoint2Di_Sg__SetRange(arg1,arg2,(std::vector< papillon::PPoint2Di > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorPoint2Di(void * jarg1) {
  std::vector< papillon::PPoint2Di > *arg1 = (std::vector< papillon::PPoint2Di > *) 0 ;
  
  arg1 = (std::vector< papillon::PPoint2Di > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_Clear(void * jarg1) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  papillon::PEvent *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (papillon::PEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEvent const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PEvent const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorEvent_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  std::vector< papillon::PEvent >::size_type result;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  result = ((std::vector< papillon::PEvent > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorEvent_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  std::vector< papillon::PEvent >::size_type result;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  result = ((std::vector< papillon::PEvent > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  std::vector< papillon::PEvent >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (std::vector< papillon::PEvent >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorEvent__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PEvent > *result = 0 ;
  
  result = (std::vector< papillon::PEvent > *)new std::vector< papillon::PEvent >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PEvent > *arg1 = 0 ;
  std::vector< papillon::PEvent > *result = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PEvent > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PEvent > *)new std::vector< papillon::PEvent >((std::vector< papillon::PEvent > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorEvent__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PEvent > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PEvent > *)new_std_vector_Sl_papillon_PEvent_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorEvent_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  papillon::PEvent result;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PEvent_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PEvent((const papillon::PEvent &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorEvent_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  papillon::PEvent *result = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PEvent *) &std_vector_Sl_papillon_PEvent_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  papillon::PEvent *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEvent const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PEvent_Sg__setitem(arg1,arg2,(papillon::PEvent const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  std::vector< papillon::PEvent > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (std::vector< papillon::PEvent > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PEvent > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PEvent_Sg__AddRange(arg1,(std::vector< papillon::PEvent > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorEvent_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PEvent > *result = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PEvent > *)std_vector_Sl_papillon_PEvent_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  papillon::PEvent *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEvent const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PEvent_Sg__Insert(arg1,arg2,(papillon::PEvent const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  std::vector< papillon::PEvent > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PEvent > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PEvent > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PEvent_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PEvent > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PEvent_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PEvent_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorEvent_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PEvent *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PEvent > *result = 0 ;
  
  arg1 = (papillon::PEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PEvent const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PEvent > *)std_vector_Sl_papillon_PEvent_Sg__Repeat((papillon::PEvent const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  std_vector_Sl_papillon_PEvent_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PEvent_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorEvent_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  int arg2 ;
  std::vector< papillon::PEvent > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PEvent > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PEvent > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PEvent_Sg__SetRange(arg1,arg2,(std::vector< papillon::PEvent > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorEvent(void * jarg1) {
  std::vector< papillon::PEvent > *arg1 = (std::vector< papillon::PEvent > *) 0 ;
  
  arg1 = (std::vector< papillon::PEvent > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_Clear(void * jarg1) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_Add(void * jarg1, void * jarg2) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  papillon::PGuid *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (papillon::PGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((papillon::PGuid const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorGuid_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  std::vector< papillon::PGuid >::size_type result;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  result = ((std::vector< papillon::PGuid > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorGuid_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  std::vector< papillon::PGuid >::size_type result;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  result = ((std::vector< papillon::PGuid > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  std::vector< papillon::PGuid >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (std::vector< papillon::PGuid >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorGuid__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PGuid > *result = 0 ;
  
  result = (std::vector< papillon::PGuid > *)new std::vector< papillon::PGuid >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorGuid__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PGuid > *arg1 = 0 ;
  std::vector< papillon::PGuid > *result = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PGuid > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PGuid > *)new std::vector< papillon::PGuid >((std::vector< papillon::PGuid > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorGuid__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PGuid > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PGuid > *)new_std_vector_Sl_papillon_PGuid_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorGuid_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  papillon::PGuid result;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PGuid_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new papillon::PGuid((const papillon::PGuid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorGuid_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  papillon::PGuid *result = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PGuid *) &std_vector_Sl_papillon_PGuid_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  papillon::PGuid *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PGuid_Sg__setitem(arg1,arg2,(papillon::PGuid const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  std::vector< papillon::PGuid > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (std::vector< papillon::PGuid > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PGuid > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PGuid_Sg__AddRange(arg1,(std::vector< papillon::PGuid > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorGuid_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PGuid > *result = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PGuid > *)std_vector_Sl_papillon_PGuid_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  papillon::PGuid *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (papillon::PGuid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PGuid_Sg__Insert(arg1,arg2,(papillon::PGuid const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  std::vector< papillon::PGuid > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PGuid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PGuid > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PGuid_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PGuid > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PGuid_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PGuid_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorGuid_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  papillon::PGuid *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PGuid > *result = 0 ;
  
  arg1 = (papillon::PGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "papillon::PGuid const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PGuid > *)std_vector_Sl_papillon_PGuid_Sg__Repeat((papillon::PGuid const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  std_vector_Sl_papillon_PGuid_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PGuid_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorGuid_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  int arg2 ;
  std::vector< papillon::PGuid > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PGuid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PGuid > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PGuid_Sg__SetRange(arg1,arg2,(std::vector< papillon::PGuid > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorGuid(void * jarg1) {
  std::vector< papillon::PGuid > *arg1 = (std::vector< papillon::PGuid > *) 0 ;
  
  arg1 = (std::vector< papillon::PGuid > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_Clear(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_Add(void * jarg1, unsigned char jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorByte_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorByte_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorByte__SWIG_0() {
  void * jresult ;
  std::vector< unsigned char > *result = 0 ;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorByte__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorByte__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned char > *)new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_VectorByte_getitemcopy(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_VectorByte_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char *) &std_vector_Sl_unsigned_SS_char_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_char_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorByte_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_Insert(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorByte_Repeat(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__Repeat((unsigned char const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorByte_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorByte_Contains(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorByte_IndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorByte_LastIndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorByte_Remove(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorByte(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Clear(void * jarg1) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Add(void * jarg1, char * jarg2) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  papillon::PString *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg2_str(jarg2);
  arg2 = &arg2_str; 
  //arg2 = new papillon::PString(jarg2);
  
  (arg1)->push_back((papillon::PString const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorString_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  std::vector< papillon::PString >::size_type result;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  result = ((std::vector< papillon::PString > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorString_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  std::vector< papillon::PString >::size_type result;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  result = ((std::vector< papillon::PString > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  std::vector< papillon::PString >::size_type arg2 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (std::vector< papillon::PString >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_0() {
  void * jresult ;
  std::vector< papillon::PString > *result = 0 ;
  
  result = (std::vector< papillon::PString > *)new std::vector< papillon::PString >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< papillon::PString > *arg1 = 0 ;
  std::vector< papillon::PString > *result = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PString > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< papillon::PString > *)new std::vector< papillon::PString >((std::vector< papillon::PString > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< papillon::PString > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< papillon::PString > *)new_std_vector_Sl_papillon_PString_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_VectorString_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  papillon::PString result;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_papillon_PString_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_VectorString_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  papillon::PString *result = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (papillon::PString *) &std_vector_Sl_papillon_PString_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->ToString().c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  papillon::PString *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  try {
    std_vector_Sl_papillon_PString_Sg__setitem(arg1,arg2,(papillon::PString const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_AddRange(void * jarg1, void * jarg2) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  std::vector< papillon::PString > *arg2 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (std::vector< papillon::PString > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PString > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_papillon_PString_Sg__AddRange(arg1,(std::vector< papillon::PString > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< papillon::PString > *result = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< papillon::PString > *)std_vector_Sl_papillon_PString_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  papillon::PString *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  papillon::PString arg3_str(jarg3);
  arg3 = &arg3_str; 
  //arg3 = new papillon::PString(jarg3);
  
  try {
    std_vector_Sl_papillon_PString_Sg__Insert(arg1,arg2,(papillon::PString const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  std::vector< papillon::PString > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PString > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PString > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PString_Sg__InsertRange(arg1,arg2,(std::vector< papillon::PString > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveAt(void * jarg1, int jarg2) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_papillon_PString_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PString_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  papillon::PString *arg1 = 0 ;
  int arg2 ;
  std::vector< papillon::PString > *result = 0 ;
  
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  papillon::PString arg1_str(jarg1);
  arg1 = &arg1_str; 
  //arg1 = new papillon::PString(jarg1);
  
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< papillon::PString > *)std_vector_Sl_papillon_PString_Sg__Repeat((papillon::PString const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_0(void * jarg1) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  std_vector_Sl_papillon_PString_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_papillon_PString_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  int arg2 ;
  std::vector< papillon::PString > *arg3 = 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< papillon::PString > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< papillon::PString > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_papillon_PString_Sg__SetRange(arg1,arg2,(std::vector< papillon::PString > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorString(void * jarg1) {
  std::vector< papillon::PString > *arg1 = (std::vector< papillon::PString > *) 0 ;
  
  arg1 = (std::vector< papillon::PString > *)jarg1; 
  delete arg1;
}


SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PBool_SWIGUpcast(papillon::PBoxing< bool > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PInt8_SWIGUpcast(papillon::PBoxing< papillon::int8 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PInt16_SWIGUpcast(papillon::PBoxing< papillon::int16 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PInt32_SWIGUpcast(papillon::PBoxing< papillon::int32 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PInt64_SWIGUpcast(papillon::PBoxing< papillon::int64 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PUInt8_SWIGUpcast(papillon::PBoxing< papillon::uint8 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PUInt16_SWIGUpcast(papillon::PBoxing< papillon::uint16 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PUInt32_SWIGUpcast(papillon::PBoxing< papillon::uint32 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PUInt64_SWIGUpcast(papillon::PBoxing< papillon::uint64 > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFloat_SWIGUpcast(papillon::PBoxing< float > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDouble_SWIGUpcast(papillon::PBoxing< double > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPluginInstance_SWIGUpcast(papillon::PPluginInstance *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PList_SWIGUpcast(papillon::PList *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PStringMap_SWIGUpcast(papillon::PMap< papillon::PString,papillon::PObject > *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PByteStream_SWIGUpcast(papillon::PByteStream *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PByteArray_SWIGUpcast(papillon::PByteArray *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PColour3i_SWIGUpcast(papillon::PColour3i *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PComparer_SWIGUpcast(papillon::PComparer *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPoint2Df_SWIGUpcast(papillon::PPoint2Df *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPoint2Di_SWIGUpcast(papillon::PPoint2Di *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPoint2DfList_SWIGUpcast(papillon::PPoint2DfList *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPolygonf_SWIGUpcast(papillon::PPolygonf *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PPolygoni_SWIGUpcast(papillon::PPolygoni *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PMap< papillon::PString,papillon::PObject > * SWIGSTDCALL CSharp_PProperties_SWIGUpcast(papillon::PProperties *jarg1) {
    return (papillon::PMap< papillon::PString,papillon::PObject > *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PRectanglef_SWIGUpcast(papillon::PRectanglef *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PRectanglei_SWIGUpcast(papillon::PRectanglei *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PSizef_SWIGUpcast(papillon::PSizef *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PSizei_SWIGUpcast(papillon::PSizei *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PSocket_SWIGUpcast(papillon::PSocket *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDateTime_SWIGUpcast(papillon::PDateTime *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDate_SWIGUpcast(papillon::PDate *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PDescriber_SWIGUpcast(papillon::PDescriber *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PObjectType_SWIGUpcast(papillon::PObjectType *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PGuid_SWIGUpcast(papillon::PGuid *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDescription_SWIGUpcast(papillon::PDescription *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDescriptor_SWIGUpcast(papillon::PDescriptor *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFeaturePoint_SWIGUpcast(papillon::PFeaturePoint *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFeatureRectangle_SWIGUpcast(papillon::PFeatureRectangle *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PString_SWIGUpcast(papillon::PString *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PStringList_SWIGUpcast(papillon::PStringList *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFeatureMap_SWIGUpcast(papillon::PFeatureMap *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFrame_SWIGUpcast(papillon::PFrame *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PImage_SWIGUpcast(papillon::PImage *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PTrack_SWIGUpcast(papillon::PTrack *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PDetection_SWIGUpcast(papillon::PDetection *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PList * SWIGSTDCALL CSharp_PDetectionList_SWIGUpcast(papillon::PDetectionList *jarg1) {
    return (papillon::PList *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PDetector_SWIGUpcast(papillon::PDetector *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PExampleSet_SWIGUpcast(papillon::PExampleSet *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PFrameToFrameTracker_SWIGUpcast(papillon::PFrameToFrameTracker *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PGPSLocation_SWIGUpcast(papillon::PGPSLocation *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PIdentifyResult_SWIGUpcast(papillon::PIdentifyResult *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PIdentifyResults_SWIGUpcast(papillon::PIdentifyResults *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PImageFilter_SWIGUpcast(papillon::PImageFilter *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PInputVideoStream_SWIGUpcast(papillon::PInputVideoStream *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PFaceMetaData_SWIGUpcast(papillon::PFaceMetaData *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PMatchScore_SWIGUpcast(papillon::PMatchScore *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PByteStream * SWIGSTDCALL CSharp_PMemoryStream_SWIGUpcast(papillon::PMemoryStream *jarg1) {
    return (papillon::PByteStream *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_POutputVideoStream_SWIGUpcast(papillon::POutputVideoStream *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PTextFile_SWIGUpcast(papillon::PTextFile *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PTime_SWIGUpcast(papillon::PTime *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PTimer_SWIGUpcast(papillon::PTimer *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PUri_SWIGUpcast(papillon::PUri *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PVersion_SWIGUpcast(papillon::PVersion *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PWatchlist_SWIGUpcast(papillon::PWatchlist *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PWatchlistOptions_SWIGUpcast(papillon::PWatchlistOptions *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PEvent_SWIGUpcast(papillon::PEvent *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PPluginInstance * SWIGSTDCALL CSharp_PAnalytics_SWIGUpcast(papillon::PAnalytics *jarg1) {
    return (papillon::PPluginInstance *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PEntity_SWIGUpcast(papillon::PEntity *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PSqlDatabase_SWIGUpcast(papillon::PSqlDatabase *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PSqlQuery_SWIGUpcast(papillon::PSqlQuery *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PStore_SWIGUpcast(papillon::PStore *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PStoreIterator_SWIGUpcast(papillon::PStoreIterator *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PStore * SWIGSTDCALL CSharp_PDatabaseStore_SWIGUpcast(papillon::PDatabaseStore *jarg1) {
    return (papillon::PStore *)jarg1;
}

SWIGEXPORT papillon::PStoreIterator * SWIGSTDCALL CSharp_PDatabaseStoreIterator_SWIGUpcast(papillon::PDatabaseStoreIterator *jarg1) {
    return (papillon::PStoreIterator *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PEnrollment_SWIGUpcast(papillon::PEnrollment *jarg1) {
    return (papillon::PObject *)jarg1;
}

SWIGEXPORT papillon::PObject * SWIGSTDCALL CSharp_PVerify_SWIGUpcast(papillon::PVerify *jarg1) {
    return (papillon::PObject *)jarg1;
}

#ifdef __cplusplus
}
#endif

